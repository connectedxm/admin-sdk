{
  "openapi": "3.0.0",
  "info": {
    "title": "Connected Admin API",
    "version": "1.0.0",
    "description": "The Admin SDK API section provides an auto-generated OpenAPI spec based on TypeScript queries. Users can utilize this section to access detailed information about the Admin SDK API, enabling them to effectively integrate and utilize the SDK within their projects"
  },
  "servers": [
    {
      "url": "https://admin-api.connected.dev",
      "description": "Production server"
    },
    {
      "url": "https://admin-api.staging.connected.dev",
      "description": "Staging server"
    }
  ],
  "paths": {
    "/accounts/{accountId}/delegates/{delegateId}": {
      "post": {
        "summary": "AddAccountDelegate",
        "description": "Endpoint to add a delegate to an account. This function allows the addition of a delegate to a specified account by providing the account and delegate IDs. It is used in scenarios where account management requires delegation capabilities.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "delegateId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the delegate",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveAccountDelegate",
        "description": "Endpoint to remove a delegate from an account. This function allows the removal of a delegate associated with a specific account by their unique identifiers. It is designed to be used in applications where account management and delegate permissions are required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "delegateId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the delegate",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/followers/{followerId}": {
      "post": {
        "summary": "AddAccountFollower",
        "description": "Adds a follower to a specified account. This function allows the addition of a follower to an account by specifying the account and follower IDs. It is used in scenarios where account follower management is required, ensuring that the follower is added to the account's follower list.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "followerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the follower",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveAccountFollower",
        "description": "Endpoint to remove a follower from a specified account. This function allows the removal of a follower from an account by specifying the account ID and the follower ID. It is designed to be used in applications where managing account followers is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "followerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the follower to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/following/{followingId}": {
      "post": {
        "summary": "AddAccountFollowing",
        "description": "Endpoint to add a following relationship for a specified account. This function allows an account to follow another account by specifying the account IDs. It updates the account's following list and invalidates the relevant queries to ensure data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "followingId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account to follow",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveAccountFollowing",
        "description": "Endpoint to remove a following relationship for a specified account. This function allows the removal of a following relationship between two accounts by specifying their IDs. It is used in scenarios where an account needs to unfollow another account.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "followingId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the following account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/groups/{groupId}": {
      "post": {
        "summary": "AddAccountGroup",
        "description": "Endpoint to add a group to an account and invalidate related queries. This function allows the addition of a specified group to a given account, ensuring that any related cached queries are invalidated to maintain data consistency. It is designed for use in applications where account group management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveAccountGroup",
        "description": "Endpoint to remove a group from an account. This function allows the removal of a specified group from a given account by utilizing the account and group identifiers. It is designed to be used in scenarios where account group management is required, ensuring that the specified group is detached from the account.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/interests/{interestId}": {
      "post": {
        "summary": "AddAccountInterest",
        "description": "Endpoint to add an interest to a specific account. This function allows the addition of a new interest to an account by specifying the account ID and the interest ID. It is designed to update the account's interests and ensure the query data is refreshed accordingly.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveAccountInterest",
        "description": "Endpoint to remove an interest from a specified account. This function allows the removal of a specific interest from an account by providing the account ID and the interest ID. It is used in scenarios where account interests need to be dynamically managed and updated.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/tiers/{tierId}": {
      "post": {
        "summary": "AddAccountTier",
        "description": "Endpoint to add a tier to a specified account and update the query client. This function allows the addition of a specific tier to an account, ensuring that the query client is updated accordingly. It is designed for use in applications where account tier management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveAccountTier",
        "description": "Endpoint to remove a tier from a specified account. This function allows the removal of a specific tier from an account by providing the account ID and the tier ID. It is used in scenarios where account tier management is required, ensuring that the specified tier is detached from the account.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/cognito/{username}/confirm": {
      "put": {
        "summary": "ConfirmAccountCognitoUser",
        "description": "Endpoint to confirm a Cognito user account associated with a specific account ID and username. This function is used to confirm the status of a Cognito user within an account, ensuring that the user is recognized and validated by the system. It is particularly useful in scenarios where user confirmation is required for account activation or access.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "The username of the Cognito user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "summary": "CreateAccount",
        "description": "Endpoint to create a new account within the system. This function allows for the creation of a new account by providing the necessary account details. It is designed to be used in applications where account management is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAccounts",
        "description": "Endpoint to retrieve a list of accounts with optional filtering by account type. This function allows users to fetch a paginated list of accounts, which can be filtered by account type if specified. It is designed to be used in applications where account management and retrieval are necessary.",
        "parameters": [
          {
            "in": "query",
            "name": "accountType",
            "schema": {
              "type": "string"
            },
            "description": "Optional account type",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/addresses": {
      "post": {
        "summary": "CreateAccountAddress",
        "description": "Endpoint to create a new account address and invalidate related queries. This function allows the creation of a new address for a specified account and ensures that any related cached queries are invalidated to maintain data consistency. It is designed for use in applications where account address management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAddressCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/AccountAddress"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAccountAddresses",
        "description": "Endpoint to fetch a list of account addresses with support for pagination and filtering. This function allows retrieval of addresses associated with a specific account, providing options for pagination and filtering. It is designed to be used in applications where account address information is needed.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountAddress"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}": {
      "delete": {
        "summary": "DeleteAccount",
        "description": "Endpoint to delete a specific account by its unique identifier. This function allows for the removal of an account from the system, ensuring that all associated queries are invalidated. It is designed to be used in applications where account management and cleanup are necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateAccount",
        "description": "Endpoint to update an existing account with new details. This function allows for updating the details of a specific account identified by its ID. It is designed to be used in applications where account information needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAccount",
        "description": "Fetches account details by a specific account ID. This function is designed to retrieve detailed information about an account using its unique identifier. It is intended for use in applications where account-specific data is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/addresses/{addressId}": {
      "delete": {
        "summary": "DeleteAccountAddress",
        "description": "Endpoint to delete a specific address associated with an account. This function allows for the removal of an address from an account by specifying the account and address IDs. It is intended for use in applications where account address management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "addressId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the address",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateAccountAddress",
        "description": "Endpoint to update the address of a specified account. This function allows updating the address details of a specific account by providing the account ID and address ID. It is designed to be used in applications where account address management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "addressId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the address",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAddressUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/AccountAddress"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAccountAddress",
        "description": "Retrieves a specific account address using the account ID and address ID. This function is designed to fetch detailed information about an account's address, which can be used in applications requiring precise address data for a given account.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "addressId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the address",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/AccountAddress"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/leads/{leadId}": {
      "delete": {
        "summary": "DeleteAccountLead",
        "description": "Endpoint to delete a lead associated with a specific account. This function allows the removal of a lead from an account by specifying the account and lead identifiers. It is intended for use in scenarios where account management requires the deletion of associated leads.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "leadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the lead",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateAccountLead",
        "description": "Endpoint to update a lead associated with a specific account. This function allows updating the details of a lead linked to a particular account using the provided account and lead identifiers. It is designed to be used in applications where lead information needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "leadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the lead",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeadUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Lead"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAccountLead",
        "description": "Endpoint to fetch a specific lead from an account. This function retrieves detailed information about a lead associated with a particular account. It is designed for applications that require access to specific lead data within an account.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "leadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the lead",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Lead"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/export": {
      "post": {
        "summary": "ExportAccount",
        "description": "Endpoint to export data for a specific account. This function allows users to export detailed information about an account using the provided account ID. It is designed to be used in applications where exporting account data is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/impersonate/{username}": {
      "post": {
        "summary": "ImpersonateAccount",
        "description": "Endpoint to impersonate a user account by providing the account ID and username. This function allows an admin to act on behalf of a user by impersonating their account, which can be useful for troubleshooting or managing user-specific settings.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the account to impersonate",
            "required": true
          },
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "The username associated with the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/cognito/{username}/password": {
      "put": {
        "summary": "UpdateAccountCognitoUserPassword",
        "description": "Endpoint to update the password for a Cognito user associated with an account. This function allows updating the password of a Cognito user linked to a specific account. It is intended for use in scenarios where password management for Cognito users is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "The username of the Cognito user",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/interests/{interestId}": {
      "post": {
        "summary": "AddActivityInterest",
        "description": "Adds an interest to a specific activity and updates the query client. This function allows users to associate an interest with a given activity, ensuring that the query client is updated to reflect this change. It is useful in scenarios where activities need to be dynamically linked with interests.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activity",
            "required": true
          },
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveActivityInterest",
        "description": "Endpoint to remove an interest from a specific activity. This function allows the removal of a specified interest from an activity by providing the activity and interest IDs. It is designed to be used in applications where managing activity interests is required.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activity",
            "required": true
          },
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}": {
      "delete": {
        "summary": "DeleteActivity",
        "description": "Endpoint to delete a specific activity by its ID. This function allows for the removal of an activity from the system, ensuring that all related queries are invalidated or removed. It is designed to be used in applications where activity management is required, providing a way to maintain up-to-date data.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the activity to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateActivity",
        "description": "Endpoint to update an existing activity with new data. This function allows users to modify the details of a specific activity by providing the activity ID and the updated data. It ensures that the activity information is current and accurate within the system.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the activity to update",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetActivity",
        "description": "Fetches details for a specific activity by its ID. This function utilizes a connected single query to retrieve data about an activity within the system. It is designed to be used in applications where detailed information about an activity is required.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the activity",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/advertisements": {
      "post": {
        "summary": "CreateAdvertisement",
        "description": "Endpoint to create a new advertisement. This function allows the creation of a new advertisement by sending the advertisement data to the server. It is designed to be used in applications where advertisements need to be dynamically created and managed.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvertisementCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Advertisement"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAdvertisements",
        "description": "Endpoint to retrieve a list of advertisements. This function fetches advertisements with optional filtering by search term. It is designed to be used in applications where a list of advertisements is required.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Advertisement"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/advertisements/{advertisementId}": {
      "delete": {
        "summary": "DeleteAdvertisement",
        "description": "Endpoint to delete a specific advertisement by its ID. This function allows for the removal of an advertisement from the system, ensuring that it is no longer accessible or visible. It is designed to be used in applications where advertisement management is required, providing a mechanism to delete advertisements.",
        "parameters": [
          {
            "in": "path",
            "name": "advertisementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the advertisement to delete",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateAdvertisement",
        "description": "Endpoint to update an existing advertisement with new details. This function allows users to modify the details of an advertisement by providing the advertisement ID and the updated inputs. It ensures that the advertisement data is updated in the system and invalidates the relevant queries to refresh the data.",
        "parameters": [
          {
            "in": "path",
            "name": "advertisementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the advertisement",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvertisementUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Advertisement"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAdvertisement",
        "description": "Fetches advertisement data by its unique identifier. This function is designed to retrieve detailed information about a specific advertisement. It is intended for use in applications where advertisement data is required.",
        "parameters": [
          {
            "in": "path",
            "name": "advertisementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the advertisement",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Advertisement"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/announcements/{announcementId}/schedule": {
      "delete": {
        "summary": "CancelAnnouncementSchedule",
        "description": "Endpoint to cancel a scheduled announcement. This function allows users to cancel a previously scheduled announcement by providing the announcement ID. It is useful in scenarios where an announcement needs to be retracted or rescheduled.",
        "parameters": [
          {
            "in": "path",
            "name": "announcementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the announcement to cancel",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Announcement"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateAnnouncementSchedule",
        "description": "Endpoint to update the schedule for a specific announcement. This function allows updating the schedule details of an announcement, including the date and optional notification settings. It is designed to be used in applications where managing announcement schedules is required.",
        "parameters": [
          {
            "in": "path",
            "name": "announcementId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the announcement",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnouncementSchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Announcement"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/announcements": {
      "post": {
        "summary": "CreateAnnouncement",
        "description": "Endpoint to create a new announcement within the system. This function allows users to submit details for a new announcement, which will be processed and stored. It is designed to be used in applications where announcements need to be dynamically created and managed.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnouncementCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Announcement"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAnnouncements",
        "description": "Endpoint to manage and fetch announcements. This function provides the ability to retrieve announcements based on various optional filters such as event, group, tier, channel, and account. It is designed to be used in applications where announcements need to be dynamically fetched and managed.",
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": false
          },
          {
            "in": "query",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": false
          },
          {
            "in": "query",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": false
          },
          {
            "in": "query",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": false
          },
          {
            "in": "query",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Announcement"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/announcements/{announcementId}": {
      "delete": {
        "summary": "DeleteAnnouncement",
        "description": "Endpoint to delete a specific announcement by its ID. This function allows for the removal of an announcement from the system, ensuring that it is no longer accessible. It is designed to be used in administrative contexts where managing announcements is required.",
        "parameters": [
          {
            "in": "path",
            "name": "announcementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the announcement to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateAnnouncement",
        "description": "Endpoint to update an existing announcement. This function allows users to modify the details of a specific announcement by providing the announcement ID and the updated inputs. It ensures that the announcement data is updated in the system and the relevant queries are invalidated to reflect the changes.",
        "parameters": [
          {
            "in": "path",
            "name": "announcementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the announcement",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnouncementUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Announcement"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetAnnouncement",
        "description": "Fetches a specific announcement by its ID. This function is designed to retrieve detailed information about a particular announcement within the system. It is useful for applications that need to display or process information about a single announcement.",
        "parameters": [
          {
            "in": "path",
            "name": "announcementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the announcement",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Announcement"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/announcements/{announcementId}/preview": {
      "post": {
        "summary": "SendAnnouncementPreview",
        "description": "Endpoint to send a preview of an announcement. This function triggers the sending of a preview for a specific announcement, identified by its ID. It is designed to be used in applications where previewing announcements before sending is required.",
        "parameters": [
          {
            "in": "path",
            "name": "announcementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the announcement to preview",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/benefits": {
      "post": {
        "summary": "CreateBenefit",
        "description": "Endpoint to create a new benefit within the system. This function allows the creation of a benefit by providing the necessary input parameters. It interacts with the admin API to post the benefit data and updates the query cache upon successful creation.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenefitCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Benefit"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetBenefits",
        "description": "Retrieves a list of benefits, optionally filtered by a specific event ID. This function is designed to be used in applications where a comprehensive list of benefits is required, with the ability to filter results based on an event. It supports infinite scrolling through pagination.",
        "parameters": [
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event to filter benefits",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Benefit"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/benefits/{benefitId}": {
      "delete": {
        "summary": "DeleteBenefit",
        "description": "Endpoint to delete a specific benefit by its ID. This function allows the removal of a benefit from the system, ensuring that all related queries are invalidated and removed. It is designed for use in administrative applications where benefit management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "benefitId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the benefit to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateBenefit",
        "description": "Endpoint to update the details of a specific benefit. This function allows for updating the information of a benefit by providing the benefit ID and the new details. It is used in scenarios where benefit information needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "benefitId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the benefit",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenefitTranslationUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Benefit"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetBenefit",
        "description": "Endpoint to fetch details of a specific benefit by its ID. This function allows users to retrieve comprehensive information about a particular benefit. It is designed for applications that require detailed data on benefits for display or processing.",
        "parameters": [
          {
            "in": "path",
            "name": "benefitId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the benefit",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Benefit"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/subscribers": {
      "post": {
        "summary": "AddChannelSubscriber",
        "description": "Adds a subscriber to a specified channel and invalidates the relevant query cache. This function is used to associate an account with a channel as a subscriber, ensuring that the channel's subscriber list is updated. It is particularly useful in applications where real-time updates to channel subscriptions are necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "accountId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/BaseChannelSubscriber"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetChannelSubscribers",
        "description": "Endpoint to retrieve a list of subscribers for a specific channel. This function allows users to fetch subscribers of a channel, with an optional filter by status. It is designed to be used in applications where managing or viewing channel subscribers is required.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Optional status to filter subscribers",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BaseChannelSubscriber"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/contents/{contentId}/schedule": {
      "delete": {
        "summary": "CancelChannelContentPublishSchedule",
        "description": "Endpoint to cancel the scheduled publish of channel content. This function allows users to cancel a previously scheduled publish operation for specific content within a channel. It is useful in scenarios where content needs to be unscheduled due to changes in publishing plans or errors in the scheduling process.",
        "parameters": [
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContent"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "UpdateChannelContentPublishSchedule",
        "description": "Endpoint to update the publish schedule for a specific channel content. This function allows updating the schedule details for content within a channel, including date and notification settings. It is designed to be used in applications where managing content schedules is required.",
        "parameters": [
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentPublishSchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContent"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels": {
      "post": {
        "summary": "CreateChannel",
        "description": "Endpoint to create a new channel within the application. This function allows for the creation of a channel by providing the necessary inputs. It is designed to be used in scenarios where new communication channels need to be established.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Channel"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetChannels",
        "description": "Endpoint to retrieve a list of channels. This function fetches a paginated list of channels from the server, allowing for optional sorting and searching. It is designed to be used in applications where a comprehensive list of channels is required.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Channel"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/contents": {
      "post": {
        "summary": "CreateChannelContent",
        "description": "Endpoint to create content for a specified channel. This function allows users to add new content to a specific channel by providing the necessary content details and channel ID. It is designed to be used in applications where channel content management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelContentCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContent"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetChannelContents",
        "description": "Fetches the contents of a specific channel, with an optional filter for featured content. This function is designed to retrieve a list of contents associated with a given channel ID. It supports infinite scrolling and can be used in applications where channel content needs to be displayed.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "query",
            "name": "featured",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional flag to filter featured contents",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelContent"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/contents/{contentId}/guests": {
      "post": {
        "summary": "CreateChannelContentGuest",
        "description": "Endpoint to create a new guest for a specific channel content. This function allows the creation of a guest associated with a particular channel content by providing the necessary details. It is designed to be used in applications where managing guest access to channel content is required.",
        "parameters": [
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelContentGuestCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContentGuest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetChannelContentGuests",
        "description": "Endpoint to fetch guests for a specific channel content. This function retrieves a list of guests associated with a particular channel content, allowing users to manage or view guest information based on the channel and content identifiers.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelContentGuest"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}": {
      "delete": {
        "summary": "DeleteChannel",
        "description": "Endpoint to delete a specific channel by its ID. This function allows for the removal of a channel from the system, ensuring that all associated data is invalidated and removed from the cache. It is intended for use in administrative contexts where channel management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the channel to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateChannel",
        "description": "Endpoint to update the details of a specific channel. This function allows updating various attributes of a channel identified by its ID. It is designed to be used in applications where channel management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the channel",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Channel"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetChannel",
        "description": "Endpoint to retrieve details of a specific channel by its unique identifier. This function allows users to fetch comprehensive information about a channel using the provided channel ID. It is designed for applications that require detailed channel data.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the channel",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Channel"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/contents/{contentId}": {
      "delete": {
        "summary": "DeleteChannelContent",
        "description": "Endpoint to delete content from a specified channel. This function allows for the removal of content from a channel by specifying the content and channel IDs. It is useful in scenarios where content needs to be managed or moderated within a channel.",
        "parameters": [
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content to be deleted",
            "required": true
          },
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel from which the content will be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateChannelContent",
        "description": "Endpoint to update the content of a specified channel. This function allows updating the details of a channel's content by providing the content ID, channel ID, and the new content inputs. It is designed for applications that need to modify existing channel content.",
        "parameters": [
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelContentUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContent"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetChannelContent",
        "description": "Retrieves specific content from a channel by its ID. This function is used to fetch detailed information about a particular piece of content within a specified channel. It is designed for applications that require access to individual channel content details.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the content",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContent"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/contents/{contentId}/guests/{guestId}": {
      "delete": {
        "summary": "DeleteChannelContentGuest",
        "description": "Endpoint to delete a guest from the specified channel content. This function allows the removal of a guest from a particular content within a channel. It is useful in scenarios where guest access needs to be revoked or managed.",
        "parameters": [
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "guestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the guest",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContent"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateChannelContentGuest",
        "description": "Endpoint to update a channel content guest. This function allows updating the details of a guest associated with specific content in a channel. It is used to modify guest information such as permissions or roles within the context of channel content.",
        "parameters": [
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "guestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the guest",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelContentGuestUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContentGuest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetChannelContentGuest",
        "description": "Endpoint to retrieve details of a specific guest within a channel's content. This function allows users to fetch detailed information about a guest associated with a particular content in a channel. It is designed for applications that require access to guest details for content management or display purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "path",
            "name": "guestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the guest",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChannelContentGuest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/subscribers/{accountId}": {
      "delete": {
        "summary": "RemoveChannelSubscriber",
        "description": "Endpoint to remove a subscriber from a specified channel. This function allows the removal of a subscriber from a channel by specifying the channel ID and account ID. It is used in scenarios where managing channel subscriptions is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/BaseChannelSubscriber"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateChannelSubscriber",
        "description": "Endpoint to update a channel subscriber's information. This function allows updating the details of a subscriber associated with a specific channel. It is designed to be used in applications where managing channel subscribers is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelSubscriberUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/BaseChannelSubscriber"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetChannelSubscriber",
        "description": "Fetches data for a specific channel subscriber by channel and account ID. This function is used to retrieve detailed information about a subscriber of a particular channel. It is designed for applications that need to access subscriber data within a channel context.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/BaseChannelSubscriber"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/access-users": {
      "post": {
        "summary": "AddEventAccessUser",
        "description": "Endpoint to add a user to the access list of a specific event. This function allows administrators to grant access to users for specific events by adding them to the event's access list. It is designed to be used in applications where event access management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventAccessUsers",
        "description": "Retrieves a list of users who have access to a specific event. This function is used to fetch users associated with an event, providing details about their access. It is useful in scenarios where event access management and user details are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BaseUser"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/access-users/{userId}": {
      "delete": {
        "summary": "RemoveEventAccessUser",
        "description": "Endpoint to remove a user from the access list of a specific event. This function allows administrators to revoke access for a user from a particular event, ensuring that the user can no longer participate or view the event details. It is useful in scenarios where user access needs to be dynamically managed.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/activations": {
      "post": {
        "summary": "CreateEventActivation",
        "description": "Endpoint to create a new event activation. This function allows the creation of an event activation by providing the necessary event ID and activation inputs. It is designed to be used in applications where event activations need to be managed and updated.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventActivationCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventActivation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventActivations",
        "description": "Retrieves a list of event activations with support for pagination and filtering. This function is designed to fetch event activations associated with a specific event ID. It is useful for applications that need to display or process event activations in a paginated format.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventActivation"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/activations/{activationId}/completions": {
      "post": {
        "summary": "CreateEventActivationCompletion",
        "description": "Endpoint to create a completion for a specific event activation. This function allows the creation of a completion record for a given event activation, utilizing the provided event and activation identifiers along with the completion inputs. It is designed to be used in scenarios where event activations need to be completed and tracked within the system.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "activationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activation",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventActivationCompletionCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventActivation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventActivationCompletions",
        "description": "Retrieves a list of completions for a specific event activation. This function fetches data about the completions of an activation within a given event, allowing users to track and manage activation progress.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "activationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activation",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ActivationCompletion"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/activations/{activationId}": {
      "delete": {
        "summary": "DeleteEventActivation",
        "description": "Endpoint to delete a specific event activation by its unique identifiers. This function allows for the removal of an activation associated with a particular event. It is designed to be used in applications where event activations need to be managed or removed.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "activationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventActivation",
        "description": "Updates an event activation by its ID and invalidates the relevant query in the query client. This function is used to modify the details of an existing event activation, ensuring that the query client reflects the latest data by invalidating the cache for the specific event activation. It is designed for applications that manage event activations and require real-time updates.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "activationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activation",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventActivationUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventActivation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventActivation",
        "description": "Fetches detailed information about a specific event activation using the admin API. This function is designed to retrieve data related to a particular event activation by its unique identifiers. It is useful for applications that need to display or process event activation details.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "activationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventActivation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/activations/{activationId}/completions/{completionId}": {
      "delete": {
        "summary": "DeleteEventActivationCompletion",
        "description": "Deletes a specific event activation completion and invalidates related queries. This function is used to remove a completion from an event activation, ensuring that any cached data related to the event or activation is invalidated to maintain data consistency. It is particularly useful in scenarios where event activations are dynamically managed and require real-time updates.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "activationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activation",
            "required": true
          },
          {
            "in": "path",
            "name": "completionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the completion",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventActivationCompletion",
        "description": "Endpoint to update the completion status of an event activation. This function allows updating the completion details of a specific event activation by providing the necessary identifiers and update inputs. It is intended for use in scenarios where the completion status of an event activation needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "activationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activation",
            "required": true
          },
          {
            "in": "path",
            "name": "completionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the completion",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventActivationCompletionUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventActivation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/addOns/{addOnId}/passTypes/{passTypeId}": {
      "post": {
        "summary": "AddEventAddOnPassType",
        "description": "Adds a pass type to an event's add-on and invalidates the relevant query. This function is used to associate a specific pass type with an event add-on, ensuring that the event's add-on data is updated accordingly. It is particularly useful in scenarios where event organizers need to manage and update pass types for their event add-ons.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAddOn"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventAddOnPassType",
        "description": "Endpoint to remove a pass type from a specific event add-on. This function allows the removal of a pass type associated with a particular event add-on, facilitating the management of event configurations by updating the event's add-on details.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAddOn"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/addOns/{addOnId}/tiers/{tierId}": {
      "post": {
        "summary": "AddEventAddOnTier",
        "description": "Adds a tier to an event add-on and updates the relevant queries. This function is used to manage event add-ons by allowing the addition of tiers, which can be configured to be allowed or disallowed. It ensures that the application state is consistent by invalidating and updating the necessary queries.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the add-on",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tier",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allowed": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAddOn"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventAddOnTier",
        "description": "Endpoint to remove a specific tier from an event add-on. This function allows the removal of a tier associated with an event add-on, provided the operation is permitted. It is used in scenarios where event add-on configurations need to be modified by removing tiers.",
        "parameters": [
          {
            "in": "query",
            "name": "allowed",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if the operation is allowed",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAddOn"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/addOns": {
      "post": {
        "summary": "CreateEventAddOn",
        "description": "Endpoint to create a new event add-on. This function allows the creation of additional features or services for a specific event by providing the event ID and the add-on details. It is designed to be used in applications where event customization is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventAddOnCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAddOn"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventAddOns",
        "description": "Fetches a list of event add-ons associated with a specific event. This function supports optional pagination and filtering to retrieve event add-ons efficiently. It is designed for applications that need to display or manage additional features or services linked to an event.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventAddOn"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/addOns/{addOnId}": {
      "delete": {
        "summary": "DeleteEventAddOn",
        "description": "Endpoint to delete an add-on from a specific event. This function allows the removal of an add-on associated with a given event by specifying the event and add-on IDs. It is useful in scenarios where event configurations need to be updated by removing unnecessary or outdated add-ons.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventAddOn",
        "description": "Endpoint to update an existing event add-on with new data. This function allows updating the details of a specific add-on associated with an event. It is designed to be used in applications where modifications to event add-ons are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventAddOnUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAddOn"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventAddOn",
        "description": "Fetches details of a specific event add-on by its unique identifiers. This function is used to retrieve detailed information about an add-on associated with a particular event. It is designed for applications that require access to event add-on data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAddOn"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/reservations/{reservationId}/passes/{passId}": {
      "post": {
        "summary": "AddEventReservationPass",
        "description": "Endpoint to add a reservation pass to a specific event. This function allows users to associate a pass with a reservation for an event, potentially updating the reservation details. It is designed to be used in applications where event management and reservation handling are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the reservation",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomTypeReservation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventReservationPass",
        "description": "Endpoint to remove a reservation pass for a specific event. This function allows the removal of a pass associated with a reservation for a given event. It is useful in scenarios where a pass needs to be invalidated or removed from an event reservation.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the reservation",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomTypeReservation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/reservations": {
      "post": {
        "summary": "CreateEventReservation",
        "description": "Endpoint to create a reservation for an event. This function allows users to create a reservation for a specific event by providing the event ID and reservation details. It is designed to be used in applications where event management and reservation functionalities are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRoomTypeReservationCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomTypeReservation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventReservations",
        "description": "Endpoint to manage and retrieve reservations for a specific event. This function provides the ability to fetch reservation details associated with a given event ID. It is designed to be used in applications that require access to event reservation data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventRoomTypeReservation"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/reservations/{reservationId}": {
      "delete": {
        "summary": "DeleteEventReservation",
        "description": "Endpoint to delete a reservation for a specific event. This function allows the removal of a reservation associated with a particular event, providing the ability to specify an optional account ID for more granular control. It is designed for use in applications where event management and reservation handling are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the reservation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventReservation",
        "description": "Endpoint to update an event reservation with new details. This function allows updating the reservation details for a specific event and reservation ID. It is designed to be used in applications where event reservation modifications are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the reservation",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRoomTypeReservationUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomTypeReservation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventReservation",
        "description": "Fetches and manages event reservation details for a specific event and reservation ID. This module provides functionality to retrieve reservation data and update query data for event reservations. It is designed to be used in applications where detailed information about event reservations is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the reservation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomTypeReservation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/passes/checkin/all": {
      "put": {
        "summary": "CheckinAllAttendeePasses",
        "description": "Endpoint to check in all passes for a specific attendee at an event. This function allows for the bulk check-in of all passes associated with a particular attendee at a given event. It is useful in scenarios where an attendee needs to be quickly checked in for all their passes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees": {
      "post": {
        "summary": "CreateEventAttendee",
        "description": "Endpoint to create a new event attendee. This function allows the creation of a new attendee for a specified event by providing the event ID and account ID. It is designed to be used in applications where managing event attendees is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "accountId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAttendee"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventAttendees",
        "description": "Fetches and manages a list of attendees for a specific event, with support for pagination and optional filtering by event pass status. This function is designed to be used in applications that require detailed attendee information for events, allowing for efficient data retrieval and management.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/EventPassStatus"
            },
            "description": "Optional status of the event pass",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventAttendee"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}": {
      "delete": {
        "summary": "DeleteEventAttendee",
        "description": "Endpoint to delete an attendee from a specific event. This function allows the removal of an attendee from an event by specifying the event and account IDs. It is designed to be used in applications where managing event attendees is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAttendee"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventAttendee",
        "description": "Endpoint to update the registration details of an event attendee. This function allows updating the registration information for a specific attendee of an event. It is designed to be used in applications where event management and attendee updates are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventAttendeeUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAttendee"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventAttendee",
        "description": "Fetches details for a specific event attendee by their account ID within a given event. This function is designed to manage and retrieve data about attendees of a particular event. It is useful in applications where detailed information about event attendees is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventAttendee"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/resendEmail": {
      "post": {
        "summary": "ResendRegistrationConfirmationEmail",
        "description": "Endpoint to resend the registration confirmation email for a specific event attendee. This function allows the system to trigger a resend of the confirmation email to an attendee of a specified event. It is useful in scenarios where the initial registration email was not received or needs to be sent again.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/benefits/{benefitId}": {
      "post": {
        "summary": "AddEventBenefit",
        "description": "Endpoint to add a benefit to a specific event. This function allows the addition of a benefit to an event by specifying the benefit and event IDs. It is designed to be used in applications where event management and benefit allocation are required.",
        "parameters": [
          {
            "in": "path",
            "name": "benefitId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the benefit",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Benefit"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventBenefit",
        "description": "Endpoint to remove a benefit from a specific event. This function allows the removal of a benefit associated with an event by specifying the event and benefit IDs. It is designed to be used in applications where event management and benefit association are required.",
        "parameters": [
          {
            "in": "path",
            "name": "benefitId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the benefit to be removed",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event from which the benefit is to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Benefit"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/bypass": {
      "post": {
        "summary": "CreateEventRegistrationBypass",
        "description": "Endpoint to create a registration bypass for a specific event. This function allows the creation of a registration bypass, which can be used to manage event registrations more flexibly. It is designed for applications that require dynamic control over event registration processes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRegistrationBypassCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationBypass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventRegistrationBypassList",
        "description": "Fetches a list of event registration bypass entries with support for pagination and filtering. This function is designed to retrieve bypass entries for a specific event, allowing for detailed management and review of registration bypasses. It supports pagination and filtering to efficiently handle large datasets.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationBypass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/bypass/{bypassId}": {
      "delete": {
        "summary": "DeleteEventRegistrationBypass",
        "description": "Endpoint to delete a specific event registration bypass. This function allows the removal of a bypass associated with an event registration, identified by the event and bypass IDs. It is intended for use in scenarios where bypasses need to be managed or revoked for event registrations.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "bypassId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the bypass",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventRegistrationBypass",
        "description": "Endpoint to update an event registration bypass. This function allows updating the details of a specific event registration bypass using the event ID and bypass ID. It is designed to be used in applications where modifications to event registration bypasses are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "bypassId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the bypass",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRegistrationBypassUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationBypass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventRegistrationBypass",
        "description": "Fetches details of a specific event registration bypass using the event and bypass IDs. This function is designed to retrieve detailed information about a particular bypass associated with an event. It is useful in scenarios where understanding the specifics of an event's registration bypass is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "bypassId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the bypass",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationBypass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/coHosts/{accountId}": {
      "post": {
        "summary": "AddEventCoHost",
        "description": "Endpoint to add a co-host to a specific event. This function allows the addition of an account as a co-host to an event by specifying the event ID and account ID. It is used in scenarios where event management requires assigning co-host roles to different accounts.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account to be added as co-host",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventCoHost",
        "description": "Endpoint to remove a co-host from an event. This function allows the removal of a specified account as a co-host from a given event. It is useful in scenarios where event management requires updating the list of co-hosts.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account to be removed as co-host",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/coupons": {
      "post": {
        "summary": "CreateEventCoupon",
        "description": "Endpoint to create a new event coupon. This function allows the creation of a coupon for a specific event by providing the event ID and coupon details. It is designed to be used in applications where event management and coupon distribution are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCouponCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Coupon"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventCoupons",
        "description": "Endpoint to retrieve and manage coupons associated with a specific event. This function provides the ability to fetch a list of coupons for a given event, supporting pagination and other query parameters for refined data retrieval. It is designed for use in applications that require detailed coupon information for events, facilitating operations such as listing and managing event-specific coupons.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Coupon"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/coupons/{couponId}": {
      "delete": {
        "summary": "DeleteEventCoupon",
        "description": "Endpoint to delete a coupon from a specific event and invalidate related queries. This function allows the removal of a coupon associated with a particular event, ensuring that any cached queries related to the event's coupons are invalidated. It is useful in scenarios where coupon data needs to be updated or removed from the event's context.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "couponId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the coupon",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventCoupon",
        "description": "Endpoint to update a coupon for a specific event. This function allows updating the details of a coupon associated with a particular event. It is designed to be used in applications where event management and coupon updates are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "couponId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the coupon",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCouponUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Coupon"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventCoupon",
        "description": "Fetches a specific coupon associated with an event by its ID. This function is designed to retrieve detailed information about a coupon linked to a particular event. It is useful in scenarios where event-specific coupon details are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "couponId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the coupon",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Coupon"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/emails/{type}": {
      "put": {
        "summary": "UpdateEventEmail",
        "description": "Endpoint to update an event email with specified details. This function allows updating the email associated with a specific event by providing the event ID, email type, and update inputs. It is designed for applications that need to modify event-related email content or settings.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/EventEmailType"
            },
            "description": "The type of the event email",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventEmailUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventEmail"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventEmail",
        "description": "Fetches event email data based on the specified type for a given event. This function is designed to retrieve detailed information about event emails, which can be used in applications that require insights into specific types of event communications.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/EventEmailType"
            },
            "description": "The type of the event email",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventEmail"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/faqs": {
      "post": {
        "summary": "CreateEventFaqSection",
        "description": "Endpoint to create a new FAQ section for a specific event. This function allows the creation of a FAQ section associated with a given event, enabling users to add frequently asked questions and their answers to the event's details. It is designed to be used in applications where event management and information dissemination are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventFaqSectionCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/FaqSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventFaqSections",
        "description": "Retrieves FAQ sections for a specific event. This function fetches a list of frequently asked questions associated with a given event, allowing users to access detailed information about the event's FAQs.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FaqSection"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/faqs/{sectionId}/questions": {
      "post": {
        "summary": "CreateEventFaqSectionQuestion",
        "description": "Endpoint to create a new question for a specific FAQ section in an event. This function allows users to add a question to an existing FAQ section within a specified event. It is designed to facilitate the management of FAQ sections by enabling the addition of new questions.",
        "parameters": [
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the FAQ section",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventFaqSectionQuestionCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Faq"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventFaqSectionQuestions",
        "description": "Endpoint to fetch questions from a specific section of an event's FAQ. This function retrieves a list of questions associated with a particular FAQ section within an event. It is useful for applications that need to display or manage FAQ content for event participants.",
        "parameters": [
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the FAQ section",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Faq"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/faqs/{sectionId}": {
      "delete": {
        "summary": "DeleteEventFaqSection",
        "description": "Endpoint to delete a specific FAQ section for an event and invalidate related queries. This function allows the removal of a FAQ section associated with a particular event, ensuring that any cached queries related to the FAQ sections are invalidated. It is useful in scenarios where FAQ sections need to be dynamically managed and kept up-to-date.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the FAQ section",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventFaqSection",
        "description": "Updates a specific FAQ section for an event. This function allows for the modification of an existing FAQ section associated with a particular event. It is designed to be used in scenarios where event organizers need to update the content or details of an FAQ section.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the FAQ section",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventFaqSectionUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/FaqSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventFaqSection",
        "description": "Fetches a specific FAQ section for a given event. This function is designed to retrieve detailed information about a particular FAQ section associated with an event. It is useful for applications that need to display or manage event-related FAQ content.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the FAQ section",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/FaqSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/faqs/{sectionId}/questions/{questionId}": {
      "delete": {
        "summary": "DeleteEventFaqSectionQuestion",
        "description": "Endpoint to delete a question from a specific FAQ section of an event. This function allows the removal of a question from an event's FAQ section by specifying the event ID, section ID, and question ID. It is useful for managing the content of FAQ sections within event management applications.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the FAQ section",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventFaqSectionQuestion",
        "description": "Endpoint to update a specific question in the FAQ section of an event. This function allows for the modification of a question within a specified FAQ section of an event. It is designed to be used in scenarios where event organizers need to update the content of FAQ questions.",
        "parameters": [
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the FAQ section",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventFaqSectionQuestionUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Faq"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventFaqSectionQuestion",
        "description": "Retrieves a specific FAQ question from a designated section within an event. This function is designed to fetch detailed information about a particular FAQ question, identified by its unique question ID, within a specified section of an event. It is useful for applications that need to display or process information about individual FAQ questions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Faq"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/faqs/{sectionId}/questions/reorder": {
      "put": {
        "summary": "ReorderEventFaqSectionQuestions",
        "description": "Endpoint to reorder questions in a specific FAQ section of an event. This function allows users to change the order of questions within a specified FAQ section for a given event. It is useful for organizing FAQ content to improve clarity and accessibility for event participants.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the FAQ section",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "questionIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Faq"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/on-site": {
      "post": {
        "summary": "UpdateEventCheckinCode",
        "description": "Endpoint to update the check-in code for a specific event. This function allows updating the check-in code for an event by providing the event ID. It is used to manage event check-in processes and ensure the correct code is set for on-site operations.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventOnSite"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventOnSite",
        "description": "Fetches on-site event data for a specific event by its ID. This function is designed to retrieve detailed on-site information about an event, which can be used in applications that require real-time event data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "EventOnSite",
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/zpl-template": {
      "put": {
        "summary": "UpdateEventZplTemplate",
        "description": "Endpoint to update the ZPL template for a specific event. This function allows updating the ZPL template associated with a given event ID. It is designed to be used in applications where event-specific ZPL templates need to be managed.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "zplTemplate": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventOnSite"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/zpl-template/fields/{fieldId}": {
      "put": {
        "summary": "UpdateEventZplTemplateBadgeField",
        "description": "Endpoint to update the ZPL template badge field for a specific event. This function allows updating the details of a badge field within a ZPL template for a given event. It is designed to be used in scenarios where modifications to badge fields are required for event management.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "fieldId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the field",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventBadgeFieldUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventOnSiteBadgeField"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventZplTemplateBadgeField",
        "description": "Fetches a specific ZPL template badge field associated with an event from the admin API. This function is used to retrieve detailed information about a particular badge field within a ZPL template for a given event. It is designed for applications that require access to specific badge field data for event management purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "fieldId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the badge field",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventOnSiteBadgeField"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/pages/{pageId}/images/{imageId}": {
      "post": {
        "summary": "AddEventPageImage",
        "description": "Endpoint to add an image to a specific event page. This function allows users to associate an image with a particular event page by specifying the event, page, and image identifiers. It is designed to be used in applications where managing event page content is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the page",
            "required": true
          },
          {
            "in": "path",
            "name": "imageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the image",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPage"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventPageImage",
        "description": "Endpoint to remove an image from a specific event page. This function allows the removal of an image associated with a particular event page, identified by the event ID, page ID, and image ID. It ensures that the image is deleted from the event page and updates the query data accordingly.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the page",
            "required": true
          },
          {
            "in": "path",
            "name": "imageId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the image",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPage"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/pages": {
      "post": {
        "summary": "CreateEventPage",
        "description": "Endpoint to create a new event page within a specified event. This function allows users to create a new page for an event by providing the necessary inputs. It is designed to be used in applications where event management and page creation are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPageCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPage"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPages",
        "description": "Fetches event pages data from the admin API. This function is designed to retrieve paginated data for event pages associated with a specific event ID. It is useful for applications that need to display or manage multiple pages of event-related content.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPage"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/pages/{pageId}": {
      "delete": {
        "summary": "DeleteEventPage",
        "description": "Endpoint to delete a specific event page within an event management system. This function allows administrators to remove a page associated with a particular event by providing the event and page identifiers. It ensures that the relevant cache is invalidated and queries are removed to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the page",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventPage",
        "description": "Endpoint to update an event page with new details. This function allows updating the details of a specific event page by providing the event ID, page ID, and the new page details. It is designed to be used in applications where event page information needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the page",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPageUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPage"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPage",
        "description": "Retrieves a specific event page by its ID using the admin API. This function is designed to fetch detailed information about an event page, which can be used in applications that require access to event page data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the page",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPage"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/priceSchedules": {
      "post": {
        "summary": "CreateEventPassTypePriceSchedule",
        "description": "Endpoint to create a price schedule for a specific event pass type. This function allows the creation of a detailed price schedule for a given event pass type, enabling the management of pricing structures within an event's pass types. It is designed to be used in applications that require dynamic pricing schedules for event passes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassTypePriceScheduleCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPassTypePriceSchedules",
        "description": "Fetches the price schedules for a specific event pass type, allowing for pagination and filtering. This function is designed to retrieve detailed pricing information for event pass types, which can be useful for event organizers and participants. It supports infinite scrolling and can be integrated into applications that require dynamic data loading.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPassTypePriceSchedule"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/priceSchedules/{scheduleId}": {
      "delete": {
        "summary": "DeleteEventPassTypePriceSchedule",
        "description": "Endpoint to delete a price schedule for a specific event and pass type. This function allows the removal of a price schedule associated with a given event and pass type. It is designed to be used in scenarios where an event's pricing structure needs to be updated or corrected.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "scheduleId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the schedule",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassTypePriceSchedule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventPassTypePriceSchedule",
        "description": "Endpoint to update the price schedule for a specific event pass type. This function allows updating the details of a price schedule associated with a particular event pass type. It is designed to be used in applications where event management and pricing updates are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "scheduleId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the schedule",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassTypePriceScheduleUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassTypePriceSchedule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPassTypePriceSchedule",
        "description": "Fetches price schedule details for a specific event pass type. This function is designed to retrieve detailed information about the price schedule associated with a particular event pass type. It is useful in scenarios where precise pricing information is required for event management or ticketing systems.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "scheduleId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the schedule",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassTypePriceSchedule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/refundSchedules": {
      "post": {
        "summary": "CreateEventPassTypeRefundSchedule",
        "description": "Endpoint to create a refund schedule for a specific event pass type. This function allows the creation of a refund schedule associated with a particular event pass type. It is designed to be used in scenarios where event organizers need to define refund policies for their event pass types.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassTypeRefundScheduleCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPassTypeRefundSchedules",
        "description": "Fetches refund schedules for a specific event pass type with support for pagination and filtering. This function is designed to retrieve detailed refund schedule information for a given event pass type, allowing for efficient data handling and display in applications that require such data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPassTypeRefundSchedule"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/refundSchedules/{scheduleId}": {
      "delete": {
        "summary": "DeleteEventPassTypeRefundSchedule",
        "description": "Endpoint to delete a refund schedule for a specific event and pass type. This function allows the removal of a refund schedule associated with a particular event and pass type. It is designed to be used in scenarios where refund schedules need to be managed or updated.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "scheduleId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the refund schedule",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventPassTypeRefundSchedule",
        "description": "Endpoint to update the refund schedule for a specific event pass type. This function allows updating the refund schedule associated with a particular event pass type by providing the necessary schedule update inputs. It is designed to be used in applications where managing event pass type refund schedules is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "scheduleId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the schedule",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassTypeRefundScheduleUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassTypePriceSchedule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPassTypeRefundSchedule",
        "description": "Fetches refund schedule details for a specific event pass type. This function is designed to retrieve detailed information about the refund schedule associated with a particular event pass type. It is useful for applications that need to display or process refund schedule data for event management.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "scheduleId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the refund schedule",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassTypeRefundSchedule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/addOns/{addOnId}": {
      "post": {
        "summary": "AddEventPassTypeAddOn",
        "description": "Adds an add-on to a specific event pass type and invalidates the relevant queries. This function is used to associate an additional feature or service (add-on) with a particular event pass type. It ensures that the relevant queries are invalidated to maintain data consistency across the application.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventPassTypeAddOn",
        "description": "Endpoint to remove an add-on from a specific event pass type. This function allows the removal of an add-on associated with a particular event pass type by specifying the event ID, pass type ID, and add-on ID. It is used in scenarios where an add-on needs to be detached from an event pass type, ensuring the event pass type is updated accordingly.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/tiers/{tierId}": {
      "post": {
        "summary": "AddEventPassTypeTier",
        "description": "Endpoint to add a new tier to an event pass type. This function allows the addition of a specific tier to an event pass type, specifying whether the tier is allowed. It is used in scenarios where event organizers need to manage tiers within their event pass types.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allowed": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventPassTypeTier",
        "description": "Endpoint to remove a tier from a specified event pass type. This function allows the removal of a specific tier from an event pass type, given the event ID, pass type ID, and tier ID. It is used in scenarios where an event pass type needs to be modified by removing one of its tiers.",
        "parameters": [
          {
            "in": "query",
            "name": "allowed",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if the operation is allowed",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the pass type",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tier to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes": {
      "post": {
        "summary": "CreateEventPassType",
        "description": "Endpoint to create a new event pass type for a specified event. This function allows the creation of a new pass type associated with an event, enabling the management of different pass types within the event's context. It is designed to be used in applications where event pass types need to be dynamically created.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassTypeCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPassTypes",
        "description": "Endpoint to retrieve and manage event pass types for a specific event. This function allows users to fetch a list of pass types associated with a given event ID. It is designed to be used in applications where event pass type information is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPassType"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}": {
      "delete": {
        "summary": "DeleteEventPassType",
        "description": "Endpoint to delete a specific event pass type. This function allows the removal of a pass type associated with a particular event by specifying the event and pass type IDs. It is useful in scenarios where event organizers need to manage and update the types of passes available for their events.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventPassType",
        "description": "Endpoint to update an event pass type with new data. This function allows updating the details of a specific event pass type by providing the event ID and pass type ID. It is used to modify existing pass types within an event, ensuring the pass type data is current and accurate.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassTypeUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPassType",
        "description": "Fetches data for a specific event pass type by event and pass type IDs. This function is used to retrieve detailed information about a particular pass type associated with an event. It is designed for applications that require access to event pass type details.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the pass type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPassType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}/addOns/{addOnId}": {
      "post": {
        "summary": "AddEventPassAddOn",
        "description": "Adds an add-on to a specific event pass and invalidates the relevant queries to ensure data consistency. This function is used to associate an additional feature or service (add-on) with an event pass, allowing for enhanced functionality or offerings for event attendees. It is designed to be used in applications where event management and customization are required.",
        "parameters": [
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventPassAddOn",
        "description": "Endpoint to remove an add-on from an event pass. This function allows the removal of a specific add-on associated with an event pass, identified by the add-on ID, event ID, and pass ID. It is used in scenarios where an event pass needs to be updated by removing an existing add-on.",
        "parameters": [
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on to be removed",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}/cancel": {
      "put": {
        "summary": "CancelEventPass",
        "description": "Endpoint to cancel an event pass. This function allows the cancellation of a specific event pass by its ID, with options to send a notification email, issue a refund, specify an admin refund amount, and remove a reservation. It is designed for use in event management systems where administrators need to manage event passes efficiently.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "sendEmail": {
                    "type": "boolean"
                  },
                  "issueRefund": {
                    "type": "boolean"
                  },
                  "adminRefundAmt": {
                    "type": "number"
                  },
                  "removeReservation": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/passes": {
      "post": {
        "summary": "CreateEventPass",
        "description": "Endpoint to create a new event pass for a specified attendee. This function allows the creation of an event pass for a given attendee by specifying the event and account IDs. It is used in scenarios where event organizers need to issue passes to attendees.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPassCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventAttendeePasses",
        "description": "Endpoint to manage and retrieve event attendee passes for a specific event and account. This function allows users to fetch and manage the passes associated with an event attendee, providing options to filter by status. It is designed for applications that require detailed management of event passes for attendees.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/EventPassStatus"
            },
            "description": "Optional status of the event pass",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}": {
      "delete": {
        "summary": "DeleteEventPass",
        "description": "Endpoint to delete a specific event pass and invalidate related queries. This function allows the removal of an event pass by its ID and ensures that all related queries are invalidated to maintain data consistency. It is designed for use in applications where event management and pass handling are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventPass",
        "description": "Endpoint to update an event pass with new details. This function allows updating the details of a specific event pass by providing the event ID, pass ID, and the new pass details. It is used in scenarios where event pass information needs to be modified, ensuring that the latest data is reflected in the system.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPassUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventPass",
        "description": "Fetches details for a specific event pass by its ID within a given event. This function is designed to manage and retrieve information about event passes, allowing users to access detailed data about a specific pass associated with an event. It is useful in applications where event management and pass details are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventPass"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/passes/{passId}/transfers": {
      "post": {
        "summary": "TransferEventPass",
        "description": "Endpoint to transfer an event pass from one account to another. This function facilitates the transfer of a specific event pass to a designated receiver account. It is used in scenarios where event passes need to be reassigned or gifted to another user.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "accountId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/purchases/{passId}/responses/{questionId}": {
      "put": {
        "summary": "UpdateEventPassResponse",
        "description": "Endpoint to update the response for a specific event pass. This function allows updating the response to a registration question for a given event pass. It is used to modify the response data associated with a specific question in an event's pass.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationQuestionResponse"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionResponse"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/passes/{passId}/responses": {
      "put": {
        "summary": "UpdateEventPassResponses",
        "description": "Updates the responses for a specific event pass and invalidates relevant queries. This function is used to modify the responses associated with a particular event pass, ensuring that any cached queries related to the event pass responses and question sections are invalidated to reflect the updated data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "questions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Question"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/choices/{choiceId}/subQuestions/{subQuestionId}": {
      "post": {
        "summary": "AddEventQuestionChoiceSubQuestion",
        "description": "Endpoint to add a sub-question to a specific choice of a question in an event. This function allows the addition of a sub-question to a particular choice within a question for a given event. It is useful in scenarios where dynamic question structures are needed, such as surveys or registration forms.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "choiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the choice",
            "required": true
          },
          {
            "in": "path",
            "name": "subQuestionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the sub-question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionChoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventQuestionChoiceSubQuestion",
        "description": "Endpoint to remove a sub-question from a specific choice within an event question. This function allows the removal of a sub-question associated with a choice in an event's question, facilitating the management of event question structures by dynamically updating the choices.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "choiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the choice",
            "required": true
          },
          {
            "in": "path",
            "name": "subQuestionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the sub-question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventQuestionChoiceSubQuestion",
        "description": "Endpoint to update a sub-question for a specific choice in an event question. This function allows updating the sort order of a sub-question associated with a choice in an event question. It is designed to be used in scenarios where the order of sub-questions needs to be modified for better organization or presentation.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "choiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the choice",
            "required": true
          },
          {
            "in": "path",
            "name": "subQuestionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the sub-question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "sortOrder": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionChoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions": {
      "post": {
        "summary": "CreateEventQuestion",
        "description": "Endpoint to create a new event question. This function allows the creation of a new question for a specific event, utilizing the provided event ID and question details. It is designed to be used in applications where event management and question registration are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventQuestionCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestion"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventQuestions",
        "description": "Retrieves a list of questions associated with a specific event. This function is designed to fetch event-related questions, which can be used in applications that require detailed information about event questions. It supports infinite scrolling and pagination through the use of connected infinite queries.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestion"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/choices": {
      "post": {
        "summary": "CreateEventQuestionChoice",
        "description": "Endpoint to create a new event question choice. This function allows the creation of a choice for a specific question within an event. It is designed to be used in applications where event management and customization are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventQuestionChoiceCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionChoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventQuestionChoices",
        "description": "Provides functionality to retrieve and manage choices for a specific event question. This module includes methods to fetch event question choices, set query data, and utilize infinite queries. It is designed for applications that require dynamic interaction with event question choices data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestionChoice"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/values": {
      "post": {
        "summary": "CreateEventQuestionSearchValues",
        "description": "Endpoint to create search values for a specific event question. This function allows the creation of search values associated with a particular question in an event. It is designed to be used in applications where dynamic search values need to be added to event questions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionChoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "DeleteEventQuestionSearchValues",
        "description": "Endpoint to delete search values for a specific question in an event. This function allows the removal of search values associated with a particular question within a specified event. It is useful in scenarios where search values need to be cleared or reset for event questions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventQuestionSearchValues",
        "description": "Retrieves search values for specific event questions. This endpoint allows fetching search values associated with a particular question within an event. It is useful for applications that need to display or process search values related to event questions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestionSearchValue"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}": {
      "delete": {
        "summary": "DeleteEventQuestion",
        "description": "Endpoint to delete a specific question from an event. This function allows the removal of a question from an event, with an optional section parameter. It is designed to be used in applications where event management and question handling are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventQuestion",
        "description": "Endpoint to update an existing event question. This function allows updating the details of a specific question associated with an event. It is designed to be used in applications where event questions need to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventQuestionUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestion"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventQuestion",
        "description": "Fetches a specific question associated with an event by its unique identifiers. This function is designed to retrieve detailed information about a particular question within an event. It is useful in scenarios where precise data about event questions is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestion"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/choices/{choiceId}": {
      "delete": {
        "summary": "DeleteEventQuestionChoice",
        "description": "Endpoint to delete a specific choice from a question in an event. This function allows the removal of a choice associated with a question within a specified event. It is useful in scenarios where event configurations need to be updated by removing certain choices.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "choiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the choice",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventQuestionChoice",
        "description": "Endpoint to update a specific choice for a question in an event. This function allows updating the details of a choice associated with a question in a specific event. It is designed to be used in applications where event management and question customization are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "choiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the choice",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventQuestionChoiceUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionChoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventQuestionChoice",
        "description": "Fetches a specific choice for a question within an event. This function is used to retrieve detailed information about a particular choice associated with a question in an event. It is designed for applications that need to access specific event question choice data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "choiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the choice",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionChoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/values/{searchValueId}": {
      "delete": {
        "summary": "DeleteEventQuestionSearchValue",
        "description": "Endpoint to delete a specific search value for a question in an event. This function allows the removal of a search value associated with a particular question within an event. It is useful in scenarios where search values need to be managed or cleaned up.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "searchValueId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the search value",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventQuestionSearchValue",
        "description": "Updates the search value for a specific question in an event. This function allows updating the search value associated with a particular question within an event. It is useful for scenarios where the search criteria for event questions need to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "searchValueId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the search value",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventQuestionSearchValueUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionSearchValue"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventQuestionSearchValue",
        "description": "Retrieves a specific search value associated with an event question. This function is designed to fetch detailed information about a particular search value linked to a question within an event. It is useful in scenarios where precise data retrieval for event-related questions is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "searchValueId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the search value",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionSearchValue"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/choices/{choiceId}/subQuestions/reorder": {
      "put": {
        "summary": "ReorderEventQuestionChoiceSubQuestions",
        "description": "Endpoint to reorder sub-questions of a specific choice in an event question. This function allows the reordering of sub-questions associated with a particular choice within an event question. It is designed to be used in scenarios where the order of sub-questions needs to be updated for a specific choice.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "choiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the choice",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "questionIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestionChoiceSubQuestion"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/choices/reorder": {
      "put": {
        "summary": "ReorderEventQuestionChoices",
        "description": "Endpoint to reorder the choices of a specific question in an event. This function allows the reordering of choices associated with a particular question within an event. It is designed to be used in scenarios where the order of question choices needs to be updated.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "choicesIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestionChoice"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/roomTypes/{roomTypeId}/tiers/{tierId}": {
      "post": {
        "summary": "AddEventRoomTypeTier",
        "description": "Endpoint to add a new tier to a room type for a specific event. This function allows the addition of a tier to a specified room type within an event, indicating whether the tier is allowed. It is used in scenarios where event room types need to be dynamically updated with new tiers.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the room type",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allowed": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventRoomTypeTier",
        "description": "Endpoint to remove a tier from a specified room type for an event. This function allows the removal of a specific tier from a room type within an event, provided the operation is allowed. It is used in scenarios where event room configurations need to be adjusted by removing certain tiers.",
        "parameters": [
          {
            "in": "query",
            "name": "allowed",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if the operation is allowed",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the room type",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/roomTypes": {
      "post": {
        "summary": "CreateEventRoomType",
        "description": "Endpoint to create a new event room type within a specified event. This function allows the creation of a new room type for an event by providing the necessary inputs. It is designed to be used in applications where event management and customization are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRoomTypeCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventRoomTypes",
        "description": "Fetches the types of rooms available for a specific event. This function is used to retrieve a list of room types associated with a given event, which can be useful for applications that need to display or manage event room configurations.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventRoomType"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/roomTypes/{roomTypeId}": {
      "delete": {
        "summary": "DeleteEventRoomType",
        "description": "Endpoint to delete a room type for a specific event and invalidate related queries. This function allows the removal of a room type associated with a given event, ensuring that any cached queries related to the event's room types are invalidated to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the room type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventRoomType",
        "description": "Endpoint to update the room type for a specific event. This function allows updating the details of a room type associated with a particular event. It is designed to be used in scenarios where modifications to event room types are necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the room type",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRoomTypeUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventRoomType",
        "description": "Retrieves data for a specific event room type by its ID within a given event. This function is used to fetch detailed information about a particular room type associated with an event. It is designed for applications that require access to event room type details.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the room type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/roomTypes/{roomTypeId}/addOns/{addOnId}": {
      "put": {
        "summary": "UpdateEventRoomTypeAddOnDetails",
        "description": "Endpoint to update the details of a specific add-on for a room type in an event. This function allows updating the details of an add-on associated with a room type within a specific event. It is designed to be used in scenarios where modifications to add-on details are required for event room types.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the room type",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRoomTypeAddOnDetailsUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/roomTypes/{roomTypeId}/passTypes/{passTypeId}": {
      "put": {
        "summary": "UpdateEventRoomTypePassTypeDetails",
        "description": "Endpoint to update the details of a specific pass type for a room type in an event. This function allows updating the details of a pass type associated with a room type within a specific event. It is designed to be used in applications where event management and room type configurations are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the room type",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventRoomTypePassTypeDetailsUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventRoomType"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/addOns/{addOnId}": {
      "post": {
        "summary": "AddEventSectionAddOn",
        "description": "Adds an add-on to a specific section of an event. This function is used to associate an additional feature or service (add-on) with a particular section of an event. It is useful in scenarios where events are modular and require dynamic configuration of sections with various add-ons.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSectionAddOn",
        "description": "Endpoint to remove an add-on from a specific event section. This function allows the removal of a specified add-on from a given section within an event. It is useful for managing event configurations by dynamically updating the available add-ons for event sections.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/passTypes/{passTypeId}": {
      "post": {
        "summary": "AddEventSectionPassType",
        "description": "Endpoint to add a pass type to a specific event section. This function allows the addition of a pass type to a designated section within an event. It is used to manage and update the pass types associated with event sections.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSectionPassType",
        "description": "Endpoint to remove a pass type from a specific section of an event. This function allows the removal of a designated pass type from a specified section within an event. It is intended for use in scenarios where event management requires dynamic updates to pass type allocations.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/questions/{questionId}": {
      "post": {
        "summary": "AddEventSectionQuestion",
        "description": "Endpoint to add a question to a specific section of an event. This function allows users to associate a question with a particular section within an event, facilitating the organization and management of event-related queries.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSectionQuestion",
        "description": "Endpoint to remove a question from a specific section of an event. This function allows the removal of a question from a designated section within an event, ensuring that the event's structure is updated accordingly. It is useful in scenarios where event organizers need to dynamically manage the content of their event sections.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventSectionQuestion",
        "description": "Endpoint to update a question within a specific section of an event. This function allows for modifying the sort order of a question in a designated event section. It is intended for use in applications that manage event configurations and require dynamic updates to question arrangements.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "sortOrder": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/tiers/{tierId}": {
      "post": {
        "summary": "AddEventSectionTier",
        "description": "Endpoint to add a tier to a specific event section. This function allows the addition of a tier to an event section by specifying the event, section, and tier IDs. It is used in scenarios where event sections need to be dynamically updated with new tiers.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allowed": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSectionTier",
        "description": "Endpoint to remove a tier from a specific event section. This function allows the removal of a tier from an event section by specifying the event, section, and tier IDs. It is used in scenarios where managing event sections and their tiers is necessary.",
        "parameters": [
          {
            "in": "query",
            "name": "allowed",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if the operation is allowed",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections": {
      "post": {
        "summary": "CreateEventSection",
        "description": "Creates a new section for a specific event and updates the query client with the new data. This function is used to add a new section to an event, allowing for dynamic updates and management of event sections. It ensures that the query client is updated with the latest data, maintaining consistency across the application.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSectionCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSections",
        "description": "Endpoint to fetch sections of a specific event. This function retrieves data about various sections within an event, allowing users to access detailed information about each section. It is designed for applications that require comprehensive event section data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationSection"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}": {
      "delete": {
        "summary": "DeleteEventSection",
        "description": "Endpoint to delete a specific section from an event. This function allows the removal of a section within a specified event by providing the event and section IDs. It is designed to be used in applications where event management and section organization are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventSection",
        "description": "Updates a specific section of an event with new data. This function allows for the modification of event sections by providing new data inputs. It is used in scenarios where event details need to be updated or modified.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSectionUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSection",
        "description": "Fetches details for a specific event section by its ID within a given event. This function is designed to retrieve detailed information about a particular section of an event, which can be used in applications that require insights into event structures.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the section",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationSection"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/questions/reorder": {
      "put": {
        "summary": "ReorderEventSectionQuestions",
        "description": "Reorders questions within a specific section of an event. This function allows for the rearrangement of questions in a designated section of an event, ensuring that the questions appear in the desired order. It is useful for event organizers who need to customize the sequence of questions for participants.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "questionIds": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationSectionQuestion"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessionLocations/{locationId}/sessions/{sessionId}": {
      "post": {
        "summary": "AddEventSessionLocationSession",
        "description": "Adds a location to a specific event session and updates the query client with the new data. This function is used to associate a location with a session within an event, ensuring that the session's location data is current and accurate. It is particularly useful in scenarios where event sessions are dynamically managed and require real-time updates.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "locationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the location",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSessionLocation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSessionLocationSession",
        "description": "Endpoint to remove a session location for a specific event. This function allows the removal of a session location from an event by specifying the event ID, location ID, and session ID. It is used in scenarios where a session location needs to be disassociated from an event.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "locationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the location",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSessionLocation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessionLocations": {
      "post": {
        "summary": "CreateEventSessionLocation",
        "description": "Endpoint to create a new event session location. This function allows the creation of a new location for a specific event session. It is designed to be used in applications where event management and location tracking are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSessionLocationCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSessionLocation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSessionLocations",
        "description": "Retrieves a list of session locations for a specified event. This function is designed to fetch session location data associated with a particular event, providing necessary details for applications that require event session information.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSessionLocation"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessionLocations/{locationId}": {
      "delete": {
        "summary": "DeleteEventSessionLocation",
        "description": "Endpoint to delete a specific event session location. This function allows the removal of a session location associated with a particular event. It is designed to be used in applications where managing event session locations is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "locationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the location",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventSessionLocation",
        "description": "Endpoint to update the location of a specific event session. This function allows updating the details of a session location within an event by providing the event ID, location ID, and the update inputs. It is designed to be used in applications where event session locations need to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "locationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the location",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSessionLocationUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSessionLocation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSessionLocation",
        "description": "Fetches detailed information about a specific event session location. This function is designed to retrieve data for a particular location within an event session, providing essential details required for applications that manage or display event session locations.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "locationId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the location",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSessionLocation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/questions": {
      "post": {
        "summary": "CreateEventSessionQuestion",
        "description": "Endpoint to create a new question for a specific event session. This function allows the creation of a question within a specified event session, enabling users to add interactive elements to their event sessions. It is designed to be used in applications where event session management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSessionQuestionCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSessionQuestion"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSessionQuestions",
        "description": "Endpoint to retrieve and manage questions for a specific event session. This function allows users to fetch a list of questions associated with a particular event session. It is designed to be used in applications where detailed information about session questions is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSessionQuestion"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/questions/{questionId}": {
      "delete": {
        "summary": "DeleteEventSessionQuestion",
        "description": "Endpoint to delete a question from a specific event session. This function allows the removal of a question from an event session by specifying the event, session, and question IDs. It is used in scenarios where questions need to be managed or moderated within event sessions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventSessionQuestion",
        "description": "Endpoint to update a specific question in an event session. This function allows updating the details of a question within a specific event session. It is designed to be used in applications where event session questions need to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSessionQuestionUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSessionQuestion"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSessionQuestion",
        "description": "Fetches a specific question from an event session using the provided event, session, and question IDs. This function is designed to retrieve detailed information about a particular question within an event session. It is useful for applications that need to display or process data related to event session questions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event (path)",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session (path)",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question (path)",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSessionQuestion"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/questions/reorder": {
      "put": {
        "summary": "ReorderEventSessionQuestions",
        "description": "Endpoint to reorder questions within a specific event session. This function allows the reordering of questions in a given session of an event by specifying the new order of question IDs. It is useful for managing the sequence of questions in event sessions, ensuring they are presented in the desired order.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "questionIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSessionQuestion"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/accounts/{accountId}": {
      "post": {
        "summary": "AddEventSessionAccount",
        "description": "Endpoint to add an account to a specific event session. This function allows the addition of an account to a designated session within an event, facilitating the management of session participants. It is intended for use in applications that require dynamic session management capabilities.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSessionAccount",
        "description": "Endpoint to remove an account from a specific event session. This function allows the removal of an account from a designated event session by specifying the event ID, session ID, and account ID. It is used in scenarios where an account needs to be disassociated from a particular session within an event.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/speakers/{speakerId}": {
      "post": {
        "summary": "AddEventSessionSpeaker",
        "description": "Endpoint to add a speaker to a specific event session. This function allows the addition of a speaker to a designated session within an event. It is designed to be used in applications where managing event sessions and their speakers is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "speakerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the speaker",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSessionSpeaker",
        "description": "Endpoint to remove a speaker from a specific event session. This function allows the removal of a speaker from a designated session within an event, ensuring that the session's speaker list is updated accordingly. It is intended for use in administrative contexts where event session management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "speakerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the speaker",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/sponsors/{sponsorId}": {
      "post": {
        "summary": "AddEventSessionSponsor",
        "description": "Adds a sponsor to a specific event session and updates the query client. This function is used to associate a sponsor with a particular session within an event, ensuring that the query client is updated to reflect this change. It is useful in scenarios where event sessions need to be dynamically updated with sponsor information.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "sponsorId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the sponsor",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSessionSponsor",
        "description": "Endpoint to remove a sponsor from a specific event session. This function allows the removal of a sponsor from an event session by specifying the event, session, and sponsor IDs. It is designed to be used in applications where managing event session sponsors is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "sponsorId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the sponsor",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/tracks/{trackId}": {
      "post": {
        "summary": "AddEventSessionTrack",
        "description": "Endpoint to add a track to a specific event session. This function allows users to associate a track with a particular session within an event. It is useful for applications that manage event sessions and their respective tracks.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSessionTrack",
        "description": "Endpoint to remove a track from a specific event session. This function allows the removal of a track from an event session by specifying the event, session, and track IDs. It is used in scenarios where tracks need to be dynamically managed within event sessions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions": {
      "post": {
        "summary": "CreateEventSession",
        "description": "Endpoint to create a new event session. This function allows the creation of a new session for a specified event by providing the event ID and session details. It is designed to be used in applications where event management and session scheduling are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSessionCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSessions",
        "description": "Endpoint to retrieve a list of sessions for a specific event. This function fetches event sessions using the event ID, allowing users to access detailed session information. It is designed for applications that require comprehensive data on event sessions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSession"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}": {
      "delete": {
        "summary": "DeleteEventSession",
        "description": "Endpoint to delete a specific event session. This function allows the removal of a session from an event by specifying the event and session IDs. It is designed to be used in applications where event management and session control are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventSession",
        "description": "Endpoint to update an event session with new data. This function allows updating the details of a specific session within an event by providing the event ID, session ID, and the updated session data. It is used in scenarios where modifications to session details are required, such as changing the session's schedule or speakers.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSessionUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSession",
        "description": "Fetches detailed information about a specific event session using the event and session IDs. This function is designed to retrieve data for a particular session within an event, providing essential details required for applications that manage or display event sessions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/speakers/{speakerId}/sessions/{sessionId}": {
      "post": {
        "summary": "AddEventSpeakerSession",
        "description": "Endpoint to add a session for a specific event speaker. This function allows the addition of a session to an event speaker's schedule by specifying the event, speaker, and session IDs. It is designed to be used in applications where managing event speaker sessions is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "speakerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the speaker",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSpeaker"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSpeakerSession",
        "description": "Endpoint to remove a session for a specific speaker at an event. This function allows the removal of a session associated with a particular speaker at a given event. It is designed to be used in scenarios where session management for event speakers is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "speakerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the speaker",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSpeaker"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/speakers": {
      "post": {
        "summary": "CreateEventSpeaker",
        "description": "Endpoint to create a new event speaker within a specified event. This function allows the creation of a new speaker for an event by providing the event ID and speaker details. It is designed to be used in applications where event management and speaker assignments are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSpeakerCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSpeaker"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSpeakers",
        "description": "Fetches a list of speakers for a specific event using the event ID. This function is designed to retrieve detailed information about speakers associated with a particular event. It is useful for applications that need to display or process event speaker data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSpeaker"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/speakers/{speakerId}": {
      "delete": {
        "summary": "DeleteEventSpeaker",
        "description": "Endpoint to delete a speaker from a specific event. This function allows the removal of a speaker from an event by specifying the event and speaker IDs. It is designed to be used in applications where event management and speaker coordination are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "speakerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the speaker",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventSpeaker",
        "description": "Endpoint to update the details of a specific event speaker. This function allows updating the information of an event speaker by providing the event ID, speaker ID, and the updated speaker details. It is designed to be used in applications where event management and speaker details modification are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "speakerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the speaker",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSpeakerUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSpeaker"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventSpeaker",
        "description": "Fetches details of a specific event speaker by their ID within a given event. This function is designed to retrieve comprehensive information about a speaker associated with a particular event. It is useful in scenarios where detailed speaker data is required for event management or display purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "speakerId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the speaker",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventSpeaker"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sponsors/accounts/{accountId}": {
      "post": {
        "summary": "AddEventSponsorAccount",
        "description": "Adds a sponsor account to a specific event and updates the query client if successful. This function is used to associate a sponsor's account with an event, allowing for the management of event sponsorships. It ensures that the query client is updated to reflect the changes if the operation is successful.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Event"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventSponsorAccount",
        "description": "Endpoint to remove a sponsor account from a specific event. This function allows the removal of a sponsor's account from an event by specifying the event and account IDs. It is useful for managing event sponsorships and ensuring that only relevant sponsors are associated with an event.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the sponsor account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Event"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/tracks/{trackId}/sessions/{sessionId}": {
      "post": {
        "summary": "AddEventTrackSession",
        "description": "Endpoint to add a session to a specific event track. This function allows users to associate a session with a particular track within an event. It is designed to be used in applications where event management and session tracking are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventTrack"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventTrackSession",
        "description": "Endpoint to remove a session from a specific event track. This function allows the removal of a session from an event track by specifying the event, track, and session IDs. It is used in scenarios where sessions need to be dynamically managed within event tracks.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventTrack"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/tracks/{trackId}/sponsors/{sponsorId}": {
      "post": {
        "summary": "AddEventTrackSponsor",
        "description": "Endpoint to add a sponsor to a specific event track. This function allows the addition of a sponsor to a designated track within an event, facilitating the management of event sponsorships. It is designed for use in applications that require dynamic updates to event track sponsorships.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          },
          {
            "in": "path",
            "name": "sponsorId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the sponsor",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventTrack"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveEventTrackSponsor",
        "description": "Endpoint to remove a sponsor from a specific event track. This function allows the removal of a sponsor from an event track by specifying the event, track, and sponsor IDs. It is designed to be used in applications where managing event sponsorships is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          },
          {
            "in": "path",
            "name": "sponsorId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the sponsor",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventTrack"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/tracks": {
      "post": {
        "summary": "CreateEventTrack",
        "description": "Endpoint to create a new event track within a specified event. This function allows users to add a new track to an event by providing the event ID and the necessary track creation inputs. It is designed to be used in applications where event management and track creation are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTrackCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventTrack"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventTracks",
        "description": "Retrieves a list of tracks associated with a specific event. This function fetches event track data, which can be used to display or manage tracks within an event. It is designed for applications that require detailed track information for events.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventTrack"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/tracks/{trackId}": {
      "delete": {
        "summary": "DeleteEventTrack",
        "description": "Endpoint to delete a specific event track within an event. This function allows for the removal of a track from an event by specifying the event and track IDs. It is designed to be used in applications where event management and track deletion are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEventTrack",
        "description": "Endpoint to update an existing event track. This function allows users to modify the details of a specific track within an event by providing the event ID, track ID, and the updated track inputs. It is designed to be used in applications where event track management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTrackUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventTrack"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEventTrack",
        "description": "Fetches details for a specific event track by event and track IDs. This function is used to retrieve detailed information about a particular track within an event. It is designed for applications that require access to specific event track data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the track",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EventTrack"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/approve": {
      "post": {
        "summary": "ApproveEvent",
        "description": "Endpoint to approve an event within the system. This function allows administrators to approve events by providing the event ID. It updates the event status and refreshes relevant queries to ensure data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event to be approved",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Event"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/clone": {
      "post": {
        "summary": "CloneEvent",
        "description": "Endpoint to clone an existing event. This function allows users to create a duplicate of an existing event by providing the event ID and cloning options. It is useful in scenarios where similar events need to be created with minimal changes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event to be cloned",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloneOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/CloneEventResponse"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "post": {
        "summary": "CreateEvent",
        "description": "Endpoint to create a new event within the system. This function allows for the creation of an event by providing the necessary event details. It is designed to be used in applications where event management is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Event"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEvents",
        "description": "Retrieves a list of events, with the option to filter by past or upcoming events. This function is designed to be used in applications that require event data, allowing users to specify whether they want to see past events.",
        "parameters": [
          {
            "in": "query",
            "name": "past",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional flag to filter past events",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "delete": {
        "summary": "DeleteEvent",
        "description": "Endpoint to delete a specific event by its unique identifier. This function allows administrators to remove an event from the system, ensuring that all related queries are invalidated and removed. It is designed for use in applications where event management and cleanup are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateEvent",
        "description": "Endpoint to update an existing event with new details. This function allows users to modify the details of an event by providing the event ID and the updated event inputs. It ensures that the event data is refreshed in the query client upon successful update.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Event"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetEvent",
        "description": "Provides functions and hooks for querying event data, including fetching specific events and managing query data. This module is designed to facilitate the retrieval and caching of event information within an application. It includes utilities for setting query data and hooks for integrating with React Query.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Event"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/files/{fileId}": {
      "delete": {
        "summary": "DeleteFile",
        "description": "Endpoint to delete a specific file by its unique identifier. This function allows users to remove a file from the system, ensuring that all related queries are invalidated. It is designed to be used in applications where file management and cleanup are required.",
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the file to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateFile",
        "description": "Endpoint to update a specific file within the system. This function allows users to update the details of a file by providing the file ID and the new file data. It is designed to be used in applications where file management and updates are required.",
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the file to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/File"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetFile",
        "description": "Endpoint to retrieve a specific file by its unique identifier. This function allows users to fetch details of a file using the provided file ID. It is designed to be used in applications where detailed information about a file is required.",
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/File"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/requests/{requestId}/accept": {
      "put": {
        "summary": "AcceptGroupRequest",
        "description": "Endpoint to accept a group request. This function allows the acceptance of a pending group request by specifying the group and request IDs. It is used in scenarios where a user or admin needs to approve a request to join a group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "requestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the request",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupRequest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/events/{eventId}": {
      "post": {
        "summary": "AddGroupEvent",
        "description": "Adds an event to a specified group and updates the query client with the new data. This function is used to associate an event with a group, ensuring that the group data is updated accordingly. It is particularly useful in scenarios where group-event relationships need to be dynamically managed.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveGroupEvent",
        "description": "Endpoint to remove a specific event from a group. This function allows the removal of an event from a specified group by providing the group and event identifiers. It is designed to be used in applications where managing group events is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/interests/{interestId}": {
      "post": {
        "summary": "AddGroupInterest",
        "description": "Endpoint to add an interest to a specific group. This function allows users to associate a new interest with a group by providing the group's ID and the interest's ID. It is designed to update the group's interests and ensure the data is consistent across the application.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/members/{accountId}": {
      "post": {
        "summary": "AddGroupMember",
        "description": "Endpoint to add a member to a specific group within an organization. This function allows the addition of an account to a group by specifying the group and account IDs. It is designed to be used in applications where managing group memberships is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveGroupMember",
        "description": "Endpoint to remove a member from a specified group. This function allows the removal of a user from a group by specifying the group ID and the account ID of the member to be removed. It is designed to be used in administrative contexts where group membership management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/moderators/{accountId}": {
      "post": {
        "summary": "AddGroupModerator",
        "description": "Endpoint to add a moderator to a specific group. This function allows the addition of a user as a moderator to a specified group by providing the group ID and the account ID of the user. It is designed to be used in applications where group management and user roles are handled.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account to be added as a moderator",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveGroupModerator",
        "description": "Endpoint to remove a moderator from a specified group. This function allows the removal of a moderator from a group by providing the group ID and the account ID of the moderator. It is used in scenarios where group moderation needs to be updated or modified.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/sponsors/{accountId}": {
      "post": {
        "summary": "AddGroupSponsor",
        "description": "Endpoint to add a sponsor to a specific group. This function allows the addition of a sponsor to a group by specifying the group and account IDs. It is used in scenarios where a group needs to be associated with a new sponsor.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveGroupSponsor",
        "description": "Endpoint to remove a sponsor from a specified group. This function allows the removal of a sponsor from a group by specifying the group and account IDs. It is used in scenarios where managing group sponsorships is required, ensuring that the sponsor is no longer associated with the group.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/invitations/{invitationId}/cancel": {
      "put": {
        "summary": "CancelGroupInvitation",
        "description": "Endpoint to cancel a group invitation. This function allows the cancellation of a specific invitation to a group by providing the group ID and invitation ID. It is useful in scenarios where an invitation needs to be revoked or invalidated.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "invitationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invitation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupInvitation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "post": {
        "summary": "PostGroups",
        "description": "Creates a new group within the system using the specified parameters. This function is designed to facilitate the creation of groups by accepting necessary input parameters and interacting with the backend API. It ensures that the group is created and updates the query cache accordingly if the operation is successful.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetGroups",
        "description": "Fetch a list of groups with optional filtering by access level and featured status. This function allows retrieval of group data, supporting filters for access level and featured status. It is useful for applications that need to display or manage groups with specific characteristics.",
        "parameters": [
          {
            "in": "query",
            "name": "access",
            "schema": {
              "type": "string"
            },
            "description": "The access level of the groups",
            "required": false
          },
          {
            "in": "query",
            "name": "featured",
            "schema": {
              "type": "boolean"
            },
            "description": "Whether to filter groups by featured status",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Group"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}": {
      "delete": {
        "summary": "DeleteGroup",
        "description": "Endpoint to delete a group by its unique identifier. This function allows for the removal of a group from the system, ensuring that all associated queries are invalidated and removed. It is designed to be used in applications where group management and cleanup are necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateGroup",
        "description": "Endpoint to update the data of a specific group. This function allows for updating a group's information by providing the group ID and the new data. It is designed to be used in applications where group data management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetGroup",
        "description": "Fetches details for a specific group by its ID. This function utilizes a connected single query to retrieve data about a group within the system. It is designed to be used in applications where detailed information about a group is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/invitations/{invitationId}": {
      "delete": {
        "summary": "DeleteGroupInvitation",
        "description": "Endpoint to delete a group invitation. This function allows the removal of a specific invitation from a group by providing the group ID and invitation ID. It is used in scenarios where managing group memberships and invitations is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "invitationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invitation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetGroupInvitation",
        "description": "Fetches details of a specific group invitation using the group and invitation IDs. This function is designed to retrieve detailed information about a group invitation, which can be used in applications that manage or display group invitation data.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "invitationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invitation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupInvitation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/requests/{requestId}": {
      "delete": {
        "summary": "DeleteGroupRequest",
        "description": "Endpoint to delete a specific group request and invalidate related queries. This function allows the removal of a group request by its unique identifiers, ensuring that any cached queries related to the group requests are invalidated to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "requestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the request",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetGroupRequest",
        "description": "Endpoint to retrieve a specific group request by its unique identifiers. This function allows users to fetch details of a particular group request using the provided group ID and request ID. It is designed to be used in applications where detailed information about a group request is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "requestId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the request",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupRequest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/invitations/{invitationId}/reinvite": {
      "put": {
        "summary": "PutReinviteGroupInvitation",
        "description": "Endpoint to reinvite a group member with a pending invitation. This function allows the reinvitation of a group member whose invitation is still pending. It updates the invitation status and ensures the group member receives a new invitation.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "invitationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invitation",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupInvitation"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/requests/{requestId}/reject": {
      "put": {
        "summary": "RejectGroupRequest",
        "description": "Endpoint to reject a group request. This function allows an administrator to reject a specific request to join a group. It is designed to be used in applications where group membership management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "requestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the request",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupRequest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/interests/{accountId}": {
      "delete": {
        "summary": "RemoveGroupInterest",
        "description": "Endpoint to remove an interest from a group. This function allows the removal of a specific interest associated with a group by providing the group ID and account ID. It is designed to be used in applications where managing group interests is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Group"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/images": {
      "post": {
        "summary": "CreateImage",
        "description": "Endpoint to create a new image in the system. This function allows users to upload and store a new image by providing the necessary image data. It is designed to be used in applications where image management and storage are required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Image"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetImages",
        "description": "Endpoint to retrieve image data with optional filtering by image type. This function allows users to fetch a list of images, optionally filtered by a specified image type. It is designed to be used in applications where image data retrieval is required, with support for infinite scrolling.",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Optional image type for filtering",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ImageWCopyUri"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/images/{imageId}": {
      "delete": {
        "summary": "DeleteImage",
        "description": "Endpoint to delete an image from the storage. This function allows the removal of a specified image by its ID from the storage system. It ensures that the image is deleted and updates the query cache accordingly.",
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the image to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateImage",
        "description": "Endpoint to update an image and invalidate related queries. This function allows updating an image's details using the provided image ID and update inputs. It ensures that any related queries are invalidated to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the image",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Image"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetImage",
        "description": "Fetches image data from the admin API using a specified image ID. This function is designed to retrieve detailed information about a specific image stored in the system. It is useful for applications that require access to image metadata or content.",
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the image",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Image"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/images/delete": {
      "post": {
        "summary": "DeleteManyImages",
        "description": "Endpoint to delete multiple images from the storage system. This function allows users to remove several images at once by providing their IDs. It is useful in scenarios where bulk deletion of images is required, ensuring efficient management of image resources.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "imageIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/interests": {
      "post": {
        "summary": "CreateInterest",
        "description": "Endpoint to create a new interest within the system. This function allows for the creation of a new interest by providing the necessary interest data. It is designed to be used in applications where users can manage and add new interests.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterestCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Interest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetInterests",
        "description": "Endpoint to retrieve a list of interests. This function fetches a paginated list of interests from the server, allowing for optional sorting and searching. It is designed to be used in applications where a comprehensive list of interests is required.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Interest"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/interests/{interestId}": {
      "delete": {
        "summary": "DeleteInterest",
        "description": "Endpoint to delete a specific interest by its ID. This function allows for the removal of an interest from the system, ensuring that associated queries are invalidated and removed. It is designed to be used in applications where managing user or system interests is required.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the interest to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateInterest",
        "description": "Endpoint to update an existing interest with new data. This function allows updating the details of a specific interest identified by its ID. It is used in applications where interest data needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the interest to update",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InterestUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Interest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetInterest",
        "description": "Endpoint to retrieve detailed information about a specific interest by its unique identifier. This function is designed to be used in applications where detailed information about an interest is required. It utilizes a connected single query to fetch the interest data.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Interest"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/items": {
      "post": {
        "summary": "CreateInvoiceLineItem",
        "description": "Endpoint to create a new invoice line item. This function allows the creation of a new line item for a specified invoice. It is designed to be used in applications where invoice management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invoice",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceLineItemCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/InvoiceLineItem"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetInvoiceLineItems",
        "description": "Endpoint to fetch line items associated with a specific invoice. This function retrieves detailed information about each line item within a given invoice, allowing users to view and manage invoice components effectively.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invoice",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/InvoiceLineItem"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/items/{lineItemId}": {
      "delete": {
        "summary": "DeleteInvoiceLineItem",
        "description": "Endpoint to delete a specific line item from an invoice. This function allows the removal of a line item from a specified invoice using the invoice ID and line item ID. It is designed to be used in applications where invoice management and item removal are required.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invoice",
            "required": true
          },
          {
            "in": "path",
            "name": "lineItemId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the line item",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateInvoiceLineItem",
        "description": "Endpoint to update a specific invoice line item within an invoice. This function allows users to modify details of a line item associated with a given invoice. It is designed to be used in applications where invoice management and updates are required.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invoice",
            "required": true
          },
          {
            "in": "path",
            "name": "lineItemId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the line item",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceLineItemUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/InvoiceLineItem"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetInvoiceLineItem",
        "description": "Endpoint to fetch a specific invoice line item by its ID. This function retrieves detailed information about a particular line item within an invoice. It is intended for use in applications that require access to specific invoice line item data.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the invoice",
            "required": true
          },
          {
            "in": "path",
            "name": "lineItemId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the line item",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/InvoiceLineItem"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "post": {
        "summary": "CreateInvoice",
        "description": "Endpoint to create a new invoice within the system. This function allows users to submit data for a new invoice, which will be processed and stored. It is designed to be used in applications where invoice management is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetInvoices",
        "description": "Endpoint to retrieve a list of invoices. This function provides a paginated list of invoices, allowing for optional sorting and filtering. It is designed to be used in applications where invoice data needs to be displayed or processed.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}": {
      "delete": {
        "summary": "DeleteInvoice",
        "description": "Endpoint to delete a specific invoice by its ID. This function allows for the removal of an invoice from the system, ensuring that all related queries are invalidated and removed. It is designed to be used in applications where invoice management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the invoice to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateInvoice",
        "description": "Endpoint to update an existing invoice with new data. This function allows users to modify the details of a specific invoice identified by its ID. It ensures that only the necessary fields are updated while maintaining the integrity of the invoice data.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the invoice to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetInvoice",
        "description": "Endpoint to retrieve detailed information about a specific invoice by its ID. This function is designed to fetch invoice data, which can be used in applications that require access to invoice details for display or processing purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the invoice",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Invoice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/levels/{levelId}/accounts/{accountId}": {
      "post": {
        "summary": "AddLevelAccount",
        "description": "Adds an account to a specified level, facilitating the management of account-level associations. This function is used to associate an account with a particular level, enabling the organization to manage permissions and access based on levels. It is particularly useful in scenarios where accounts need to be dynamically assigned to different levels for access control.",
        "parameters": [
          {
            "in": "path",
            "name": "levelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the level",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Level"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveLevelAccount",
        "description": "Endpoint to remove an account from a specified level within the system. This function facilitates the removal of an account from a particular level, ensuring that the associated data is updated accordingly. It is intended for use in administrative contexts where managing account-level associations is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "levelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the level",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Level"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/levels": {
      "post": {
        "summary": "CreateLevel",
        "description": "Endpoint to create a new level within the system. This function allows for the creation of a new level by providing the necessary inputs. It is designed to be used in applications where managing levels is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LevelCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Level"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetLevels",
        "description": "Endpoint to manage and fetch level data. This function provides the ability to retrieve a list of levels with support for pagination and sorting. It is designed to be used in applications where level data needs to be displayed or managed.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Level"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/levels/{levelId}": {
      "delete": {
        "summary": "DeleteLevel",
        "description": "Endpoint to delete a specific level and invalidate related queries. This function allows the removal of a level by its unique identifier and ensures that any cached queries related to levels are invalidated. It is designed to be used in applications where level management is required, ensuring data consistency by updating the cache.",
        "parameters": [
          {
            "in": "path",
            "name": "levelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the level to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateLevel",
        "description": "Endpoint to update a level with new data. This function allows updating the details of a specific level by providing new data. It is used in scenarios where level information needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "levelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the level",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LevelUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Level"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/integrations": {
      "post": {
        "summary": "CreateIntegration",
        "description": "Endpoint to create a new integration for an organization. This function allows the creation of a new integration by providing the necessary integration details. It is designed to be used in applications where organizations need to add new integrations to their system.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateOrganizationIntegrations",
        "description": "Endpoint to update the organization's integrations with Ghost. This function allows updating the integration settings for Ghost within an organization, including enabling or disabling the integration and setting the necessary keys and URL. It is designed for use in applications that manage organizational settings and integrations.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ghost": {
                    "type": "boolean"
                  },
                  "ghostUrl": {
                    "type": "string"
                  },
                  "ghostAdminKey": {
                    "type": "string"
                  },
                  "ghostContentKey": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetIntegrations",
        "description": "Endpoint to retrieve a list of integrations for an organization. This function fetches integration data, allowing users to view and manage integrations within their organization. It supports pagination and sorting to efficiently handle large datasets.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Integration"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/integrations/{integrationId}": {
      "delete": {
        "summary": "DeleteIntegration",
        "description": "Endpoint to delete a specific integration within an organization. This function allows for the removal of an integration by its unique identifier. It ensures that the integration is deleted and updates the query cache accordingly.",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the integration to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateIntegration",
        "description": "Endpoint to update an existing integration within an organization. This function allows users to modify the details of a specific integration by providing the integration ID and the updated inputs. It ensures that the integration data is updated in the system and invalidates the relevant queries to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the integration",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetIntegration",
        "description": "Endpoint to retrieve details of a specific integration within an organization. This function allows users to fetch comprehensive information about a particular integration using its unique identifier. It is designed for applications that require detailed integration data for organizational purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the integration",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/modules/{moduleType}/editableTiers/{tierId}": {
      "post": {
        "summary": "AddOrganizationModuleEditableTier",
        "description": "Adds an editable tier to a specified organization module. This function allows the addition of a new tier to an organization module, making it editable. It is intended for use in scenarios where organizations need to manage and customize their module tiers.",
        "parameters": [
          {
            "in": "path",
            "name": "moduleType",
            "schema": {
              "$ref": "#/components/schemas/OrganizationModuleType"
            },
            "description": "The type of the organization module",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationModule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveOrganizationModuleEditableTier",
        "description": "Removes an editable tier from a specified organization module. This function is used to delete a tier from an organization module, identified by its type and tier ID. It ensures that the specified tier is removed and updates the relevant queries to reflect this change.",
        "parameters": [
          {
            "in": "path",
            "name": "moduleType",
            "schema": {
              "$ref": "#/components/schemas/OrganizationModuleType"
            },
            "description": "The type of the organization module",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationModule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/modules/{moduleType}/enabledTiers/{tierId}": {
      "post": {
        "summary": "AddOrganizationModuleEnabledTier",
        "description": "Adds an enabled tier to a specific organization module. This function allows the addition of a tier to an organization module, enabling specific functionalities or features associated with that tier. It is intended for use in administrative contexts where organization modules need to be configured with specific tiers.",
        "parameters": [
          {
            "in": "path",
            "name": "moduleType",
            "schema": {
              "$ref": "#/components/schemas/OrganizationModuleType"
            },
            "description": "The type of the organization module",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier to be enabled",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationModule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveOrganizationModuleEnabledTier",
        "description": "Removes an enabled tier from a specified organization module. This function is used to delete a tier from an organization module by specifying the module type and tier ID. It ensures that the relevant queries are invalidated to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "moduleType",
            "schema": {
              "$ref": "#/components/schemas/OrganizationModuleType"
            },
            "description": "The type of the organization module",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationModule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/modules/{moduleType}": {
      "put": {
        "summary": "UpdateOrganizationModule",
        "description": "Updates an organization module and invalidates related queries if necessary. This function allows for updating the details of a specific organization module by its type. It ensures that any related queries are invalidated to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "moduleType",
            "schema": {
              "$ref": "#/components/schemas/OrganizationModuleType"
            },
            "description": "The type of the organization module",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationModuleUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationModule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationModule",
        "description": "Provides functionality to query and manage organization modules. This module includes functions to fetch, cache, and utilize organization module data based on the specified module type. It is designed to be used in applications that require interaction with different types of organization modules.",
        "parameters": [
          {
            "in": "path",
            "name": "moduleType",
            "schema": {
              "$ref": "#/components/schemas/OrganizationModuleType"
            },
            "description": "The type of the organization module",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationModule"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/pages/{type}": {
      "put": {
        "summary": "UpdateOrganizationPage",
        "description": "Endpoint to update a specific organization page with new inputs. This function allows for updating the details of an organization page by specifying the page type and the new inputs. It is designed to be used in applications where organization page details need to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/PageType"
            },
            "description": "The type of the page",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationPageUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Page"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationPage",
        "description": "Endpoint to retrieve organization pages based on the specified page type. This function allows users to fetch pages associated with an organization by providing the page type. It is designed to be used in applications where organization-specific page data is required.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/PageType"
            },
            "description": "The type of the page",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Page"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/payment/{type}": {
      "post": {
        "summary": "CreateOrganizationPaymentIntegration",
        "description": "Endpoint to create and manage payment integration for an organization. This function allows the creation of a payment integration setup for an organization by specifying the type of integration and optional credentials. It is designed to facilitate the management of payment integrations within organizational settings.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/PaymentIntegrationType"
            },
            "description": "The type of payment integration",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientPublicKey": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "DeleteOrganizationPaymentIntegration",
        "description": "Endpoint to delete a payment integration for an organization. This function allows the removal of a specified payment integration type from an organization. It is designed to be used in applications where managing payment integrations is required.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/PaymentIntegrationType"
            },
            "description": "The type of payment integration",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "ToggleOrganizationPaymentIntegration",
        "description": "Toggles the payment integration for an organization and updates the query client with new data. This function allows the modification of payment integration settings for an organization by specifying the type of integration. It ensures that the query client is updated with the latest data after the integration is toggled.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/PaymentIntegrationType"
            },
            "description": "The type of payment integration",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/PaymentIntegration"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationPaymentIntegration",
        "description": "Retrieves payment integration details for a specific organization. This function fetches detailed information about a payment integration type associated with an organization. It is intended for use in applications that require access to specific payment integration configurations.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The type of the payment integration",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/PaymentIntegration"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/tax/{type}": {
      "post": {
        "summary": "CreateTaxIntegration",
        "description": "Creates a new tax integration for the organization. This function allows the creation of a tax integration by specifying the type and the necessary inputs. It is intended for use in scenarios where an organization needs to set up a new tax integration.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/TaxIntegrationType"
            },
            "description": "The type of tax integration",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxIntegrationCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaxIntegration"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "DeleteTaxIntegration",
        "description": "Endpoint to delete a specific tax integration within an organization. This function allows the removal of a tax integration by specifying its type, ensuring that the integration is no longer active or available for use. It is designed for administrative purposes where managing tax integrations is required.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/TaxIntegrationType"
            },
            "description": "The type of the tax integration",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "ToggleTaxIntegration",
        "description": "Endpoint to toggle tax integration features for an organization. This function allows the modification of tax integration settings by specifying the type of integration. It is designed to be used in applications where tax integration features need to be enabled or disabled.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/TaxIntegrationType"
            },
            "description": "The type of tax integration",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaxIntegration"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetTaxIntegration",
        "description": "Fetches tax integration data for a specified type within an organization. This function is used to retrieve detailed information about a specific tax integration type. It is designed for applications that require access to tax integration details for organizational purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The type of tax integration",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaxIntegration"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/triggers/{type}": {
      "put": {
        "summary": "UpdateOrganizationTrigger",
        "description": "Endpoint to update an organization trigger. This function allows updating the configuration of a specific organization trigger by specifying its type and the new trigger inputs. It is designed to be used in applications where organization triggers need to be modified or updated.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/OrganizationTriggerType"
            },
            "description": "The type of the organization trigger",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationTrigger"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationTrigger",
        "description": "Fetches an organization trigger based on the specified type. This function is designed to retrieve details of a specific organization trigger, which can be used in applications that require information about organizational triggers.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/OrganizationTriggerType"
            },
            "description": "The type of the organization trigger",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationTrigger"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/users": {
      "post": {
        "summary": "AddOrganizationUser",
        "description": "Endpoint to add a user to the organization. This function allows administrators to add a new user to their organization by providing the user's email address. It is designed to be used in applications where managing organization memberships is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationUsers",
        "description": "Endpoint to retrieve a list of users within an organization. This function fetches user data from an organization, supporting pagination and search functionalities. It is designed for applications that need to display or manage organization members.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationMembership"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/team-members": {
      "post": {
        "summary": "CreateOrganizationTeamMember",
        "description": "Endpoint to create a new organization team member. This function allows the creation of a new team member within an organization by providing the necessary inputs. It is designed to be used in applications where managing team members is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationTeamMemberCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/TeamMember"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationTeamMembers",
        "description": "Endpoint to retrieve a list of team members within an organization. This function fetches a paginated list of team members, allowing for optional sorting and searching. It is designed to be used in applications that require displaying or managing organization team members.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TeamMember"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/domain": {
      "delete": {
        "summary": "DeleteOrganizationDomain",
        "description": "Endpoint to delete an organization domain. This function allows for the removal of a domain associated with an organization. It is intended for use in administrative contexts where domain management is required.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateOrganizationDomain",
        "description": "Endpoint to update the organization's domain. This function allows updating the domain associated with an organization. It is designed to be used in applications where managing organization settings is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "domain": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/DomainDetails"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationDomain",
        "description": "Fetches the domain details of an organization. This function is designed to retrieve detailed information about an organization's domain, which can be used in applications that require such data for administrative or display purposes.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "DomainDetails",
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/team-members/{teamMemberId}": {
      "delete": {
        "summary": "DeleteOrganizationTeamMember",
        "description": "Deletes a team member from an organization. This function allows for the removal of a specified team member by their ID from an organization's team. It is intended for use in administrative contexts where managing team membership is required.",
        "parameters": [
          {
            "in": "path",
            "name": "teamMemberId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the team member to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateOrganizationTeamMember",
        "description": "Endpoint to update a team member's information in the organization. This function allows updating the details of a specific team member within an organization using their ID. It is designed to be used in applications where team member information needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "teamMemberId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the team member",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationTeamMemberUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/TeamMember"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationTeamMember",
        "description": "Fetches details for a specific organization team member by their ID. This function utilizes a connected single query to retrieve data about a team member within an organization. It is designed to be used in applications where detailed information about a team member is required.",
        "parameters": [
          {
            "in": "path",
            "name": "teamMemberId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the team member",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/TeamMember"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/users/{userId}": {
      "delete": {
        "summary": "DeleteOrganizationUser",
        "description": "Endpoint to delete a user from the organization. This function allows administrators to remove a user from the organization's user list. It ensures that the user is properly deleted and the relevant queries are invalidated to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the user to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateOrganizationMembership",
        "description": "Endpoint to update a user's organization membership. This function allows updating the membership details of a user within an organization. It is designed to be used in applications where user membership management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the user",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMembershipUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganizationMembership",
        "description": "Endpoint to retrieve organization membership data for a specific user. This function allows applications to fetch detailed membership information of a user within an organization. It is designed to be used in scenarios where user membership details are required for organizational management.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/payments/{paymentId}/refund": {
      "post": {
        "summary": "RefundOrganizationPayment",
        "description": "Endpoint to process a refund for a specific payment within an organization. This function allows for the refunding of a specified payment amount, optionally associated with an event. It is designed to be used in scenarios where a payment needs to be refunded, and updates relevant queries upon success.",
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the payment to be refunded",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "amount": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Payment"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization": {
      "put": {
        "summary": "UpdateOrganization",
        "description": "Endpoint to update the details of an organization. This function allows for updating the information of an organization using the provided organization details. It is designed to be used in applications where organization data needs to be modified.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Organization"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetOrganization",
        "description": "Fetches organization data from the server. This function is designed to retrieve detailed information about an organization. It is intended for use in applications that require access to organization-level data.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Organization"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}/users": {
      "post": {
        "summary": "AddReportUser",
        "description": "Endpoint to add a user to a specific report within the system. This function allows the addition of a user to a report by specifying the report ID and user ID. It is designed to be used in applications where managing report participants is required.",
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the report",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetReportUsers",
        "description": "Endpoint to manage and query user report data associated with a specific report. This function allows retrieval of user data linked to a particular report by its ID. It is designed for applications that need to access detailed user information within a report context.",
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the report",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reports": {
      "post": {
        "summary": "CreateReport",
        "description": "Endpoint to create a new report within the system. This function allows users to submit data for a new report, specifying the type of report they wish to create. It ensures that a parent ID is provided and interacts with the admin API to store the report data. Upon successful creation, it invalidates the relevant queries to update the report data cache.",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ReportType"
            },
            "description": "The type of the report",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Report"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetReports",
        "description": "Endpoint to retrieve a list of reports based on specified criteria. This function allows users to fetch reports filtered by type and optionally by event ID. It is designed to be used in applications where report data is required for analysis or display.",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ReportType"
            },
            "description": "The type of the report",
            "required": true
          },
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Report"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}": {
      "delete": {
        "summary": "DeleteReport",
        "description": "Endpoint to delete a specific report by its ID. This function allows for the removal of a report from the system, optionally associated with a specific event. It is designed to be used in applications where report management is required, ensuring that the report is deleted and relevant queries are invalidated.",
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the report to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateReport",
        "description": "Endpoint to update a report and invalidate related queries. This function allows updating the details of a specific report identified by its ID. It ensures that any related queries are invalidated to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the report",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Report"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetReport",
        "description": "Fetches a specific report by its ID, including detailed data and handling pagination. This function is designed to retrieve comprehensive report information, optionally filtered by an event ID. It is suitable for applications that require detailed report data with support for pagination.",
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the report",
            "required": true
          },
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "Optional event ID for filtering the report",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Report"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}/users/{userId}": {
      "delete": {
        "summary": "RemoveReportUser",
        "description": "Endpoint to remove a user from a specified report. This function allows the removal of a user from a report by specifying the report ID and user ID. It is used in scenarios where user access to a report needs to be revoked.",
        "parameters": [
          {
            "in": "path",
            "name": "reportId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the report",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/self/api-keys": {
      "post": {
        "summary": "CreateSelfApiKey",
        "description": "Endpoint to create a new API key for the current user. This function allows users to generate a new API key for their own use by providing the necessary data for creation. It is designed to be used in applications where users need to manage their own API keys.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserApiKeyCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserApiKey"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSelfApiKeys",
        "description": "Retrieves a list of API keys associated with the current user. This function is designed to fetch all API keys that belong to the user, allowing them to manage or review their keys. It supports pagination and sorting to efficiently handle large sets of API keys.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserApiKey"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/self/api-keys/{apiKeyId}": {
      "delete": {
        "summary": "DeleteSelfApiKey",
        "description": "Endpoint to delete a self API key. This function allows users to delete their own API key using the provided API key ID. It ensures that the API key is removed from the system and invalidates related queries to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "apiKeyId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the API key to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSelfApiKey",
        "description": "Endpoint to retrieve a specific API key associated with the current user by its unique identifier. This function allows users to fetch details of their own API key using the provided API key ID.",
        "parameters": [
          {
            "in": "path",
            "name": "apiKeyId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the API key",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserApiKey"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/self/image": {
      "delete": {
        "summary": "DeleteUserImage",
        "description": "Endpoint to delete the current user's profile image. This function allows users to remove their profile image from the system. It ensures that the user's image is deleted and updates the query cache accordingly.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateUserImage",
        "description": "Endpoint to update the image of the current user. This function allows users to update their profile image by providing the necessary image data. It ensures that the user's image is updated in the system and invalidates the relevant queries to reflect the changes.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserImageUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/self/organizations/{organizationId}": {
      "delete": {
        "summary": "DeleteSelfOrganizations",
        "description": "Endpoint to allow a user to leave an organization they are part of. This function facilitates the removal of a user from an organization by deleting their association with it. It is intended for use in applications where users need the ability to manage their organizational memberships.",
        "parameters": [
          {
            "in": "path",
            "name": "organizationId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the organization",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/self": {
      "put": {
        "summary": "UpdateSelf",
        "description": "Endpoint to update the current user's data. This function allows users to update their own profile information by providing the necessary user data. It ensures that the updated information is reflected in the application by setting the query data accordingly.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSelf",
        "description": "Endpoint to retrieve the current user's data. This function fetches the details of the user who is currently authenticated. It is designed to be used in applications where user-specific data is required.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/series/{seriesId}/events/{eventId}": {
      "post": {
        "summary": "AddSeriesEvent",
        "description": "Endpoint to add an event to a specific series. This function allows users to associate an event with a series by providing the series and event identifiers. It is designed to update the series with the new event and refresh the relevant query data.",
        "parameters": [
          {
            "in": "path",
            "name": "seriesId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the series",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Series"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveSeriesEvent",
        "description": "Endpoint to remove a specific event from a series. This function allows the removal of an event identified by its ID from a series, also identified by its ID. It is designed to be used in applications where managing series events is required.",
        "parameters": [
          {
            "in": "path",
            "name": "seriesId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the series",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Series"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/series": {
      "post": {
        "summary": "CreateSeries",
        "description": "Endpoint to create a new series within the application. This function allows users to add a new series by providing the necessary series data. It ensures that the series is created and updates the query cache accordingly.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeriesCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Series"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSeriesList",
        "description": "Endpoint to retrieve a list of series. This function fetches a paginated list of series from the server, allowing for optional sorting and searching. It is designed to be used in applications where a comprehensive list of series is required.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Series"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/series/{seriesId}": {
      "delete": {
        "summary": "DeleteSeries",
        "description": "Endpoint to delete a series by its unique identifier. This function allows for the removal of a series from the system, ensuring that associated queries are invalidated and removed. It is designed to be used in applications where series management is required, providing a mechanism to delete series data.",
        "parameters": [
          {
            "in": "path",
            "name": "seriesId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the series",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateSeries",
        "description": "Endpoint to update a series in the system. This function allows for updating the details of an existing series by providing the series ID and the new series data. It is designed to be used in applications where series data needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "seriesId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the series",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeriesUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Series"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSeries",
        "description": "Fetches a specific series by its unique identifier. This function is designed to retrieve detailed information about a series, utilizing a connected single query to ensure data consistency and efficiency. It is suitable for applications that require access to series data by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "seriesId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the series",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Series"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "post": {
        "summary": "UploadFile",
        "description": "Endpoint to upload a file to storage. This function allows users to upload a file by providing its data URI and source. It is designed to be used in applications where file storage is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "dataUri": {
                    "type": "string"
                  },
                  "source": {
                    "$ref": "#/components/schemas/FileSource"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/File"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetFiles",
        "description": "Provides functionality to retrieve and manage files through the API with support for pagination and filtering. This endpoint allows users to fetch a list of files, optionally filtered by a specified source. It is designed to be used in applications where file management and retrieval are required.",
        "parameters": [
          {
            "in": "query",
            "name": "source",
            "schema": {
              "type": "string"
            },
            "description": "Optional source of the files",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/File"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/streams": {
      "post": {
        "summary": "CreateStreamInput",
        "description": "Endpoint to create a new stream input within the system. This function allows users to add a new stream input by providing the necessary stream input data. It ensures that the stream input is created and updates the relevant query data if the operation is successful.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamInputCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/StreamInput"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetStreamInputs",
        "description": "Endpoint to retrieve a list of stream inputs. This function fetches stream input data from the server, allowing for infinite scrolling and pagination. It is designed to be used in applications where a comprehensive list of stream inputs is required.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StreamInput"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/streams/{streamId}/outputs": {
      "post": {
        "summary": "CreateStreamInputOutput",
        "description": "Endpoint to create a new stream input-output configuration. This function allows the creation of a new output configuration for a specified stream. It is designed to be used in applications where stream output configurations need to be dynamically managed.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the stream",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamInputOutputCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/StreamInputOutput"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetStreamInputOutputs",
        "description": "Endpoint to fetch the input and output data for a specified stream. This function retrieves a list of input and output records associated with a given stream ID. It is designed to be used in applications that require detailed information about stream data transactions.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the stream",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/StreamInputOutput"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/streams/{streamId}": {
      "delete": {
        "summary": "DeleteStreamInput",
        "description": "Endpoint to delete a specific stream input by its ID. This function allows for the removal of a stream input from the system, ensuring that associated queries are invalidated and removed. It is intended for use in scenarios where stream inputs need to be managed or cleaned up.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the stream input to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateStream",
        "description": "Endpoint to update a specific stream with new input data. This function allows updating the details of an existing stream by providing the stream ID and the new input data. It is designed to be used in applications where stream data needs to be modified or updated.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the stream to be updated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamInputUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/StreamInput"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetStreamInput",
        "description": "Fetches stream input data for a specific stream by its ID. This function is designed to retrieve detailed information about a stream input, which can be used in applications that require stream data. It utilizes a connected single query to ensure efficient data retrieval and management.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the stream",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/StreamInput"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/streams/{streamId}/outputs/{outputId}": {
      "delete": {
        "summary": "DeleteStreamInputOutput",
        "description": "Endpoint to delete a specific output from a stream. This function allows the removal of an output associated with a given stream by specifying the stream and output IDs. It is useful in scenarios where stream outputs need to be managed or cleaned up.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the stream",
            "required": true
          },
          {
            "in": "path",
            "name": "outputId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the output",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateStreamInputOutput",
        "description": "Endpoint to update a specific stream input output by its identifiers. This function allows updating the output data of a stream input within a system. It is designed to be used in applications where modifications to stream outputs are required.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the stream",
            "required": true
          },
          {
            "in": "path",
            "name": "outputId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the output",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamInputOutputUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/StreamInputOutput"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/streams/{streamId}/config": {
      "put": {
        "summary": "UpdateStreamConfig",
        "description": "Endpoint to update the configuration of a specific stream. This function allows users to modify the settings of a stream by providing the stream ID and the new configuration details. It is designed for applications that require dynamic updates to stream configurations.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the stream",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamInputUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/StreamInput"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscription-products/{subscriptionProductId}/tiers/{tierId}": {
      "post": {
        "summary": "AddSubscriptionProductTier",
        "description": "Endpoint to add a tier to a subscription product. This function allows the addition of a specific tier to a given subscription product by their respective IDs. It is used in scenarios where subscription products need to be enhanced with additional tiers.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tier"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveSubscriptionProductTier",
        "description": "Endpoint to remove a tier from a subscription product. This function allows the removal of a specific tier from a subscription product by providing the subscription product ID and the tier ID. It is used in scenarios where a tier needs to be deleted from a subscription product, ensuring the subscription product is updated accordingly.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product",
            "required": true
          },
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tier"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "delete": {
        "summary": "CancelSubscription",
        "description": "Endpoint to cancel a subscription. This function allows users to cancel an existing subscription by providing the subscription ID. It ensures that the subscription is removed and updates the query data accordingly.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subscription to be canceled",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateSubscription",
        "description": "Endpoint to update a subscription with new details. This function allows users to modify an existing subscription by providing the subscription ID and the updated subscription details. It is designed to be used in applications where subscription management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSubscription",
        "description": "Fetches subscription details by its unique ID. This function is designed to retrieve detailed information about a specific subscription using its ID. It is intended for use in applications where subscription data is required for display or processing.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subscription",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "post": {
        "summary": "CreateSubscription",
        "description": "Endpoint to create a new subscription. This function allows the creation of a new subscription by providing the necessary subscription details. It is designed to be used in applications where subscription management is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSubscriptions",
        "description": "Endpoint to retrieve a list of subscriptions with optional filtering. This function allows users to fetch a paginated list of subscriptions, with the ability to filter by subscription status and product ID. It is designed to be used in applications where subscription management and tracking are required.",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/SubscriptionStatus"
            },
            "description": "Optional filtering by subscription status",
            "required": false
          },
          {
            "in": "query",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "Optional filtering by subscription product ID",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Subscription"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscription-products": {
      "post": {
        "summary": "CreateSubscriptionProduct",
        "description": "Endpoint to create a new subscription product. This function allows the creation of a subscription product by providing the necessary details. It is designed to be used in applications where subscription products need to be managed.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionProductCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionProduct"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSubscriptionProducts",
        "description": "Endpoint to retrieve a list of subscription products available in the system. This function fetches subscription products using infinite query pagination, allowing for efficient data retrieval. It is designed to be used in applications where a comprehensive list of subscription products is required.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubscriptionProduct"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscription-products/{subscriptionProductId}/prices": {
      "post": {
        "summary": "CreateSubscriptionProductPrice",
        "description": "Endpoint to create a new price for a subscription product. This function allows the creation of a subscription product price by providing the necessary inputs. It is designed to be used in applications where subscription pricing needs to be managed.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionProductPriceCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionProductPrice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSubscriptionProductPrices",
        "description": "Endpoint to retrieve a list of prices for a specific subscription product. This function allows users to fetch detailed pricing information associated with a subscription product. It is designed to be used in applications where pricing details of subscription products are required.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubscriptionProductPrice"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscription-products/{subscriptionProductId}": {
      "delete": {
        "summary": "DeleteSubscriptionProductPrice",
        "description": "Endpoint to delete a subscription product price. This function allows the removal of a specific subscription product price by its unique identifier. It is intended for use in applications that manage subscription products and require the ability to delete product prices.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateSubscriptionProduct",
        "description": "Endpoint to update the details of a specific subscription product. This function allows for updating the information of a subscription product by providing its ID and the new details. It is intended for use in applications that manage subscription products and require the ability to modify product details.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subscription product",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionProductUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionProduct"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSubscriptionProduct",
        "description": "Fetches details for a specific subscription product by its ID. This function utilizes a connected single query to retrieve data about a subscription product. It is designed to be used in applications where detailed information about a subscription product is required.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subscription product",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionProduct"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscription-products/{subscriptionProductId}/prices/{subscriptionProductPriceId}": {
      "put": {
        "summary": "UpdateSubscriptionProductPrice",
        "description": "Endpoint to update the price of a subscription product. This function allows updating the price details of a specific subscription product by providing the necessary identifiers and update inputs. It is designed to be used in applications where subscription product pricing needs to be modified.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product",
            "required": true
          },
          {
            "in": "path",
            "name": "subscriptionProductPriceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product price",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionProductPriceUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionProductPrice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSubscriptionProductPrice",
        "description": "Fetches a specific subscription product price by its unique identifier. This function is used to retrieve detailed information about a particular subscription product price within a subscription product. It is designed for applications that require access to specific pricing details of subscription products.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subscription product",
            "required": true
          },
          {
            "in": "path",
            "name": "subscriptionProductPriceId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subscription product price",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionProductPrice"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/supportTickets": {
      "post": {
        "summary": "CreateSupportTicket",
        "description": "Endpoint to create a new support ticket. This function allows users to submit a support ticket with the necessary information. It is designed to be used in applications where users need to report issues or request assistance.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportTicketCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SupportTicket"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSupportTickets",
        "description": "Endpoint to fetch and manage support tickets with pagination and filtering capabilities. This function allows users to retrieve support tickets based on their status and type, providing options for pagination and additional query parameters. It is designed for applications that require detailed management and retrieval of support tickets.",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "The status of the support tickets",
            "required": true
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The type of the support tickets",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SupportTicket"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/supportTickets/{supportTicketId}/notes": {
      "post": {
        "summary": "CreateSupportTicketNote",
        "description": "Endpoint to create a new note for a support ticket. This function allows users to add additional information or comments to an existing support ticket by creating a new note. It is useful for tracking the progress or updates related to a support ticket.",
        "parameters": [
          {
            "in": "path",
            "name": "supportTicketId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the support ticket",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "text": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SupportTicket"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/supportTickets/{supportTicketId}": {
      "delete": {
        "summary": "DeleteSupportTicket",
        "description": "Endpoint to delete a support ticket by its unique identifier. This function allows administrators to remove a support ticket from the system. It ensures that the support ticket is deleted and updates the query cache accordingly.",
        "parameters": [
          {
            "in": "path",
            "name": "supportTicketId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the support ticket",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateSupportTicket",
        "description": "Endpoint to update a support ticket with new information. This function allows for the modification of existing support tickets by providing updated inputs. It is designed to be used in applications where support ticket management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "supportTicketId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the support ticket",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportTicketUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SupportTicket"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetSupportTicket",
        "description": "Endpoint to retrieve a specific support ticket by its unique identifier. This function allows users to fetch details of a support ticket using the provided support ticket ID. It is designed to be used in applications where detailed information about a support ticket is required.",
        "parameters": [
          {
            "in": "path",
            "name": "supportTicketId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the support ticket",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SupportTicket"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/supportTickets/{supportTicketId}/notes/{noteId}": {
      "delete": {
        "summary": "DeleteSupportTicketNote",
        "description": "Endpoint to delete a specific note from a support ticket. This function allows the removal of a note associated with a support ticket by specifying the ticket and note IDs. It is intended for use in applications where managing support ticket notes is required.",
        "parameters": [
          {
            "in": "path",
            "name": "supportTicketId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the support ticket",
            "required": true
          },
          {
            "in": "path",
            "name": "noteId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the note to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/members/{accountId}": {
      "post": {
        "summary": "AddThreadMember",
        "description": "Adds a member or moderator to a specified thread. This function allows the addition of a user to a thread with a specific role, either as a member or a moderator. It is designed to be used in applications where thread membership management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "$ref": "#/components/schemas/ThreadMemberRole"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ThreadMember"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveThreadMember",
        "description": "Endpoint to remove a member from a specific thread. This function facilitates the removal of a user from a thread by specifying the thread and account IDs. It is intended for use in applications where thread membership management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account to be removed",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetThreadMember",
        "description": "Retrieves detailed information about a specific member of a thread. This function is designed to fetch data for a particular thread member using their thread and account IDs. It is useful in applications where thread member details are required for display or processing.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ThreadMember"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/moderators/{accountId}": {
      "post": {
        "summary": "AddThreadModerator",
        "description": "Adds a member as a moderator to a specified thread and invalidates relevant queries. This function is used to promote a thread member to a moderator role within a thread, ensuring that the thread's moderator and member data are updated accordingly. It is designed for applications that manage user roles within discussion threads.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ThreadMember"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveThreadModerator",
        "description": "Endpoint to remove a moderator from a specific thread. This function allows the removal of a user's moderator role from a thread by specifying the thread and account IDs. It is useful in scenarios where thread moderation needs to be managed dynamically.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads": {
      "post": {
        "summary": "CreateThread",
        "description": "Endpoint to create a new thread within the application. This function allows users to initiate a new thread by providing necessary input data. It supports optional parameters for account IDs, a first message, and an image data URI. The function is designed to be used in scenarios where creating a new thread is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "thread": {
                    "$ref": "#/components/schemas/ThreadCreateInputs"
                  },
                  "accountIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "firstMessage": {
                    "type": "string"
                  },
                  "imageDataUri": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Thread"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetThreads",
        "description": "Endpoint to retrieve threads based on specified parameters such as access level, group ID, and event ID. This function allows users to fetch threads that match the given criteria, supporting both public and private access levels. It is designed to be used in applications where thread data needs to be filtered and retrieved efficiently.",
        "parameters": [
          {
            "in": "query",
            "name": "access",
            "schema": {
              "type": "string"
            },
            "description": "The access level of the threads (public or private)",
            "required": false
          },
          {
            "in": "query",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group to filter threads",
            "required": false
          },
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event to filter threads",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Thread"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}": {
      "delete": {
        "summary": "DeleteThread",
        "description": "Endpoint to delete a specific thread by its unique identifier. This function allows for the removal of a thread from the system, ensuring that associated cache entries are invalidated. It is designed to be used in applications where thread management and cleanup are required.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateThread",
        "description": "Endpoint to update an existing thread with new data. This function allows users to modify the details of a specific thread by providing the thread ID and the updated data. It supports optional image data URI for updating the thread's image. The function ensures that the thread data is updated in the cache if the operation is successful.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "thread": {
                    "$ref": "#/components/schemas/ThreadUpdateInputs"
                  },
                  "imageDataUri": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Thread"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Thread",
        "description": "This file contains functions for fetching and managing thread data. It provides an endpoint to retrieve a specific thread by its ID and utilizes connected single queries to retrieve data about threads. The functions in this file are designed to be used in applications that require access to thread data for display or processing purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Thread"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tiers/{tierId}/accounts/{accountId}": {
      "post": {
        "summary": "AddTierAccount",
        "description": "Endpoint to add an account to a specific tier within the system. This function allows the addition of an account to a designated tier by providing the tier and account identifiers. It is used in scenarios where account management and tier allocation are required.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tier"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "RemoveTierAccount",
        "description": "Endpoint to remove an account from a specified tier. This function facilitates the removal of an account from a given tier within the system. It is designed to be used in scenarios where account management within tiers is required.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tier"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tiers": {
      "post": {
        "summary": "CreateTier",
        "description": "Endpoint to create a new tier within the system. This function allows the creation of a tier by providing the necessary inputs. It is designed to be used in applications where tier management is required.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TierCreateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tier"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetTiers",
        "description": "This file contains functions for retrieving and managing tier information. It provides an endpoint to fetch a list of tiers with optional filtering by type. The functions in this file are designed to be used in applications where tier information is required.",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/TierType"
            },
            "description": "The type of tiers to retrieve",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tiers/{tierId}": {
      "delete": {
        "summary": "DeleteTier",
        "description": "Endpoint to delete a specific tier and invalidate related queries. This function allows the removal of a tier by its unique identifier and ensures that any cached queries related to tiers are invalidated. It is designed to be used in applications where tier management is required, ensuring data consistency by updating the cache.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateTier",
        "description": "Endpoint to update a specific tier within the system. This function allows for the modification of tier details by providing the tier ID and the updated tier inputs. It is designed to be used in applications where tier management is required, ensuring that the tier data is kept up-to-date.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tier",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TierUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tier"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetTier",
        "description": "Endpoint to retrieve a specific tier by its unique identifier. This function allows users to fetch details of a tier using the provided tier ID. It is designed to be used in applications where detailed information about a specific tier is required.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the tier to retrieve",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tier"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tiers/{tierId}/accounts": {
      "delete": {
        "summary": "RemoveTierAccounts",
        "description": "Endpoint to remove accounts from a specified tier. This function allows the removal of all accounts associated with a given tier ID. It is used in scenarios where accounts need to be disassociated from a tier within an application.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Tier"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetTierAccounts",
        "description": "Endpoint to retrieve a list of accounts associated with a specific tier. This function allows users to fetch accounts that belong to a particular tier, providing options for pagination, sorting, and searching. It is designed to be used in applications where tier-based account management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/videos/delete": {
      "post": {
        "summary": "DeleteManyVideos",
        "description": "Endpoint to delete multiple videos from the storage system. This function allows users to remove several videos at once by providing their IDs. It is designed for applications that require batch deletion of video content.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "videoIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/videos/{videoId}": {
      "delete": {
        "summary": "DeleteVideo",
        "description": "Endpoint to delete a specific video by its ID. This function allows for the removal of a video from the system, ensuring that associated queries are invalidated and removed. It is intended for use in applications where video management is required, providing a mechanism to delete videos securely.",
        "parameters": [
          {
            "in": "path",
            "name": "videoId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the video to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "nullable": true
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "UpdateVideo",
        "description": "Endpoint to update an existing video with new information. This function allows users to modify the details of a video by providing the video ID and the updated video inputs. It ensures that the video data is updated in the system and invalidates the relevant queries to maintain data consistency.",
        "parameters": [
          {
            "in": "path",
            "name": "videoId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the video to update",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoUpdateInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Video"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "GetVideo",
        "description": "Endpoint to retrieve video data by its unique identifier. This function allows users to fetch detailed information about a specific video using its ID. It is designed for applications that require access to video metadata and related information.",
        "parameters": [
          {
            "in": "path",
            "name": "videoId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the video",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Video"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/activities": {
      "get": {
        "summary": "GetAccountActivities",
        "description": "Endpoint to retrieve a list of activities associated with a specific account. This function fetches activity data for a given account, allowing users to view detailed activity logs. It is designed to be used in applications where tracking account activities is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/auth-sessions": {
      "get": {
        "summary": "GetAccountAuthSessions",
        "description": "Retrieves authentication sessions for a specific account. This endpoint allows fetching a list of authentication sessions associated with a given account ID. It is useful for applications that need to display or manage authentication sessions for user accounts.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuthSession"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/cognito/{username}": {
      "get": {
        "summary": "GetAccountCognitoUser",
        "description": "Endpoint to retrieve a Cognito user associated with a specific account using their username. This function allows fetching detailed information about a Cognito user linked to an account. It is useful in scenarios where user-specific data is required for account management or user verification.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "description": "The username of the Cognito user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/CognitoUser"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/cognito": {
      "get": {
        "summary": "GetAccountCognitoUsers",
        "description": "Retrieves the Cognito users associated with a specific account. This function fetches a list of Cognito users linked to a given account ID, providing detailed user information for applications that require user management capabilities.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CognitoUser"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/comments": {
      "get": {
        "summary": "GetAccountComments",
        "description": "Endpoint to retrieve a list of comments associated with a specific account, supporting pagination and filtering options. This function is designed to facilitate the fetching of account comments, allowing for efficient data retrieval in applications that require comment management or display.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/delegate-of": {
      "get": {
        "summary": "GetAccountDelegateOf",
        "description": "Endpoint to retrieve a list of accounts and their delegate relationships. This function fetches accounts that are delegates of a specified account, providing detailed information about these relationships. It is designed for applications that need to manage or display delegate relationships for user accounts.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/delegates": {
      "get": {
        "summary": "GetAccountDelegates",
        "description": "Retrieves a list of delegates associated with a specific account. This function is designed to fetch account delegates, providing detailed information about each delegate. It is useful in scenarios where an application needs to display or manage account delegates.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/email-receipts": {
      "get": {
        "summary": "GetAccountEmailReceipts",
        "description": "Endpoint to retrieve a list of email receipts associated with a specific account. This function allows users to fetch email receipt data for an account, with optional filtering by receipt status. It is designed to be used in applications where tracking email communications for an account is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/EmailReceiptStatus"
            },
            "description": "Optional filtering by email receipt status",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailReceipt"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/events": {
      "get": {
        "summary": "GetAccountEvents",
        "description": "Endpoint to manage and fetch events associated with a specific account. This function allows retrieval of events for a given account, with an option to filter for past events. It is designed to be used in applications where event data for accounts is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "past",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional flag to filter past events",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/followers": {
      "get": {
        "summary": "GetAccountFollowers",
        "description": "Retrieves a list of followers for a specific account. This function fetches followers associated with a given account ID, allowing applications to display or process follower data. It is designed to be used in scenarios where follower information is needed for a particular account.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/following": {
      "get": {
        "summary": "GetAccountFollowing",
        "description": "Endpoint to retrieve a list of accounts that a specified account is following. This function is used to fetch the accounts that are being followed by a particular account, providing a way to access the following list of a user.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/groups": {
      "get": {
        "summary": "GetAccountGroups",
        "description": "Retrieves a list of groups associated with a specific account. This function fetches group membership details for a given account, allowing applications to display or manage account groups. It is designed to be used in scenarios where group information for an account is needed.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupMembership"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/interests": {
      "get": {
        "summary": "GetAccountInterests",
        "description": "Endpoint to fetch interests associated with a specific account. This function provides the ability to retrieve account interests with support for optional filtering and pagination. It is useful for applications that need to display or process interest data linked to user accounts.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Interest"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/leads": {
      "get": {
        "summary": "GetAccountLeads",
        "description": "Endpoint to retrieve a list of leads associated with a specific account. This function allows users to fetch account leads with optional filtering by lead status and event ID. It is designed to be used in applications where detailed information about account leads is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/LeadStatus"
            },
            "description": "Optional filtering by lead status",
            "required": false
          },
          {
            "in": "query",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "Optional filtering by event ID",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Lead"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/levels": {
      "get": {
        "summary": "GetAccountLevels",
        "description": "Retrieves a list of levels associated with a specific account. This function is designed to fetch account levels using infinite query pagination, allowing for efficient data retrieval and management. It is suitable for applications that require detailed information about account levels.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Level"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/likes": {
      "get": {
        "summary": "GetAccountLikes",
        "description": "Retrieves a list of likes associated with a specific account. This function fetches likes for a given account using an infinite query, allowing for paginated data retrieval. It is useful in scenarios where an application needs to display or process the likes related to an account.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/payments": {
      "get": {
        "summary": "GetAccountPayments",
        "description": "Retrieves a list of payments associated with a specific account. This function fetches payment data for a given account ID, supporting pagination and sorting options. It is intended for use in applications that require detailed payment history for user accounts.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Payment"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/reshares": {
      "get": {
        "summary": "GetAccountReshares",
        "description": "Fetches a list of reshares for a specific account. This function retrieves data about account reshares, allowing applications to display or process reshare activities associated with a given account. It is designed to be used in scenarios where understanding the reshare activity of an account is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/subscriptions": {
      "get": {
        "summary": "GetAccountSubscriptions",
        "description": "Endpoint to retrieve a list of subscriptions associated with a specific account. This function allows users to fetch subscription details for a given account ID. It is designed to be used in applications where account subscription information is required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Subscription"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/tiers": {
      "get": {
        "summary": "GetAccountTiers",
        "description": "Endpoint to retrieve a list of account tiers for a specific account. This function allows users to fetch tier information associated with an account, which can be filtered by an optional account type. It is designed to be used in applications where account tier details are required.",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/TierType"
            },
            "description": "Optional tier type",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/activities": {
      "get": {
        "summary": "GetActivities",
        "description": "Endpoint to retrieve a list of activities. This function fetches a paginated list of activities from the server, allowing for optional sorting and searching. It is designed to be used in applications where activity data needs to be displayed or processed.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/comments": {
      "get": {
        "summary": "GetActivityComments",
        "description": "Endpoint to fetch comments associated with a specific activity. This function retrieves a list of comments for a given activity, allowing users to view discussions or feedback related to that activity. It is designed to be used in applications where activity-related comments need to be displayed or managed.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activity",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/interests": {
      "get": {
        "summary": "GetActivityInterests",
        "description": "Retrieves a list of interests associated with a specific activity. This function is used to fetch interests for a given activity, allowing applications to display or process these interests. It supports infinite scrolling through pagination parameters.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activity",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Interest"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/likes": {
      "get": {
        "summary": "GetActivityLikes",
        "description": "Endpoint to retrieve a list of likes for a specific activity. This function fetches likes associated with a given activity ID, allowing users to view who has liked a particular activity. It is designed for applications that require displaying or processing likes data for activities.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activity",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Like"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/reshares": {
      "get": {
        "summary": "GetActivityReshares",
        "description": "Retrieves a list of reshares for a specific activity. This function is used to fetch reshare data associated with a particular activity, allowing applications to display or process reshare information.",
        "parameters": [
          {
            "in": "path",
            "name": "activityId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the activity",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/advertisements/{advertisementId}/clicks": {
      "get": {
        "summary": "GetAdvertisementClicks",
        "description": "Endpoint to retrieve click data for a specific advertisement. This function fetches detailed information about user interactions with an advertisement, specifically the clicks it has received. It is useful for analyzing advertisement performance and user engagement.",
        "parameters": [
          {
            "in": "path",
            "name": "advertisementId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the advertisement",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdvertisementClick"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/advertisements/{advertisementId}/views": {
      "get": {
        "summary": "GetAdvertisementViews",
        "description": "Fetches views for a specific advertisement by its ID. This function utilizes a connected infinite query to retrieve data about views associated with a particular advertisement. It is designed to be used in applications where detailed information about advertisement views is required.",
        "parameters": [
          {
            "in": "path",
            "name": "advertisementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the advertisement",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdvertisementView"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/announcements/{announcementId}/audience": {
      "get": {
        "summary": "GetAnnouncementAudience",
        "description": "Endpoint to fetch the audience for a specific announcement. This function retrieves the list of audience members associated with a given announcement ID. It is designed to be used in applications where understanding the reach or participants of an announcement is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "announcementId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the announcement",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BaseAccount"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/announcements/{announcementId}/email-receipts": {
      "get": {
        "summary": "GetAnnouncementEmailReceipts",
        "description": "Endpoint to manage and retrieve email receipts associated with a specific announcement. This function allows users to fetch email receipt details for a given announcement, with optional filtering by status. It is designed to be used in applications where tracking the status of announcement email deliveries is required.",
        "parameters": [
          {
            "in": "path",
            "name": "announcementId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the announcement",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/EmailReceiptStatus"
            },
            "description": "Optional status of the email receipt",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailReceipt"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/api/{logId}": {
      "get": {
        "summary": "GetAPILog",
        "description": "Endpoint to retrieve details of a specific API log entry by its unique identifier. This function allows users to fetch comprehensive information about a particular API log entry. It is designed for applications that require detailed logging information for auditing or debugging purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "logId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the log entry",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/APILog"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/api": {
      "get": {
        "summary": "GetAPILogs",
        "description": "Endpoint to retrieve API logs with various filtering options. This function allows users to fetch API logs based on specific criteria such as date range, HTTP method, status, source, user ID, and account ID. It is designed to be used in applications where monitoring and analyzing API usage is required.",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "The start date for filtering logs",
            "required": true
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "The end date for filtering logs",
            "required": true
          },
          {
            "in": "query",
            "name": "method",
            "schema": {
              "type": "string"
            },
            "description": "Optional HTTP method for filtering logs",
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/ApiLogStatus"
            },
            "description": "Optional status for filtering logs",
            "required": false
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "type": "string"
            },
            "description": "Optional source for filtering logs",
            "required": false
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "Optional user ID for filtering logs",
            "required": false
          },
          {
            "in": "query",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Optional account ID for filtering logs",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BaseAPILog"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/auth-sessions/{authSessionId}": {
      "get": {
        "summary": "GetAuthSession",
        "description": "Endpoint to fetch data for a specific authentication session. This function retrieves detailed information about an authentication session using its unique identifier. It is intended for use in applications that require access to authentication session details.",
        "parameters": [
          {
            "in": "path",
            "name": "authSessionId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the authentication session",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/AuthSession"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/auth-sessions": {
      "get": {
        "summary": "GetAuthSessions",
        "description": "Endpoint to retrieve a list of authentication sessions. This function fetches authentication session data, which can be used to monitor and manage user sessions. It is designed for applications that require detailed tracking of user authentication activities.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuthSession"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/benefits/{benefitId}/clicks": {
      "get": {
        "summary": "GetBenefitClicks",
        "description": "Retrieves click data for a specific benefit. This function fetches detailed click information associated with a given benefit ID. It is designed to be used in applications where tracking user interactions with benefits is required.",
        "parameters": [
          {
            "in": "path",
            "name": "benefitId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the benefit",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BenefitClick"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/activities": {
      "get": {
        "summary": "GetChannelActivities",
        "description": "Endpoint to retrieve activities within a specific channel. This function fetches a list of activities associated with a given channel ID, allowing users to view and manage channel-specific activities. It is designed for applications that require detailed activity logs for channels.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/contents/{contentId}/activities": {
      "get": {
        "summary": "GetChannelContentActivities",
        "description": "Fetches activities related to specific channel content, with support for pagination and filtering. This function is designed to retrieve a list of activities associated with a given channel and content ID. It is useful for applications that need to display or process activity logs or records for specific content.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/contents/{contentId}/likes": {
      "get": {
        "summary": "GetChannelContentLikes",
        "description": "Fetches the likes for a specific piece of content within a channel. This function supports pagination and filtering, allowing users to retrieve likes data efficiently. It is designed to be used in applications where understanding user engagement with channel content is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "channelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the channel",
            "required": true
          },
          {
            "in": "path",
            "name": "contentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the content",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelContentLike"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/contents": {
      "get": {
        "summary": "GetContents",
        "description": "Endpoint to retrieve a list of content items with optional filters for featured status, content type, and past events. This function allows users to fetch content such as videos, audios, or articles, and filter them based on whether they are featured or past events. It is designed to be used in applications where content needs to be dynamically loaded and filtered.",
        "parameters": [
          {
            "in": "query",
            "name": "featured",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional flag to filter featured contents",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ContentType"
            },
            "description": "Optional type of content",
            "required": false
          },
          {
            "in": "query",
            "name": "past",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional flag to filter past contents",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelContent"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/channels/featured": {
      "get": {
        "summary": "GetFeaturedChannels",
        "description": "Retrieves a list of featured channels from the server. This function is designed to fetch and return a paginated list of channels that are marked as featured. It is useful for applications that need to display a curated list of channels to users.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Channel"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/email-receipts/{emailReceiptId}": {
      "get": {
        "summary": "GetEmailReceipt",
        "description": "Fetches details of a specific email receipt by its unique ID. This function is used to retrieve detailed information about an email receipt, which can be useful for tracking and auditing email communications.",
        "parameters": [
          {
            "in": "path",
            "name": "emailReceiptId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the email receipt",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/EmailReceipt"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/logs/email-receipts": {
      "get": {
        "summary": "GetEmailReceipts",
        "description": "Endpoint to retrieve a list of email receipts with optional filtering by status. This function allows users to fetch email receipt records, which can be filtered by their status if desired. It is designed to be used in applications where tracking and managing email receipts is necessary.",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Optional status to filter email receipts",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailReceipt"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/addOns/{addOnId}/passTypes": {
      "get": {
        "summary": "GetEventAddOnPassTypes",
        "description": "Retrieves a list of pass types associated with a specific event add-on. This function is used to fetch various pass types that are available for a given event add-on, allowing applications to display or manage these pass types as needed.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPassType"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/addOns/{addOnId}/passes": {
      "get": {
        "summary": "GetEventAddOnPasses",
        "description": "Retrieves a list of passes associated with a specific event add-on. This function is designed to fetch passes for a given event and its add-on, providing detailed information about each pass. It is useful for applications that need to display or manage event add-on passes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/addOns/{addOnId}/tiers": {
      "get": {
        "summary": "GetEventAddOnTiers",
        "description": "Endpoint to retrieve a list of tiers for a specific event add-on. This function fetches tiers associated with an event add-on, allowing filtering based on whether only allowed tiers should be included. It is useful for applications that need to display or manage tiers related to event add-ons.",
        "parameters": [
          {
            "in": "query",
            "name": "allowed",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if only allowed tiers should be fetched",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "addOnId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the add-on",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/reservations": {
      "get": {
        "summary": "GetEventAttendeeReservations",
        "description": "Endpoint to retrieve a list of reservations for event attendees. This function fetches reservations associated with a specific event and account, allowing users to view detailed reservation information for attendees.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventRoomTypeReservation"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/reservations/{reservationId}/passes": {
      "get": {
        "summary": "GetEventReservationPasses",
        "description": "Fetches and manages event reservation passes for a specific event and reservation. This function is used to retrieve and set data related to passes associated with event reservations. It is designed to be used in applications that require detailed information about event reservation passes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "reservationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the reservation",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/coupons": {
      "get": {
        "summary": "GetEventAttendeeCoupons",
        "description": "Fetches coupons associated with event attendees for a specific event and account. This function is designed to retrieve a list of coupons that are linked to attendees of a given event, filtered by the event ID and account ID. It also provides an optional filter for pre-paid status. This is useful in scenarios where event organizers need to manage or review coupons distributed to attendees.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "prePaid",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional flag to filter by pre-paid status",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Coupon"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/payments": {
      "get": {
        "summary": "GetEventAttendeePayments",
        "description": "Fetches payments for a specific event attendee with pagination and filtering capabilities. This function is designed to retrieve payment details associated with an event attendee, allowing for paginated and filtered results. It is useful in scenarios where detailed payment information is required for event management applications.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Payment"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/transfers/logs": {
      "get": {
        "summary": "GetEventAttendeeTransfersLogs",
        "description": "Endpoint to retrieve a list of attendee transfer logs for a specific event and account. This function fetches the transfer logs associated with attendees of a given event and account. It is useful for tracking and managing attendee transfers within an event context.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TransferLog"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}/attendee/passes": {
      "get": {
        "summary": "GetEventPassAttendeePasses",
        "description": "Endpoint to retrieve a list of attendee passes for a specific event pass. This function allows users to fetch attendee pass details associated with a particular event and pass ID. It is designed to be used in applications where information about event pass attendees is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/EventPassStatus"
            },
            "description": "Optional status of the event pass",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/coHosts": {
      "get": {
        "summary": "GetEventCoHosts",
        "description": "Retrieves a list of co-hosts for a specified event. This function fetches data about co-hosts associated with a particular event, allowing users to view and manage event co-hosts. It is designed for applications that require detailed information about event co-hosts.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/coupons/{couponId}/passes": {
      "get": {
        "summary": "GetEventCouponPasses",
        "description": "Fetches a list of event coupon passes for a specific event and coupon. This function retrieves data about passes associated with a given event and coupon, allowing applications to display or process this information as needed.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "couponId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the coupon",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/zpl-template/fields": {
      "get": {
        "summary": "GetEventZplTemplateBadgeFields",
        "description": "Endpoint to manage fetching and updating of ZPL template badge fields for events. This function allows for the retrieval of on-site badge fields associated with a specific event's ZPL template. It is designed to be used in applications where event-specific badge field data is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventOnSiteBadgeField"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/pages/{pageId}/images": {
      "get": {
        "summary": "GetEventPageImages",
        "description": "Fetches images associated with a specific event page. This function retrieves a list of images for a given event and page, allowing users to access visual content related to the event. It is designed to be used in applications where event-related images need to be displayed or managed.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "pageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the page",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Image"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/addOns": {
      "get": {
        "summary": "GetEventPassTypeAddOns",
        "description": "Fetches add-ons for a specific event pass type with support for pagination and filtering. This function is designed to retrieve additional features or services associated with a particular event pass type. It supports pagination and filtering to efficiently manage and access large sets of add-on data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventAddOn"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/coupons": {
      "get": {
        "summary": "GetEventPassTypeCoupons",
        "description": "Fetches coupons associated with a specific event pass type. This function retrieves a list of coupons linked to a particular event pass type, allowing users to manage and view available discounts or offers for event attendees. It is designed to be used in applications that require detailed coupon information for event management and promotion purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Coupon"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/passes": {
      "get": {
        "summary": "GetEventPassTypePasses",
        "description": "Endpoint to retrieve event pass type passes for a specific event and pass type. This function allows users to fetch passes associated with a particular event and pass type, with an optional filter for checked-in status. It is designed to be used in applications where event management and pass tracking are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "query",
            "name": "checkedIn",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional filtering by checkedIn status",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passTypes/{passTypeId}/tiers": {
      "get": {
        "summary": "GetEventPassTypeTiers",
        "description": "Retrieves event pass type tiers with optional filtering for allowed tiers. This function fetches tiers associated with a specific event and pass type, providing the ability to filter based on whether the tiers are allowed. It is useful for applications that need to display or manage tiers for event pass types with specific filtering criteria.",
        "parameters": [
          {
            "in": "query",
            "name": "allowed",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if only allowed tiers should be fetched",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass type",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}/addOns": {
      "get": {
        "summary": "GetEventPassAddOns",
        "description": "Endpoint to retrieve add-ons associated with a specific event pass. This function allows users to fetch a list of add-ons for a given event pass, providing additional options or features that can be associated with the event.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventAddOn"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/attendees/{accountId}/passes/{passId}/questions": {
      "get": {
        "summary": "GetEventPassQuestionSections",
        "description": "Retrieves the question sections associated with a specific event pass. This endpoint is used to fetch detailed information about the question sections for a given event pass, which is part of an attendee's registration process. It is essential for applications that need to display or process the question sections related to event passes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the account",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationSection"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}/responses/{questionId}": {
      "get": {
        "summary": "GetEventPassResponse",
        "description": "Retrieves a specific response for a question associated with an event's pass. This function is designed to fetch detailed information about a particular response to a question linked to an event pass. It is useful in scenarios where precise data about event pass responses is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RegistrationQuestionResponse"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}/responses/{questionId}/changes": {
      "get": {
        "summary": "GetEventPassResponseChanges",
        "description": "Fetches the changes made to event pass responses, providing capabilities for pagination and filtering. This function is designed to retrieve a list of changes associated with a specific event pass response question. It is useful for applications that need to track modifications over time for auditing or review purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestionResponseChange"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}/responses": {
      "get": {
        "summary": "GetEventPassResponses",
        "description": "Endpoint to retrieve responses for registration questions associated with a specific event pass. This function fetches the responses to registration questions for a given event and pass, allowing users to analyze and process the collected data.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestionResponse"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes/{passId}/transfers/logs": {
      "get": {
        "summary": "GetEventPassTransferLogs",
        "description": "Retrieves the transfer logs for a specific event pass, supporting pagination and filtering. This function is designed to fetch detailed logs of transfers associated with a particular event pass. It supports pagination and filtering to allow for efficient data retrieval and management.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "passId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the pass",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TransferLog"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/passes": {
      "get": {
        "summary": "GetEventPasses",
        "description": "Endpoint to retrieve a list of event passes for a specific event. This function allows users to fetch event passes, with an optional filter for checked-in status. It is designed to be used in applications where event pass details are required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "checkedIn",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional filtering by checkedIn status",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/choices/{choiceId}/subQuestions": {
      "get": {
        "summary": "GetEventQuestionChoiceSubQuestions",
        "description": "Fetches sub-questions associated with a specific event question choice. This endpoint is used to retrieve detailed sub-question data for a given choice within an event's question. It is particularly useful in scenarios where understanding the hierarchical structure of event questions is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "path",
            "name": "choiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the choice",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestionChoiceSubQuestion"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/responses": {
      "get": {
        "summary": "GetEventQuestionResponses",
        "description": "Fetches responses for a specific event question with optional filtering. This function allows retrieval of responses associated with a particular event question, providing options for pagination and sorting. It is useful for applications that need to display or process responses to event questions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the question",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationQuestionResponse"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/summary": {
      "get": {
        "summary": "GetEventQuestionSummaries",
        "description": "Retrieves a list of summaries for questions associated with a specific event. This function is designed to fetch detailed summaries of questions for a given event, which can be used in applications that require insights into event-related questions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SummaryData"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/questions/{questionId}/summary": {
      "get": {
        "summary": "GetEventQuestionSummary",
        "description": "Fetches summary data for a specific event question, providing various chart types such as bar, line, table, and count. This function is designed to retrieve detailed summary information for a question within an event, which can be used for data visualization and analysis.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "questionId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the question",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/SummaryData"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/roomTypes/{roomTypeId}/passes": {
      "get": {
        "summary": "GetEventRoomTypePasses",
        "description": "Endpoint to retrieve passes for a specific event room type. This function fetches a list of passes associated with a given event and room type, allowing users to manage or view passes for specific event room types.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the room type",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPass"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/roomTypes/{roomTypeId}/tiers": {
      "get": {
        "summary": "GetEventRoomTypeTiers",
        "description": "Endpoint to retrieve tiers for a specific room type within an event. This function allows users to fetch either allowed or disallowed tiers associated with a given room type in an event. It is designed to be used in applications where detailed tier information is required for event room types.",
        "parameters": [
          {
            "in": "query",
            "name": "allowed",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if only allowed tiers should be fetched",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "roomTypeId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the room type",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/addOns": {
      "get": {
        "summary": "GetEventSectionAddOns",
        "description": "Fetches add-ons for a specific event section, supporting pagination and filtering. This function is designed to retrieve a list of add-ons associated with a particular event section. It supports pagination and filtering to allow for efficient data retrieval and management.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventAddOn"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/passTypes": {
      "get": {
        "summary": "GetEventSectionPassTypes",
        "description": "Fetches pass types for a specific event section with pagination support. This function is designed to retrieve different pass types available for a given event section, allowing for paginated data fetching to efficiently handle large datasets. It is useful in scenarios where detailed information about event pass types is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventPassType"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/questions": {
      "get": {
        "summary": "GetEventSectionQuestions",
        "description": "Fetches questions for a specific event section with support for pagination and filtering. This function is designed to retrieve a list of questions associated with a particular event section, allowing for detailed data retrieval with options for pagination and filtering. It is useful in scenarios where event-specific questions need to be displayed or processed.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the section",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RegistrationSectionQuestion"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sections/{sectionId}/tiers": {
      "get": {
        "summary": "GetEventSectionTiers",
        "description": "Fetches tiers for a specific event section based on the provided parameters. This function retrieves a list of tiers associated with a given event section, allowing for filtering based on whether only allowed tiers should be included. It is useful for applications that need to display or manage tier information for event sections.",
        "parameters": [
          {
            "in": "query",
            "name": "allowed",
            "schema": {
              "type": "boolean"
            },
            "description": "Indicates if only allowed tiers should be fetched",
            "required": true
          },
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sectionId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the section",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessionLocations/{locationId}/sessions": {
      "get": {
        "summary": "GetEventSessionLocationSessions",
        "description": "Endpoint to fetch sessions for a specific event location. This function retrieves a list of sessions associated with a particular event location, allowing users to access detailed session information for event management purposes.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "locationId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the location",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSession"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/accounts": {
      "get": {
        "summary": "GetEventSessionAccounts",
        "description": "Fetches a list of accounts associated with a specific event session. This function is used to retrieve account details for a given event and session, allowing for pagination and filtering options. It is designed for applications that need to manage or display accounts linked to event sessions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/speakers": {
      "get": {
        "summary": "GetEventSessionSpeakers",
        "description": "Fetches speakers for a specific event session. This function retrieves a list of speakers associated with a given event session, allowing applications to display or process speaker information for that session.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSpeaker"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/sponsors": {
      "get": {
        "summary": "GetEventSessionSponsors",
        "description": "Fetches a list of sponsors for a specific event session. This function retrieves sponsor information associated with a given event session, allowing users to view all sponsors linked to a particular session within an event.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionId}/tracks": {
      "get": {
        "summary": "GetEventSessionTracks",
        "description": "Fetches tracks for a specific event session with support for pagination and filtering. This function is designed to retrieve a list of tracks associated with a given event session, allowing for detailed exploration of session content. It supports pagination and filtering to efficiently manage and access large datasets.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "sessionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the session",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventTrack"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/speakers/{speakerId}/sessions": {
      "get": {
        "summary": "GetEventSpeakerSessions",
        "description": "Fetches sessions for a specific speaker at a given event. This function retrieves a list of sessions associated with a particular speaker within an event, allowing users to view detailed session information. It is designed for applications that need to display or manage event speaker sessions.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "speakerId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the speaker",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSession"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sponsors/accounts": {
      "get": {
        "summary": "GetEventSponsorAccounts",
        "description": "Fetches the list of sponsor accounts for a specific event, supporting pagination and filtering. This function is designed to retrieve sponsor account details associated with a given event, allowing for efficient data handling through pagination and optional filtering parameters. It is intended for use in applications that require detailed sponsor account information for events.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sponsors": {
      "get": {
        "summary": "GetEventSponsors",
        "description": "Retrieves a list of sponsors for a specified event. This function fetches sponsor details associated with a particular event, allowing users to view and manage event sponsors. It is designed for applications that require detailed information about event sponsorships.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/tracks/{trackId}/sessions": {
      "get": {
        "summary": "GetEventTrackSessions",
        "description": "Retrieves a list of sessions for a specific event track. This function fetches session data associated with a given event and track, allowing users to access detailed information about each session within the track.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventSession"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/tracks/{trackId}/sponsors": {
      "get": {
        "summary": "GetEventTrackSponsors",
        "description": "Endpoint to retrieve a list of sponsors for a specific event track. This function allows users to fetch sponsors associated with a particular event track by providing the event and track IDs. It is designed to be used in applications where information about event track sponsors is required.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "path",
            "name": "trackId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the track",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/activities": {
      "get": {
        "summary": "GetEventActivities",
        "description": "Fetches a list of activities associated with a specific event. This function is designed to retrieve paginated activity data for a given event, allowing users to view detailed activity information related to that event.",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the event",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/featured": {
      "get": {
        "summary": "GetFeaturedEvents",
        "description": "Retrieves a list of featured events with support for pagination and filtering. This function is designed to fetch events that are marked as featured, allowing users to view them with various filtering options. It is useful in applications where showcasing highlighted events is necessary.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/events/unapproved": {
      "get": {
        "summary": "GetUnapprovedEvents",
        "description": "Endpoint to fetch a list of unapproved events. This function retrieves events that have not yet been approved, allowing users to review and manage pending events. It is designed to be used in applications where event moderation is required.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/activities": {
      "get": {
        "summary": "GetGroupActivities",
        "description": "Endpoint to fetch activities for a specific group. This function retrieves a list of activities associated with a given group ID. It is designed to be used in applications where tracking or displaying group activities is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/events": {
      "get": {
        "summary": "GetGroupEvents",
        "description": "Endpoint to retrieve a list of events associated with a specific group. This function allows users to fetch events for a group, with an option to filter for past events. It is designed to be used in applications where event management and tracking are required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "query",
            "name": "past",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional flag to filter past events",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/interests": {
      "get": {
        "summary": "GetGroupInterests",
        "description": "Endpoint to retrieve a list of interests associated with a specific group. This function fetches interests for a given group, allowing applications to display or process group-related interests. It is designed to be used in scenarios where understanding or displaying group interests is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Interest"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/invitations": {
      "get": {
        "summary": "GetGroupInvitations",
        "description": "Endpoint to manage and retrieve group invitations for a specific group. This function allows users to fetch a list of invitations associated with a group, optionally filtered by the invitation status. It is useful for applications that need to display or manage group invitations.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/GroupInvitationStatus"
            },
            "description": "Optional status of the group invitation",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupInvitation"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/members": {
      "get": {
        "summary": "GetGroupMembers",
        "description": "Retrieves the list of members belonging to a specific group. This function is used to fetch group membership details, providing a paginated list of members. It is designed for applications that need to display or manage group members.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupMembership"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/moderators": {
      "get": {
        "summary": "GetGroupModerators",
        "description": "Retrieves a list of moderators for a specified group. This function fetches the moderators associated with a particular group, allowing applications to display or manage group moderators.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupMembership"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/requests": {
      "get": {
        "summary": "GetGroupRequests",
        "description": "Endpoint to retrieve and manage group requests for a specific group. This function allows users to fetch and handle requests associated with a group, filtered by request status. It is designed to be used in applications where managing group membership requests is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/GroupRequestStatus"
            },
            "description": "The status of the group request",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GroupRequest"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/sponsors": {
      "get": {
        "summary": "GetGroupSponsors",
        "description": "Endpoint to retrieve a list of sponsors associated with a specific group. This function allows users to fetch sponsor details for a given group by providing the group ID. It is designed to be used in applications where information about group sponsors is required.",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the group",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/images/{imageId}/usage": {
      "get": {
        "summary": "GetImageUsage",
        "description": "Retrieves usage data for a specific image. This function fetches detailed usage statistics for an image, including counts of associated accounts, events, sessions, groups, usage, speakers, and tickets. It is intended for use in applications that require insights into how an image is being utilized across different entities.",
        "parameters": [
          {
            "in": "path",
            "name": "imageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the image",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ImageUsage"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/imports/{importId}": {
      "get": {
        "summary": "GetImport",
        "description": "Provides functionality for retrieving and managing import data within the application. This module includes methods to fetch import details by ID and update the query cache with the retrieved data. It is designed to be used in scenarios where import data needs to be accessed or manipulated.",
        "parameters": [
          {
            "in": "path",
            "name": "importId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the import",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Import"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/imports/{importId}/items": {
      "get": {
        "summary": "GetImportItems",
        "description": "Endpoint to retrieve a list of import items associated with a specific import ID. This function is designed to fetch import items, which are part of a larger import process, allowing users to manage and review the items being imported.",
        "parameters": [
          {
            "in": "path",
            "name": "importId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the import",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ImportItem"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/imports": {
      "get": {
        "summary": "GetImports",
        "description": "Retrieves a list of imports, optionally filtered by a specific tier ID. This function is designed to fetch import data, which can be filtered by tier, and is suitable for applications that require paginated import data retrieval.",
        "parameters": [
          {
            "in": "query",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier to filter imports",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Import"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/interests/{interestId}/accounts": {
      "get": {
        "summary": "GetInterestAccounts",
        "description": "Fetches a list of accounts associated with a specific interest. This function is designed to retrieve account data linked to a particular interest, allowing applications to display or process information related to these accounts.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/interests/{interestId}/activities": {
      "get": {
        "summary": "GetInterestActivities",
        "description": "Endpoint to retrieve a list of activities associated with a specific interest. This function is designed to fetch activities related to a given interest ID, providing a paginated and optionally sorted list of activities. It is useful for applications that need to display or process activities linked to specific interests.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/interests/{interestId}/channels": {
      "get": {
        "summary": "GetInterestChannels",
        "description": "Fetches the channels associated with a specific interest. This function is used to retrieve a list of channels linked to a given interest ID. It supports infinite scrolling and can be used in applications where channel data needs to be displayed dynamically.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Channel"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/interests/{interestId}/contents": {
      "get": {
        "summary": "GetInterestContents",
        "description": "Endpoint to fetch the contents associated with a specific interest. This function retrieves a list of content items related to a given interest ID, allowing users to explore and interact with content categorized under specific interests. It is designed to be used in applications where content needs to be dynamically loaded based on user interests.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChannelContent"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/interests/{interestId}/events": {
      "get": {
        "summary": "GetInterestEvents",
        "description": "Fetches events associated with a specific interest. This function is designed to retrieve a list of events that are related to a given interest, identified by its ID. It is useful for applications that need to display or process events linked to particular interests.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/interests/{interestId}/groups": {
      "get": {
        "summary": "GetInterestGroups",
        "description": "Endpoint to retrieve a list of groups associated with a specific interest. This function allows users to fetch groups that are linked to a particular interest by providing the interest ID. It is designed to be used in applications where categorization or grouping of interests is required.",
        "parameters": [
          {
            "in": "path",
            "name": "interestId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the interest",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Group"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/payments/{paymentId}": {
      "get": {
        "summary": "GetInvoicePayment",
        "description": "Fetches a specific payment associated with a given invoice. This function is designed to retrieve detailed information about a particular payment linked to an invoice. It is useful in scenarios where precise payment details are required for an invoice.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the invoice",
            "required": true
          },
          {
            "in": "path",
            "name": "paymentId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the payment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Payment"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/payments": {
      "get": {
        "summary": "GetInvoicePayments",
        "description": "Endpoint to retrieve a list of payments associated with a specific invoice. This function allows users to fetch payment details for a given invoice by its ID. It is designed to be used in applications where payment information for invoices is required.",
        "parameters": [
          {
            "in": "path",
            "name": "invoiceId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the invoice",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Payment"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/levels/{sponsorshipLevelId}": {
      "get": {
        "summary": "GetLevel",
        "description": "Fetches details for a specific sponsorship level by its ID. This function is used to retrieve detailed information about a particular sponsorship level within the system. It is designed to be utilized in applications where such detailed level information is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "sponsorshipLevelId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the sponsorship level",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Level"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/levels/{levelId}/accounts": {
      "get": {
        "summary": "GetLevelAccounts",
        "description": "Endpoint to retrieve a list of accounts associated with a specific level. This function is designed to fetch account details for a given level, which can be used in applications that require information about accounts linked to different levels within an organization.",
        "parameters": [
          {
            "in": "path",
            "name": "levelId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the level",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/modules/{moduleType}/editableTiers": {
      "get": {
        "summary": "GetOrganizationModuleEditableTiers",
        "description": "Fetches editable tiers for a specified organization module type. This function is used to retrieve a list of tiers that can be edited within a given organization module. It is particularly useful for applications that need to manage or display editable tiers for different modules.",
        "parameters": [
          {
            "in": "path",
            "name": "moduleType",
            "schema": {
              "$ref": "#/components/schemas/OrganizationModuleType"
            },
            "description": "The type of the organization module",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/modules/{moduleType}/enabledTiers": {
      "get": {
        "summary": "Organization",
        "description": "This file contains functions for retrieving and managing organization module enabled tiers. It provides endpoints for fetching enabled tiers for a specific organization module and updating the query data. The functions in this file are designed to be used in applications that need to display or manage the tiers available for different modules.",
        "parameters": [
          {
            "in": "path",
            "name": "moduleType",
            "schema": {
              "$ref": "#/components/schemas/OrganizationModuleType"
            },
            "description": "The type of the organization module",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/modules": {
      "get": {
        "summary": "GetOrganizationModules",
        "description": "Endpoint to retrieve and manage organization modules. This function provides the ability to fetch a list of modules associated with an organization. It is designed to be used in applications that require dynamic access to organization-specific modules.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationModule"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/payments/{paymentId}": {
      "get": {
        "summary": "GetPayment",
        "description": "Fetches detailed information about a specific payment using its unique identifier. This function is part of the payment management system and allows retrieval of payment details for further processing or display. It is designed to be used in applications where payment information needs to be accessed or verified.",
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the payment",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Payment"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "summary": "GetPayments",
        "description": "Fetches a list of payments with optional filtering and pagination parameters. This function allows retrieval of payment records, supporting features like pagination and sorting. It is designed for use in applications that require access to payment data with flexible query options.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Payment"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/tax": {
      "get": {
        "summary": "GetTaxIntegrations",
        "description": "Endpoint to retrieve a list of tax integrations for an organization. This function fetches tax integration data, which can be used to manage and display tax-related information within an organization. It supports pagination and sorting to efficiently handle large datasets.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaxIntegration"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/payment/{type}/link": {
      "get": {
        "summary": "OrganizationPaymentIntegration",
        "description": "This file contains functions for retrieving and managing organization payment integration links. It provides a way to fetch the URL link associated with a particular payment integration type, allowing organizations to access or manage their payment integrations effectively.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/PaymentIntegrationType"
            },
            "description": "The type of payment integration",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/payment": {
      "get": {
        "summary": "GetOrganizationPaymentIntegrations",
        "description": "Retrieves a list of payment integrations for a specific organization. This function is used to fetch and manage payment integration data within an organization, allowing applications to display or process payment options available to the organization.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentIntegration"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/organization/search": {
      "get": {
        "summary": "Search",
        "description": "This file contains functions for searching organizations based on a search term. It provides an endpoint to search for organizations and a hook to use the search functionality. The search functionality is designed to be used in applications where users need to find specific organizations.",
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Optional search term for organization",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SearchField"
                      }
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reports/parents/{parentId}": {
      "get": {
        "summary": "GetReportParent",
        "description": "Fetches data for a specific report parent by its ID. This function is used to retrieve detailed information about a report parent, which is a part of the reporting structure. It is designed for applications that require access to report parent data for further processing or display.",
        "parameters": [
          {
            "in": "path",
            "name": "parentId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the report parent",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ReportParent"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/reports/parents": {
      "get": {
        "summary": "GetReportParents",
        "description": "Retrieves a list of report parents based on the specified report type. This function is used to fetch report parent data, which can be utilized in various reporting features within the application. It supports infinite scrolling and pagination through the use of connected infinite queries.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "The type of the report",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ReportParent"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/self/organization-membership": {
      "get": {
        "summary": "GetSelfOrgMembership",
        "description": "Endpoint to fetch and manage the current user's organization membership data. This function allows users to retrieve their own organization membership details. It is designed to be used in applications where users need to access or manage their membership information.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationMembership"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/self/organizations": {
      "get": {
        "summary": "GetSelfOrganizations",
        "description": "Endpoint to retrieve a list of organizations associated with the current user. This function fetches organizations that the self user is part of, utilizing infinite query capabilities for efficient data handling. It is designed for applications that require displaying or managing user-specific organizational data.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/series/{seriesId}/events": {
      "get": {
        "summary": "GetSeriesEvents",
        "description": "Endpoint to fetch events associated with a specific series. This function retrieves a list of events for a given series, allowing users to view and manage events within that series. It is designed to be used in applications where event management and retrieval are necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "seriesId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the series",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/streams/{streamId}/outputs/{output}": {
      "get": {
        "summary": "GetStreamInputOutput",
        "description": "Retrieves input or output data for a specific stream output. This function is used to fetch detailed information about the input or output associated with a given stream. It is designed for applications that require access to stream data outputs.",
        "parameters": [
          {
            "in": "path",
            "name": "streamId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the stream",
            "required": true
          },
          {
            "in": "path",
            "name": "output",
            "schema": {
              "type": "string"
            },
            "description": "The output data identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/StreamInputOutput"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/payments": {
      "get": {
        "summary": "GetSubscriptionPayments",
        "description": "This file contains functions for retrieving a list of payments associated with a specific subscription. It provides a way to fetch detailed information about all payments made under a given subscription. The functions in this file are designed to be used in applications where tracking and managing subscription payments is required.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Payment"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscription-products/{subscriptionProductId}/subscriptions": {
      "get": {
        "summary": "GetSubscriptionProductSubscriptions",
        "description": "Endpoint to retrieve a list of subscriptions associated with a specific subscription product. This function allows users to fetch subscriptions, optionally filtering by subscription status. It is designed to be used in applications where subscription management is required.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/SubscriptionStatus"
            },
            "description": "Optional filtering by subscription status",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Subscription"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/subscription-products/{subscriptionProductId}/tiers": {
      "get": {
        "summary": "GetSubscriptionProductTiers",
        "description": "Retrieves the tiers associated with a specific subscription product. This function is used to fetch and manage the tier data for a given subscription product, allowing applications to display or process tier information as needed.",
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionProductId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the subscription product",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tier"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/members": {
      "get": {
        "summary": "GetThreadMembers",
        "description": "Endpoint to retrieve a list of members within a specific thread, with optional filtering by role. This function allows users to fetch thread members, providing the ability to filter results based on the role of the members. It is designed for applications that require detailed member information within a thread context.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            },
            "description": "The role to filter thread members by",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ThreadMember"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/messages/{messageId}": {
      "get": {
        "summary": "GetThreadMessage",
        "description": "Fetches a specific message from a thread using the thread and message IDs. This function is part of a connected query system designed to retrieve detailed information about a particular message within a thread. It is useful in applications where accessing individual thread messages is necessary.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread",
            "required": true
          },
          {
            "in": "path",
            "name": "messageId",
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/ThreadMessage"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/messages/{messageId}/replies": {
      "get": {
        "summary": "GetThreadMessageReplies",
        "description": "Endpoint to retrieve a list of replies for a specific message in a thread. This function fetches replies associated with a particular message within a thread, allowing users to view the conversation flow. It is useful in applications where threaded discussions or message replies need to be displayed.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          },
          {
            "in": "path",
            "name": "messageId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the message",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ThreadMessage"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/messages": {
      "get": {
        "summary": "GetThreadMessages",
        "description": "Endpoint to retrieve a list of messages for a specific thread. This function fetches messages associated with a given thread ID, allowing users to view the conversation history. It is designed to be used in applications where thread-based message retrieval is required.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ThreadMessage"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/threads/{threadId}/moderators": {
      "get": {
        "summary": "GetThreadModerators",
        "description": "Retrieves a list of moderators for a specific thread. This function fetches the moderators associated with a given thread ID, allowing applications to display or manage thread moderators. It is designed to be used in scenarios where thread moderation details are required.",
        "parameters": [
          {
            "in": "path",
            "name": "threadId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the thread",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ThreadMember"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tiers/{tierId}/imports/{importId}": {
      "get": {
        "summary": "GetTierImport",
        "description": "Endpoint to retrieve a specific import associated with a tier by its unique identifiers. This function allows users to fetch details of a particular import within a specified tier. It is designed to be used in applications where detailed information about tier imports is required.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          },
          {
            "in": "path",
            "name": "importId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the import",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Import"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tiers/{tierId}/imports/{importId}/items": {
      "get": {
        "summary": "GetTierImportItems",
        "description": "Endpoint to retrieve a list of import items for a specific tier and import. This function fetches import items associated with a given tier and import ID, allowing users to access detailed information about each import item. It is designed for applications that require a comprehensive list of import items for further processing or display.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          },
          {
            "in": "path",
            "name": "importId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the import",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ImportItem"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tiers/{tierId}/imports": {
      "get": {
        "summary": "GetTierImports",
        "description": "Endpoint to retrieve a list of tier imports with support for pagination and filtering. This function is designed to fetch import data associated with a specific tier, allowing for detailed data retrieval in applications that require tier-specific import information.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Import"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/tiers/{tierId}/subscribers": {
      "get": {
        "summary": "GetTierSubscribers",
        "description": "This file contains functions for retrieving a list of subscribers for a specific tier. It provides an endpoint to fetch subscribers associated with a particular tier within an organization. The functions in this file are designed to be used in applications where subscriber information for a tier is required.",
        "parameters": [
          {
            "in": "path",
            "name": "tierId",
            "schema": {
              "type": "string"
            },
            "description": "The id of the tier",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/videos": {
      "get": {
        "summary": "GetVideos",
        "description": "Endpoint to retrieve video data with optional filtering by source. This function supports pagination, ordering, and search functionalities, allowing users to efficiently query video data. It is designed for applications that require dynamic video content retrieval with flexible query parameters.",
        "parameters": [
          {
            "in": "query",
            "name": "source",
            "schema": {
              "type": "string"
            },
            "description": "The source of the videos",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 1
            },
            "description": "Page number",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 25
            },
            "description": "Number of items per page",
            "required": true
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            },
            "description": "Field to order by",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Video"
                      }
                    },
                    "count": {
                      "type": "number",
                      "example": 100
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "OrganizationId": {
        "type": "apiKey",
        "in": "header",
        "name": "organization"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key"
      },
      "TokenAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "OrganizationActionType": {
        "type": "string",
        "enum": [
          "create",
          "read",
          "update",
          "delete"
        ]
      },
      "ImportType": {
        "type": "string",
        "enum": [
          "account-tiers"
        ]
      },
      "OrganizationModuleType": {
        "type": "string",
        "enum": [
          "activities",
          "events",
          "groups",
          "accounts",
          "channels",
          "threads",
          "storage",
          "support",
          "sponsors",
          "benefits",
          "interests",
          "advertisements",
          "subscriptions",
          "invoices"
        ]
      },
      "BaseOrganizationModule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "moduleType": {
            "$ref": "#/components/schemas/OrganizationModuleType"
          },
          "superEnabled": {
            "type": "boolean"
          },
          "requireAuth": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "editable": {
            "type": "boolean"
          }
        }
      },
      "OrganizationModule": {
        "type": "object",
        "properties": {
          "enabledTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "editableTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "Currency": {
        "type": "string",
        "enum": [
          "USD"
        ]
      },
      "ContentGuestType": {
        "type": "string",
        "enum": [
          "guest",
          "host",
          "author"
        ]
      },
      "PageType": {
        "type": "string",
        "enum": [
          "about",
          "privacy",
          "terms",
          "team"
        ]
      },
      "UserRole": {
        "type": "string",
        "enum": [
          "manager",
          "staff"
        ]
      },
      "AccountType": {
        "type": "string",
        "enum": [
          "account",
          "team"
        ]
      },
      "PushDeviceAppType": {
        "type": "string",
        "enum": [
          "EVENTXM",
          "COMMUNITYXM"
        ]
      },
      "PushService": {
        "type": "string",
        "enum": [
          "apn",
          "firebase",
          "huawei",
          "xiaomi"
        ]
      },
      "DelegateRole": {
        "type": "string",
        "enum": [
          "manager",
          "member"
        ]
      },
      "EventType": {
        "type": "string",
        "enum": [
          "physical",
          "virtual",
          "hybrid"
        ]
      },
      "EventSource": {
        "type": "string",
        "enum": [
          "admin",
          "moderator",
          "account"
        ]
      },
      "PassTypeVisibility": {
        "type": "string",
        "enum": [
          "public",
          "private"
        ]
      },
      "PassTypeAccessLevel": {
        "type": "string",
        "enum": [
          "regular",
          "virtual",
          "vip"
        ]
      },
      "ThreadAccessLevel": {
        "type": "string",
        "enum": [
          "public",
          "private"
        ]
      },
      "GroupAccess": {
        "type": "string",
        "enum": [
          "public",
          "private"
        ]
      },
      "GroupMembershipRole": {
        "type": "string",
        "enum": [
          "member",
          "moderator"
        ]
      },
      "NotificationType": {
        "type": "string",
        "enum": [
          "ANNOUNCEMENT",
          "FOLLOW",
          "INVITATION",
          "TRANSFER",
          "LIKE",
          "COMMENT",
          "RESHARE",
          "EVENT",
          "ACTIVITY"
        ]
      },
      "AdvertisementType": {
        "type": "string",
        "enum": [
          "square",
          "rectangle"
        ]
      },
      "ImageType": {
        "type": "string",
        "enum": [
          "admin",
          "people",
          "activity",
          "banner",
          "chat",
          "content"
        ]
      },
      "SupportTicketType": {
        "type": "string",
        "enum": [
          "support",
          "inquiry"
        ]
      },
      "SupportTicketState": {
        "type": "string",
        "enum": [
          "new",
          "awaitingResponse",
          "resolved",
          "spam"
        ]
      },
      "ChannelFormat": {
        "type": "string",
        "enum": [
          "article",
          "podcast",
          "video"
        ]
      },
      "ContentStatus": {
        "type": "string",
        "enum": [
          "draft",
          "published"
        ]
      },
      "VideoStatus": {
        "type": "string",
        "enum": [
          "pendingupload",
          "downloading",
          "queued",
          "inprogress",
          "ready",
          "error"
        ]
      },
      "RegistrationQuestionType": {
        "type": "string",
        "enum": [
          "text",
          "textarea",
          "number",
          "time",
          "date",
          "toggle",
          "select",
          "radio",
          "checkbox",
          "search",
          "file"
        ]
      },
      "ReportType": {
        "type": "string",
        "enum": [
          "organization",
          "event"
        ]
      },
      "OrganizationTriggerType": {
        "type": "string",
        "enum": [
          "postAuth"
        ]
      },
      "AuthLayout": {
        "type": "string",
        "enum": [
          "default",
          "social"
        ]
      },
      "DefaultAuthAction": {
        "type": "string",
        "enum": [
          "signIn",
          "signUp"
        ]
      },
      "FileSource": {
        "type": "string",
        "enum": [
          "admin",
          "response",
          "content"
        ]
      },
      "BaseAccount": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          },
          "imageId": {
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/BaseImage"
          },
          "featured": {
            "type": "boolean"
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "locale": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "internalRefId": {
            "type": "string",
            "nullable": true
          },
          "accountTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "bannerId": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "interests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseInterest"
            }
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "dietaryRestrictions": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseAccountAddress": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        }
      },
      "AccountAddress": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseAPILog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUser"
              }
            ],
            "nullable": true
          },
          "source": {
            "oneOf": [
              {
                "enum": [
                  "admin"
                ]
              },
              {
                "enum": [
                  "client"
                ]
              }
            ]
          },
          "status": {
            "oneOf": [
              {
                "enum": [
                  "success"
                ]
              },
              {
                "enum": [
                  "failure"
                ]
              }
            ]
          },
          "statusCode": {
            "type": "number"
          },
          "response": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "deviceType": {
            "type": "string",
            "nullable": true
          },
          "ipaddress": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "APILog": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "nullable": true
          },
          "params": {
            "type": "object",
            "nullable": true
          },
          "query": {
            "type": "object",
            "nullable": true
          },
          "body": {
            "type": "object",
            "nullable": true
          },
          "updatedAt": {
            "type": "string"
          },
          "architecture": {
            "type": "string",
            "nullable": true
          },
          "browser": {
            "type": "string",
            "nullable": true
          },
          "browserVersion": {
            "type": "string",
            "nullable": true
          },
          "deviceModel": {
            "type": "string",
            "nullable": true
          },
          "deviceVendor": {
            "type": "string",
            "nullable": true
          },
          "engine": {
            "type": "string",
            "nullable": true
          },
          "engineVersion": {
            "type": "string",
            "nullable": true
          },
          "osName": {
            "type": "string",
            "nullable": true
          },
          "osVersion": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AuthSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "organizationId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "TierType": {
        "type": "string",
        "enum": [
          "internal",
          "external"
        ]
      },
      "BaseTier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "priority": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "iconName": {
            "type": "string"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "internal": {
            "type": "boolean"
          }
        }
      },
      "Tier": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/BaseImage"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "BaseActivationCompletion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          },
          "eventActivationId": {
            "type": "string"
          },
          "eventActivation": {
            "$ref": "#/components/schemas/BaseEventActivation"
          },
          "earnedPoints": {
            "type": "number"
          },
          "accountId": {
            "type": "string"
          }
        }
      },
      "ActivationCompletion": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventActivation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "maxPoints": {
            "type": "number"
          },
          "startAfter": {
            "type": "string",
            "nullable": true
          },
          "protected": {
            "enum": [
              "false"
            ]
          }
        }
      },
      "EventActivation": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/BaseEvent"
          },
          "managerId": {
            "type": "string",
            "nullable": true
          },
          "manager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "protectionCode": {
            "type": "number",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "ActivationTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseActivity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "readMore": {
            "type": "boolean"
          },
          "linkPreview": {
            "$ref": "#/components/schemas/BaseLinkPreview"
          },
          "giphyId": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "contentId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "Activity": {
        "type": "object",
        "properties": {
          "video": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseVideo"
              }
            ],
            "nullable": true
          },
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseGroup"
              }
            ],
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseChannelContent"
              }
            ],
            "nullable": true
          },
          "interests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseInterest"
            }
          },
          "videoId": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "messageExtended": {
            "type": "boolean"
          }
        }
      },
      "AdvertisementClick": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "advertisementId": {
            "type": "string"
          },
          "advertisement": {
            "$ref": "#/components/schemas/BaseAdvertisement"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseAdvertisement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AdvertisementType"
          },
          "link": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "type": "number"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Advertisement": {
        "type": "object",
        "properties": {
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "eventOnly": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "AdvertisementView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "advertisementId": {
            "type": "string"
          },
          "advertisement": {
            "$ref": "#/components/schemas/Advertisement"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Account"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseAnnouncement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          },
          "sms": {
            "type": "boolean"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "tierId": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "schedule": {
            "$ref": "#/components/schemas/BaseSchedule"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "EventAnnouncementFilters": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "event"
            ]
          },
          "ticketId": {
            "type": "string"
          },
          "questionId": {
            "type": "number"
          },
          "choiceId": {
            "type": "number"
          },
          "eventRoomTypeId": {
            "type": "string"
          },
          "addOnId": {
            "type": "string"
          }
        }
      },
      "Announcement": {
        "type": "object",
        "properties": {
          "_count": {
            "type": "object"
          },
          "verifiedAccounts": {
            "type": "boolean"
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseGroup"
              }
            ],
            "nullable": true
          },
          "tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseTier"
              }
            ],
            "nullable": true
          },
          "channel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseChannel"
              }
            ],
            "nullable": true
          },
          "sponsorshipLevelId": {
            "type": "string",
            "nullable": true
          },
          "sponsorshipLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseLevel"
              }
            ],
            "nullable": true
          },
          "ticket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEventPassType"
              }
            ],
            "nullable": true
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUser"
              }
            ],
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventAnnouncementFilters"
              }
            ],
            "nullable": true
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "AnnouncementTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BenefitClick": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "benefitId": {
            "type": "string"
          },
          "benefit": {
            "$ref": "#/components/schemas/BaseBenefit"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseBenefit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "number"
          }
        }
      },
      "Benefit": {
        "type": "object",
        "properties": {
          "managerId": {
            "type": "string",
            "nullable": true
          },
          "manager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "eventOnly": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "BenefitTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseChannelContent": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus"
          },
          "published": {
            "type": "string",
            "nullable": true
          },
          "visible": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          }
        }
      },
      "ChannelContent": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "audioUrl": {
            "type": "string",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "appleUrl": {
            "type": "string",
            "nullable": true
          },
          "spotifyUrl": {
            "type": "string",
            "nullable": true
          },
          "googleUrl": {
            "type": "string",
            "nullable": true
          },
          "youtubeUrl": {
            "type": "string",
            "nullable": true
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseAccount"
            }
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseAccount"
            }
          },
          "publishSchedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseSchedule"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "BaseChannelContentLike": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "contentId": {
            "type": "string"
          }
        }
      },
      "ChannelContentLike": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "ChannelContentTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "ChannelTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "number"
          },
          "visible": {
            "type": "boolean"
          },
          "imageId": {
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/BaseImage"
          },
          "bannerId": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "subscriberCount": {
            "type": "number"
          }
        }
      },
      "Channel": {
        "type": "object",
        "properties": {
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "appleUrl": {
            "type": "string",
            "nullable": true
          },
          "spotifyUrl": {
            "type": "string",
            "nullable": true
          },
          "googleUrl": {
            "type": "string",
            "nullable": true
          },
          "youtubeUrl": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "BaseChannelSubscriber": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "contentEmailNotification": {
            "type": "boolean"
          },
          "contentPushNotification": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseCoupon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "prePaid": {
            "type": "boolean"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "discountAmount": {
            "type": "number"
          },
          "discountPercent": {
            "type": "number"
          },
          "quantityMin": {
            "type": "number"
          },
          "quantityMax": {
            "type": "number",
            "nullable": true
          },
          "useLimit": {
            "type": "number",
            "nullable": true
          },
          "limitPerAccount": {
            "type": "number",
            "nullable": true
          },
          "purchaseLimit": {
            "type": "number",
            "nullable": true
          },
          "emailDomains": {
            "type": "string",
            "nullable": true
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "ticket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEventPassType"
              }
            ],
            "nullable": true
          },
          "applyToPassType": {
            "type": "boolean"
          },
          "applyToAddOns": {
            "type": "boolean"
          },
          "applyToReservation": {
            "type": "boolean"
          }
        }
      },
      "Coupon": {
        "type": "object",
        "properties": {
          "registrationId": {
            "type": "string",
            "nullable": true
          },
          "registration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEventAttendee"
              }
            ],
            "nullable": true
          },
          "paymentId": {
            "type": "number",
            "nullable": true
          },
          "payment": {
            "$ref": "#/components/schemas/BasePayment"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "EmailReceiptStatus": {
        "type": "string",
        "enum": [
          "pending",
          "delivered",
          "bounced",
          "complaint",
          "opened"
        ]
      },
      "BaseEmailReceipt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EmailReceiptStatus"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "replyTo": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EmailReceipt": {
        "type": "object",
        "properties": {
          "html": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "debug": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BaseEventAddOn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "supply": {
            "type": "number",
            "nullable": true
          },
          "price": {
            "type": "number"
          },
          "pricePerNight": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "number"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventAddOn": {
        "type": "object",
        "properties": {
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "allowedTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventPassType"
            }
          },
          "allowedTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "disallowedTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "EventAddOnTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventActivationTranslation": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventEmailType": {
        "type": "string",
        "enum": [
          "confirmation",
          "cancellation",
          "reminder"
        ]
      },
      "BaseEventEmail": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventEmailType"
          },
          "eventId": {
            "type": "string"
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "replyTo": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "calendarFile": {
            "type": "boolean"
          }
        }
      },
      "EventEmail": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventEmailTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventListing": {
        "type": "object",
        "properties": {}
      },
      "BadgeFieldType": {
        "type": "string",
        "enum": [
          "attribute",
          "question",
          "tier",
          "ticket",
          "pass"
        ]
      },
      "BadgeFieldTransformation": {
        "type": "string",
        "enum": [
          "uppercase",
          "lowercase"
        ]
      },
      "BaseEventOnSiteBadgeField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "eventId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/BadgeFieldType"
          },
          "lookup": {
            "type": "string",
            "nullable": true
          },
          "maxLength": {
            "type": "number",
            "nullable": true
          },
          "defaultValue": {
            "type": "string",
            "nullable": true
          },
          "transformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BadgeFieldTransformation"
              }
            ],
            "nullable": true
          },
          "sortOrder": {
            "type": "number"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventOnSiteBadgeField": {
        "type": "object",
        "properties": {
          "onSite": {
            "$ref": "#/components/schemas/EventOnSite"
          }
        }
      },
      "BaseEventOnSite": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "authenticationCode": {
            "type": "number"
          },
          "zplTemplate": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventOnSite": {
        "type": "object",
        "properties": {
          "badgeFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventOnSiteBadgeField"
            }
          }
        }
      },
      "BaseEventPage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "number"
          }
        }
      },
      "EventPage": {
        "type": "object",
        "properties": {
          "html": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventPageTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "internalRefId": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "approved": {
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/EventSource"
          },
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "eventStart": {
            "type": "string"
          },
          "eventEnd": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "venue": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "registration": {
            "type": "boolean"
          },
          "registrationStart": {
            "type": "string",
            "nullable": true
          },
          "registrationEnd": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "passSupply": {
            "type": "number",
            "nullable": true
          },
          "passLimitPerAccount": {
            "type": "number",
            "nullable": true
          },
          "reservationDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "meetingUrl": {
            "type": "string",
            "nullable": true
          },
          "venueMapId": {
            "type": "string",
            "nullable": true
          },
          "venueMap": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          },
          "creator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "registrationLimit": {
            "type": "number",
            "nullable": true
          },
          "publicRegistrants": {
            "type": "boolean"
          },
          "sessionsVisible": {
            "type": "boolean"
          },
          "speakersVisible": {
            "type": "boolean"
          },
          "checkinCode": {
            "type": "number",
            "nullable": true
          },
          "iosAppLink": {
            "type": "string",
            "nullable": true
          },
          "androidAppLink": {
            "type": "string",
            "nullable": true
          },
          "newActivityCreatorEmailNotification": {
            "type": "boolean"
          },
          "newActivityCreatorPushNotification": {
            "type": "boolean"
          },
          "seriesId": {
            "type": "string",
            "nullable": true
          },
          "series": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseSeries"
              }
            ],
            "nullable": true
          },
          "streamInputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseStreamInput"
            }
          },
          "streamReplayId": {
            "type": "string",
            "nullable": true
          },
          "streamReplay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseVideo"
              }
            ],
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseGroup"
              }
            ],
            "nullable": true
          },
          "groupOnly": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "reservationDescription": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseFaqSection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "number"
          }
        }
      },
      "FaqSection": {
        "type": "object",
        "properties": {
          "faqs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseFaq"
            }
          },
          "eventId": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/BaseEvent"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "FaqSectionTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseFaq": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          },
          "question": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          }
        }
      },
      "Faq": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "number"
          },
          "organizationId": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          },
          "sectionId": {
            "type": "string"
          },
          "section": {
            "$ref": "#/components/schemas/BaseFaqSection"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "FaqTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "question": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "SupportedLocale": {
        "type": "string",
        "enum": [
          "af",
          "sq",
          "am",
          "ar",
          "hy",
          "az",
          "bn",
          "bs",
          "bg",
          "zh-CN",
          "ca",
          "zh-TW",
          "hr",
          "cs",
          "da",
          "nl",
          "en",
          "et",
          "fi",
          "fr",
          "fr-CA",
          "ka",
          "de",
          "el",
          "ht",
          "he",
          "hi",
          "hu",
          "is",
          "id",
          "ga",
          "it",
          "ja",
          "kk",
          "ko",
          "lv",
          "lt",
          "mk",
          "ms",
          "mt",
          "mn",
          "no",
          "fa",
          "ps",
          "pl",
          "pt",
          "pt-PT",
          "pa",
          "ro",
          "ru",
          "sr",
          "sk",
          "sl",
          "so",
          "es",
          "es-MX",
          "sw",
          "sv",
          "ta",
          "th",
          "tr",
          "uk",
          "ur",
          "uz",
          "vi"
        ]
      },
      "ISupportedLocale": {
        "$ref": "#/components/schemas/SupportedLocale"
      },
      "GroupInvitationStatus": {
        "type": "string",
        "enum": [
          "invited",
          "rejected",
          "canceled"
        ]
      },
      "BaseGroupInvitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/GroupInvitationStatus"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "GroupInvitation": {
        "type": "object",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/BaseGroup"
          },
          "groupId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "inviterId": {
            "type": "string"
          },
          "inviter": {
            "$ref": "#/components/schemas/BaseAccount"
          }
        }
      },
      "BaseGroupMembership": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "groupId": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/BaseGroup"
          },
          "role": {
            "$ref": "#/components/schemas/GroupMembershipRole"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "GroupMembership": {
        "type": "object",
        "properties": {
          "announcementEmailNotification": {
            "type": "boolean"
          },
          "announcementPushNotification": {
            "type": "boolean"
          },
          "activityEmailNotification": {
            "type": "boolean"
          },
          "activityPushNotification": {
            "type": "boolean"
          },
          "eventEmailNotification": {
            "type": "boolean"
          },
          "eventPushNotification": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "GroupRequestStatus": {
        "type": "string",
        "enum": [
          "requested",
          "rejected"
        ]
      },
      "BaseGroupRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/GroupRequestStatus"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "GroupRequest": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/BaseGroup"
          },
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          }
        }
      },
      "BaseGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "access": {
            "$ref": "#/components/schemas/GroupAccess"
          },
          "description": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "GroupTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "ImageModerationLevel": {
        "type": "string",
        "enum": [
          "safe",
          "warning"
        ]
      },
      "BaseImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ImageType"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "moderation": {
            "$ref": "#/components/schemas/ImageModerationLevel"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "ImageWCopyUri": {
        "type": "object",
        "properties": {
          "copyUri": {
            "type": "string"
          }
        }
      },
      "ExportStatus": {
        "type": "string",
        "enum": [
          "pending",
          "resolved",
          "failed"
        ]
      },
      "ImportItemStatus": {
        "type": "string",
        "enum": [
          "pending",
          "resolved",
          "failed"
        ]
      },
      "BaseImportItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "importId": {
            "type": "string"
          },
          "values": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ImportItemStatus"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "debug": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "ImportItem": {
        "type": "object",
        "properties": {
          "import": {
            "$ref": "#/components/schemas/BaseImport"
          }
        }
      },
      "BaseImport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "overwrite": {
            "type": "boolean"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "Import": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "tier": {
            "$ref": "#/components/schemas/BaseTier"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "IntegrationType": {
        "type": "string",
        "enum": [
          "snagtag"
        ]
      },
      "BaseIntegration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IntegrationType"
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "Integration": {
        "type": "object",
        "properties": {
          "publicUrl": {
            "type": "string",
            "nullable": true
          },
          "publicKey": {
            "type": "string",
            "nullable": true
          },
          "secretKey": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "object"
          }
        }
      },
      "BaseInterest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          }
        }
      },
      "Interest": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "BaseInvoiceLineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "InvoiceLineItem": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string"
          },
          "invoice": {
            "$ref": "#/components/schemas/BaseInvoice"
          }
        }
      },
      "InvoiceStatus": {
        "type": "string",
        "enum": [
          "draft",
          "sent",
          "paid",
          "void"
        ]
      },
      "BaseInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "alternateId": {
            "type": "string"
          },
          "dueDate": {
            "type": "string"
          },
          "sentDate": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/InvoiceStatus"
          },
          "title": {
            "type": "string"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "lineItems": {
            "$ref": "#/components/schemas/BaseInvoiceLineItem"
          },
          "payments": {
            "$ref": "#/components/schemas/BasePayment"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseLike": {
        "type": "object",
        "properties": {
          "activity": {
            "$ref": "#/components/schemas/BaseActivity"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          }
        }
      },
      "Like": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseLinkPreview": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "siteName": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "type": "string",
            "nullable": true
          },
          "imageWidth": {
            "type": "number",
            "nullable": true
          },
          "imageHeight": {
            "type": "number",
            "nullable": true
          },
          "imageType": {
            "type": "string",
            "nullable": true
          },
          "favicon": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LinkPreview": {
        "type": "object",
        "properties": {}
      },
      "NotificationPreferences": {
        "type": "object",
        "properties": {
          "newFollowerPush": {
            "type": "boolean"
          },
          "newFollowerEmail": {
            "type": "boolean"
          },
          "likePush": {
            "type": "boolean"
          },
          "resharePush": {
            "type": "boolean"
          },
          "commentPush": {
            "type": "boolean"
          },
          "commentEmail": {
            "type": "boolean"
          },
          "transferPush": {
            "type": "boolean"
          },
          "transferEmail": {
            "type": "boolean"
          },
          "supportTicketConfirmationEmail": {
            "type": "boolean"
          },
          "eventAnnouncementEmail": {
            "type": "boolean"
          },
          "eventAnnouncementPush": {
            "type": "boolean"
          }
        }
      },
      "BaseNotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "read": {
            "type": "boolean"
          },
          "receiverId": {
            "type": "string"
          },
          "receiver": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "senderId": {
            "type": "string",
            "nullable": true
          },
          "sender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "transfer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseTransfer"
              }
            ],
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseLike"
              }
            ],
            "nullable": true
          },
          "activity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseActivity"
              }
            ],
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "announcement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAnnouncement"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "PermissionDomain": {
        "type": "object"
      },
      "PermissionType": {
        "oneOf": [
          {
            "enum": [
              "read"
            ]
          },
          {
            "enum": [
              "create"
            ]
          },
          {
            "enum": [
              "update"
            ]
          },
          {
            "enum": [
              "del"
            ]
          }
        ]
      },
      "ModulePermissions": {
        "type": "object",
        "properties": {
          "superEnabled": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "create": {
            "type": "boolean"
          },
          "update": {
            "type": "boolean"
          },
          "del": {
            "type": "boolean"
          }
        }
      },
      "OrganizationMembership": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "org": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "users": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "reports": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "activities": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "events": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "groups": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "accounts": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "channels": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "threads": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "storage": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "support": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "sponsors": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "benefits": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "interests": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "advertisements": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "subscriptions": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "invoices": {
            "$ref": "#/components/schemas/ModulePermissions"
          },
          "announcements": {
            "$ref": "#/components/schemas/ModulePermissions"
          }
        }
      },
      "BaseOrganization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "logoId": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "iconId": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "domain": {
            "type": "string",
            "nullable": true
          },
          "locale": {
            "enum": [
              "true"
            ]
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "primaryColor": {
            "type": "string",
            "nullable": true
          },
          "secondaryColor": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "iosAppLink": {
            "type": "string",
            "nullable": true
          },
          "androidAppLink": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          },
          "appIconId": {
            "type": "string",
            "nullable": true
          },
          "appIcon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "appAdaptiveIconId": {
            "type": "string",
            "nullable": true
          },
          "appAdaptiveIcon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "appSplashScreenId": {
            "type": "string",
            "nullable": true
          },
          "appSplashScreen": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "darkIconId": {
            "type": "string",
            "nullable": true
          },
          "darkIcon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "darkLogoId": {
            "type": "string",
            "nullable": true
          },
          "darkLogo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "requireCompany": {
            "type": "boolean"
          },
          "requirePhone": {
            "type": "boolean"
          },
          "requireTitle": {
            "type": "boolean"
          },
          "authLayout": {
            "$ref": "#/components/schemas/AuthLayout"
          },
          "defaultAuthAction": {
            "$ref": "#/components/schemas/DefaultAuthAction"
          },
          "userPoolId": {
            "type": "string",
            "nullable": true
          },
          "userPoolClientId": {
            "type": "string",
            "nullable": true
          },
          "userPoolHostedUrl": {
            "type": "string",
            "nullable": true
          },
          "appBundleIdentifier": {
            "type": "string",
            "nullable": true
          },
          "expoProjectId": {
            "type": "string",
            "nullable": true
          },
          "expoSlug": {
            "type": "string",
            "nullable": true
          },
          "appleAuthEnabled": {
            "type": "boolean"
          },
          "facebookAuthEnabled": {
            "type": "boolean"
          },
          "googleAuthEnabled": {
            "type": "boolean"
          },
          "oAuth": {
            "type": "boolean"
          },
          "maxFileGbs": {
            "type": "number",
            "nullable": true
          },
          "maxImageCount": {
            "type": "number",
            "nullable": true
          },
          "maxVideoMins": {
            "type": "number",
            "nullable": true
          },
          "locales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "googleServices": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrganizationTrigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/OrganizationTriggerType"
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BasePage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Page": {
        "type": "object",
        "properties": {
          "html": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "PageTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventPassStatus": {
        "type": "string",
        "enum": [
          "draft",
          "canceled",
          "needsInfo",
          "ready"
        ]
      },
      "BaseEventPass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "alternateId": {
            "type": "number"
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "ticket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEventPassType"
              }
            ],
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "usedAt": {
            "type": "string",
            "nullable": true
          },
          "transfer": {
            "type": "object"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseRegistrationQuestionResponse"
            }
          },
          "status": {
            "$ref": "#/components/schemas/EventPassStatus"
          },
          "reservationId": {
            "type": "string",
            "nullable": true
          },
          "reservation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEventRoomTypeReservation"
              }
            ],
            "nullable": true
          },
          "couponId": {
            "type": "string",
            "nullable": true
          },
          "coupon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseCoupon"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventPass": {
        "type": "object",
        "properties": {
          "passAddOns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PassAddOn"
            }
          },
          "attendeeId": {
            "type": "string"
          },
          "attendee": {
            "$ref": "#/components/schemas/BaseEventAttendee"
          },
          "payerId": {
            "type": "string",
            "nullable": true
          },
          "payer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "amtPaid": {
            "type": "number"
          },
          "amtRefunded": {
            "type": "number"
          }
        }
      },
      "PassAddOn": {
        "type": "object",
        "properties": {
          "addOnId": {
            "type": "string"
          },
          "addOn": {
            "$ref": "#/components/schemas/BaseEventAddOn"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "PushDevice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "model": {
            "type": "string",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "nullable": true
          },
          "osName": {
            "type": "string",
            "nullable": true
          },
          "osVersion": {
            "type": "string",
            "nullable": true
          },
          "deviceYearClass": {
            "type": "number",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "nullable": true
          },
          "supportedCpuArchitectures": {
            "type": "string",
            "nullable": true
          },
          "totalMemory": {
            "type": "number",
            "nullable": true
          },
          "appType": {
            "$ref": "#/components/schemas/PushDeviceAppType"
          },
          "pushService": {
            "$ref": "#/components/schemas/PushService"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseRegistrationBypass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "closed": {
            "type": "boolean"
          },
          "preRegister": {
            "type": "boolean"
          },
          "postRegister": {
            "type": "boolean"
          },
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "RegistrationBypass": {
        "type": "object",
        "properties": {}
      },
      "PaymentType": {
        "type": "string",
        "enum": [
          "charge",
          "refund"
        ]
      },
      "BasePayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "chargedAmt": {
            "type": "number"
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "ticket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEventPassType"
              }
            ],
            "nullable": true
          },
          "stripeId": {
            "type": "string",
            "nullable": true
          },
          "last4": {
            "type": "string",
            "nullable": true
          },
          "debugId": {
            "type": "string",
            "nullable": true
          },
          "salesTax": {
            "type": "number"
          },
          "salesTaxRate": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "PaymentIntegrationType": {
        "type": "string",
        "enum": [
          "stripe",
          "paypal",
          "braintree"
        ]
      },
      "Payment": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "bypassedId": {
            "type": "string",
            "nullable": true
          },
          "bypassedBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUser"
              }
            ],
            "nullable": true
          },
          "integration": {
            "type": "object"
          },
          "subscription": {
            "$ref": "#/components/schemas/BaseSubscription"
          },
          "addOns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventAddOn"
            }
          },
          "purchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventPass"
            }
          },
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseCoupon"
            }
          },
          "invoice": {
            "$ref": "#/components/schemas/BaseInvoice"
          },
          "registrationId": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "PaymentIntegration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentIntegrationType"
          },
          "connectionId": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "stripe": {
            "type": "object",
            "nullable": true
          },
          "paypal": {
            "type": "object",
            "nullable": true
          },
          "braintree": {
            "type": "object",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "TaxIntegrationType": {
        "type": "string",
        "enum": [
          "stripe",
          "taxjar",
          "vertex",
          "avalara"
        ]
      },
      "TaxIntegration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TaxIntegrationType"
          },
          "connectionId": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseRegistrationQuestionChoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "value": {
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "supply": {
            "type": "number",
            "nullable": true
          },
          "sortOrder": {
            "type": "number"
          },
          "subQuestions": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RegistrationQuestion"
                }
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            ]
          },
          "question": {
            "type": "object"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "Question": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RegistrationQuestionChoice": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "number"
          },
          "question": {
            "$ref": "#/components/schemas/BaseRegistrationQuestion"
          },
          "subQuestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseRegistrationQuestionChoiceSubQuestion"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseRegistrationQuestionChoiceSubQuestion": {
        "type": "object",
        "properties": {
          "choiceId": {
            "type": "number"
          },
          "choice": {
            "$ref": "#/components/schemas/BaseRegistrationQuestionChoice"
          },
          "questionId": {
            "type": "number"
          },
          "question": {
            "$ref": "#/components/schemas/BaseRegistrationQuestion"
          }
        }
      },
      "RegistrationQuestionChoiceSubQuestion": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "number"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "RegistrationQuestionChoiceTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseRegistrationQuestionResponseChange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "newValue": {
            "type": "string"
          },
          "oldValue": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          },
          "questionId": {
            "type": "string"
          },
          "responseId": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "RegistrationQuestionResponseChange": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/BaseRegistrationQuestionResponse"
          },
          "user": {
            "$ref": "#/components/schemas/BaseUser"
          }
        }
      },
      "BaseRegistrationQuestionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "value": {
            "type": "string"
          },
          "questionId": {
            "type": "number"
          },
          "question": {
            "$ref": "#/components/schemas/BaseRegistrationQuestion"
          }
        }
      },
      "RegistrationQuestionResponse": {
        "type": "object",
        "properties": {
          "changeLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseRegistrationQuestionResponseChange"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseRegistrationQuestionSearchValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "value": {
            "type": "string"
          },
          "top": {
            "type": "boolean"
          }
        }
      },
      "RegistrationQuestionSearchValue": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          }
        }
      },
      "BaseRegistrationQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "eventId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RegistrationQuestionType"
          },
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "default": {
            "type": "string",
            "nullable": true
          },
          "span": {
            "type": "number"
          },
          "mutable": {
            "type": "boolean"
          },
          "min": {
            "type": "string",
            "nullable": true
          },
          "max": {
            "type": "string",
            "nullable": true
          },
          "validation": {
            "type": "string",
            "nullable": true
          },
          "validationMessage": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "number"
          },
          "featured": {
            "type": "boolean"
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseRegistrationQuestionChoice"
            }
          }
        }
      },
      "RegistrationQuestion": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseRegistrationSectionQuestion"
            }
          },
          "subQuestionOf": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistrationQuestionChoiceSubQuestion"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "RegistrationQuestionTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseRegistrationSectionQuestion": {
        "type": "object",
        "properties": {
          "sectionId": {
            "type": "number"
          },
          "section": {
            "$ref": "#/components/schemas/BaseRegistrationSection"
          },
          "questionId": {
            "type": "number"
          },
          "question": {
            "$ref": "#/components/schemas/BaseRegistrationQuestion"
          },
          "sortOrder": {
            "type": "number"
          }
        }
      },
      "RegistrationSectionQuestion": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseRegistrationSection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "eventId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "number"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "RegistrationSection": {
        "type": "object",
        "properties": {
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistrationQuestion"
            }
          },
          "eventTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventPassType"
            }
          },
          "eventAddOns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventAddOn"
            }
          },
          "accountTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "disallowedTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "RegistrationSectionTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventAttendee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "alternateId": {
            "type": "number"
          },
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "eventId": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/BaseEvent"
          }
        }
      },
      "EventAttendee": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasePayment"
            }
          },
          "passes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventPass"
            }
          },
          "coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseCoupon"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "ReportParent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "type": {
            "$ref": "#/components/schemas/ReportType"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "columns": {
            "type": "string",
            "nullable": true
          },
          "filters": {
            "type": "string",
            "nullable": true
          },
          "charts": {
            "type": "string",
            "nullable": true
          },
          "advancedFilter": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "number",
            "nullable": true
          },
          "parent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReportParent"
              }
            ],
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUser"
              }
            ],
            "nullable": true
          },
          "shared": {
            "type": "boolean"
          },
          "sharedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseUser"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "colDefs": {
            "type": "object"
          },
          "rowData": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "nextCursor": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "SearchField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subtext": {
            "type": "string",
            "nullable": true
          },
          "search": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "contentId": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "threadId": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "Self": {
        "type": "object",
        "properties": {}
      },
      "BaseSeries": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          }
        }
      },
      "Series": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "number"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "tracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventTrack"
            }
          },
          "nonSession": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEventSession"
              }
            ],
            "nullable": true
          },
          "registrationEnabled": {
            "type": "boolean"
          },
          "price": {
            "type": "number",
            "nullable": true
          },
          "limit": {
            "type": "number",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventSession": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "number"
          },
          "eventId": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/BaseEvent"
          },
          "speakers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventSpeaker"
            }
          },
          "streamInput": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseStreamInput"
              }
            ],
            "nullable": true
          }
        }
      },
      "EventSessionTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventSessionLocation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "EventSessionLocation": {
        "type": "object",
        "properties": {
          "googlePlaceId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventSessionLocationTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BaseEventSessionQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "number"
          }
        }
      },
      "EventSessionQuestion": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventSessionQuestionTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventSessionQuestionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "EventSessionQuestionResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventSessionPass": {
        "type": "object",
        "properties": {
          "id": {
            "enum": [
              "true"
            ]
          },
          "canceled": {
            "type": "boolean"
          }
        }
      },
      "EventSessionPass": {
        "type": "object",
        "properties": {
          "createdAt": {
            "enum": [
              "true"
            ]
          },
          "updatedAt": {
            "enum": [
              "true"
            ]
          }
        }
      },
      "BaseEventSpeaker": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "companyBio": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "EventSpeaker": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventSession"
            }
          },
          "eventId": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/BaseEvent"
          },
          "isHost": {
            "type": "boolean"
          },
          "priority": {
            "type": "number"
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventSpeakerTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseLevel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string"
          },
          "scale": {
            "type": "number"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          }
        }
      },
      "Level": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "number"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "SponsorshipLevelTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseStreamInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "cloudflareId": {
            "type": "string",
            "nullable": true
          },
          "connected": {
            "type": "boolean"
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "StreamInput": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "number"
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "session": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEventSession"
              }
            ],
            "nullable": true
          },
          "details": {
            "$ref": "#/components/schemas/StreamInputDetails"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "StreamInputOutput": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "streamKey": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        }
      },
      "StreamInputConfig": {
        "type": "object",
        "properties": {
          "mode": {
            "oneOf": [
              {
                "enum": [
                  "automatic"
                ]
              },
              {
                "enum": [
                  "off"
                ]
              }
            ]
          },
          "requireSignedURLs": {
            "type": "boolean"
          },
          "allowedOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deleteRecordingAfterDays": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "StreamInputDetails": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "rtmps": {
            "type": "object"
          },
          "rtmpsPlayback": {
            "type": "object"
          },
          "srt": {
            "type": "object"
          },
          "srtPlayback": {
            "type": "object"
          },
          "webRTC": {
            "type": "object"
          },
          "webRTCPlayback": {
            "type": "object"
          },
          "created": {
            "type": "string"
          },
          "modified": {
            "type": "string"
          },
          "meta": {
            "type": "object"
          },
          "defaultCreator": {
            "type": "string"
          },
          "status": {
            "type": "object"
          },
          "recording": {
            "type": "object"
          },
          "deleteRecordingAfterDays": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "SubscriptionProductPriceType": {
        "type": "string",
        "enum": [
          "flat",
          "payWhatYouWant"
        ]
      },
      "SubscriptionProductPriceInterval": {
        "type": "string",
        "enum": [
          "day",
          "week",
          "month",
          "year"
        ]
      },
      "BaseSubscriptionProductPrice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/SubscriptionProductPriceInterval"
          },
          "intervalCount": {
            "type": "number"
          },
          "minAmount": {
            "type": "number"
          },
          "maxAmount": {
            "type": "number"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriptionProductPriceType"
          }
        }
      },
      "SubscriptionProductPrice": {
        "type": "object",
        "properties": {
          "subscriptionProduct": {
            "$ref": "#/components/schemas/BaseSubscriptionProduct"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseSubscriptionProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SubscriptionProduct": {
        "type": "object",
        "properties": {
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseSubscriptionProductPrice"
            }
          },
          "statementDescriptor": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "SubscriptionStatus": {
        "type": "string",
        "enum": [
          "active",
          "canceled",
          "paused",
          "trialing",
          "past_due",
          "unpaid"
        ]
      },
      "BaseSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "expiresAt": {
            "type": "string"
          },
          "cancelAtEnd": {
            "type": "boolean"
          },
          "integrationId": {
            "type": "string",
            "nullable": true
          },
          "subscriptionProductId": {
            "type": "string"
          },
          "subscriptionProduct": {
            "$ref": "#/components/schemas/BaseSubscriptionProduct"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "priceId": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/BaseSubscriptionProductPrice"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseSubscriptionPayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "SubscriptionPayment": {
        "type": "object",
        "properties": {
          "subscription": {
            "$ref": "#/components/schemas/BaseSubscription"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseSupportTicketNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/BaseUser"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "SupportTicketNote": {
        "type": "object",
        "properties": {
          "supportTicketId": {
            "type": "string"
          },
          "supportTicket": {
            "$ref": "#/components/schemas/BaseSupportTicket"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseSupportTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SupportTicketType"
          },
          "email": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "status": {
            "oneOf": [
              {
                "enum": [
                  "new"
                ]
              },
              {
                "enum": [
                  "inProgress"
                ]
              },
              {
                "enum": [
                  "complete"
                ]
              }
            ]
          },
          "state": {
            "$ref": "#/components/schemas/SupportTicketState"
          }
        }
      },
      "SupportTicket": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseSupportTicketNote"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseTeamMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "priority": {
            "type": "number"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          }
        }
      },
      "TeamMember": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventPassType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "cancelable": {
            "type": "boolean"
          },
          "transferable": {
            "type": "boolean"
          },
          "featured": {
            "type": "boolean"
          },
          "visibility": {
            "$ref": "#/components/schemas/PassTypeVisibility"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/PassTypeAccessLevel"
          },
          "featuredImageId": {
            "type": "string",
            "nullable": true
          },
          "featuredImage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "supply": {
            "type": "number",
            "nullable": true
          },
          "minQuantityPerSale": {
            "type": "number"
          },
          "maxQuantityPerSale": {
            "type": "number"
          },
          "emailDomains": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventPassTypePriceSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "ticketId": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventPassTypePriceSchedule": {
        "type": "object",
        "properties": {}
      },
      "BaseEventPassTypeRefundSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "passTypeId": {
            "type": "string"
          },
          "percentage": {
            "type": "number"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "EventPassTypeRefundSchedule": {
        "type": "object",
        "properties": {}
      },
      "EventPassType": {
        "type": "object",
        "properties": {
          "overrideStartDate": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "type": "number"
          },
          "event": {
            "$ref": "#/components/schemas/BaseEvent"
          },
          "allowedTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "disallowedTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "EventPassTypeTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventTrack": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string"
          }
        }
      },
      "EventTrack": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "EventTrackTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseTransferLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "fromRegistrationId": {
            "type": "string"
          },
          "fromRegistration": {
            "$ref": "#/components/schemas/BaseEventAttendee"
          },
          "toRegistrationId": {
            "type": "string"
          },
          "toRegistration": {
            "$ref": "#/components/schemas/BaseEventAttendee"
          }
        }
      },
      "TransferLog": {
        "type": "object",
        "properties": {
          "purchaseId": {
            "type": "string"
          },
          "purchase": {
            "$ref": "#/components/schemas/BaseEventPass"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseUser"
              }
            ],
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "BaseTransfer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "purchaseId": {
            "type": "string"
          },
          "purchase": {
            "$ref": "#/components/schemas/BaseEventPass"
          }
        }
      },
      "Transfer": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "UserApiKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "publicPart": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "lastUsedAt": {
            "type": "string"
          }
        }
      },
      "VideoSource": {
        "type": "string",
        "enum": [
          "admin",
          "activity",
          "content"
        ]
      },
      "BaseVideo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/VideoSource"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "thumbnailUrl": {
            "type": "string",
            "nullable": true
          },
          "previewUrl": {
            "type": "string",
            "nullable": true
          },
          "readyToStream": {
            "type": "boolean"
          },
          "duration": {
            "type": "number",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "Video": {
        "type": "object",
        "properties": {
          "downloadUrl": {
            "type": "string",
            "nullable": true
          },
          "hlsUrl": {
            "type": "string",
            "nullable": true
          },
          "dashUrl": {
            "type": "string",
            "nullable": true
          },
          "thumbnailPct": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "BaseChannelContentGuest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "contentId": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseAccount"
              }
            ],
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ContentGuestType"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "companyLink": {
            "type": "string",
            "nullable": true
          },
          "companyBio": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "ChannelContentGuest": {
        "type": "object",
        "properties": {}
      },
      "ChannelContentGuestTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "companyBio": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "r2Path": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/FileSource"
          },
          "kilobytes": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {}
      },
      "ThreadInvitationStatus": {
        "type": "string",
        "enum": [
          "invited",
          "rejected"
        ]
      },
      "ThreadInvitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "threadId": {
            "type": "string"
          },
          "thread": {
            "$ref": "#/components/schemas/BaseThread"
          },
          "status": {
            "$ref": "#/components/schemas/ThreadInvitationStatus"
          },
          "role": {
            "$ref": "#/components/schemas/ThreadMemberRole"
          },
          "invitedById": {
            "type": "string"
          },
          "invitedBy": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "invitedId": {
            "type": "string"
          },
          "invited": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "access": {
            "$ref": "#/components/schemas/ThreadAccessLevel"
          },
          "section": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "lastMessageAt": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Thread": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseGroup"
              }
            ],
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThreadMember"
            }
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "ThreadMemberRole": {
        "type": "string",
        "enum": [
          "member",
          "moderator"
        ]
      },
      "ThreadMessageType": {
        "type": "string",
        "enum": [
          "user",
          "bot",
          "system"
        ]
      },
      "BaseThreadMessageReaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "messageId": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "emojiName": {
            "type": "string"
          }
        }
      },
      "ThreadMessageReaction": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string"
          },
          "threadId": {
            "type": "string"
          },
          "message": {
            "$ref": "#/components/schemas/BaseThreadMessage"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseThreadMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "threadId": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "replyToId": {
            "type": "string",
            "nullable": true
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThreadMessageReaction"
            }
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          }
        }
      },
      "ThreadMessage": {
        "type": "object",
        "properties": {
          "thread": {
            "$ref": "#/components/schemas/BaseThread"
          },
          "accountId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ThreadMessageType"
          },
          "replyTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseThreadMessage"
              }
            ],
            "nullable": true
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseThreadMessage"
            }
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseAccount"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseFile"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseImage"
            }
          },
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseVideo"
            }
          },
          "editedAt": {
            "type": "string",
            "nullable": true
          },
          "sentAt": {
            "type": "string"
          }
        }
      },
      "BaseThreadMember": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/ThreadMemberRole"
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          }
        }
      },
      "ThreadMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "threadId": {
            "type": "string"
          },
          "thread": {
            "$ref": "#/components/schemas/BaseThread"
          },
          "accepted": {
            "type": "boolean"
          },
          "lastReadAt": {
            "type": "string",
            "nullable": true
          },
          "notifications": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "PaypalActivationFormParams": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        }
      },
      "BraintreeActivationFormParams": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientPublicKey": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        }
      },
      "BaseSchedule": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "properties": {}
      },
      "BaseCognitoUser": {
        "type": "object",
        "properties": {
          "cognitoUsername": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "CognitoUser": {
        "type": "object",
        "properties": {
          "sub": {
            "type": "string"
          },
          "userPoolId": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "DomainDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "BaseEventRoomType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "pricePerNight": {
            "type": "boolean"
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseImage"
              }
            ],
            "nullable": true
          },
          "passTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventRoomTypePassTypeDetails"
            }
          },
          "addOns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEventRoomTypeAddOnDetails"
            }
          }
        }
      },
      "EventRoomType": {
        "type": "object",
        "properties": {
          "sortOrder": {
            "type": "number"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "supply": {
            "type": "number",
            "nullable": true
          },
          "minPasses": {
            "type": "number",
            "nullable": true
          },
          "maxPasses": {
            "type": "number",
            "nullable": true
          },
          "minStart": {
            "type": "string",
            "nullable": true
          },
          "defaultStart": {
            "type": "string",
            "nullable": true
          },
          "maxStart": {
            "type": "string",
            "nullable": true
          },
          "minEnd": {
            "type": "string",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "nullable": true
          },
          "maxEnd": {
            "type": "string",
            "nullable": true
          },
          "allowedTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "disallowedTiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTier"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_count": {
            "type": "object"
          }
        }
      },
      "EventRoomTypeTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "locale": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventRoomTypeReservation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "nullable": true
          },
          "end": {
            "type": "string",
            "nullable": true
          },
          "eventRoomTypeId": {
            "type": "string"
          },
          "eventRoomType": {
            "$ref": "#/components/schemas/BaseEventRoomType"
          }
        }
      },
      "EventRoomTypeReservation": {
        "type": "object",
        "properties": {
          "passes": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventRoomTypePassTypeDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "passTypeId": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "premium": {
            "type": "number"
          },
          "includedNights": {
            "type": "number"
          },
          "minPasses": {
            "type": "number",
            "nullable": true
          },
          "maxPasses": {
            "type": "number",
            "nullable": true
          },
          "minStart": {
            "type": "string",
            "nullable": true
          },
          "defaultStart": {
            "type": "string",
            "nullable": true
          },
          "maxStart": {
            "type": "string",
            "nullable": true
          },
          "minEnd": {
            "type": "string",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "nullable": true
          },
          "maxEnd": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypePassTypeDetails": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BaseEventRoomTypeAddOnDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addOnId": {
            "type": "string"
          },
          "minStart": {
            "type": "string",
            "nullable": true
          },
          "defaultStart": {
            "type": "string",
            "nullable": true
          },
          "maxStart": {
            "type": "string",
            "nullable": true
          },
          "minEnd": {
            "type": "string",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "nullable": true
          },
          "maxEnd": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypeAddOnDetails": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "LeadStatus": {
        "type": "string",
        "enum": [
          "new",
          "favorited",
          "archived",
          "deleted"
        ]
      },
      "BaseLead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "shareAccount": {
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/LeadStatus"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "Lead": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseEvent"
              }
            ],
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "BarChartSummaryData": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "bar"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "count": {
            "type": "number"
          },
          "question": {
            "$ref": "#/components/schemas/RegistrationQuestion"
          }
        }
      },
      "LineChartSummaryData": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "line"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "count": {
            "type": "number"
          },
          "question": {
            "$ref": "#/components/schemas/RegistrationQuestion"
          }
        }
      },
      "TableChartSummaryData": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "table"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "count": {
            "type": "number"
          },
          "question": {
            "$ref": "#/components/schemas/RegistrationQuestion"
          }
        }
      },
      "CountChartSummaryData": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "count"
            ]
          },
          "data": {
            "enum": [
              "null"
            ]
          },
          "count": {
            "type": "number"
          },
          "question": {
            "$ref": "#/components/schemas/RegistrationQuestion"
          }
        }
      },
      "SummaryData": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BarChartSummaryData"
          },
          {
            "$ref": "#/components/schemas/LineChartSummaryData"
          },
          {
            "$ref": "#/components/schemas/TableChartSummaryData"
          },
          {
            "$ref": "#/components/schemas/CountChartSummaryData"
          }
        ]
      },
      "ImageUsage": {
        "type": "object",
        "properties": {
          "_count": {
            "type": "object"
          }
        }
      },
      "CloneEventResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        }
      },
      "AnnouncementSchedule": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "email": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          }
        }
      },
      "ContentPublishSchedule": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "email": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "ApiLogStatus": {
        "type": "string",
        "enum": [
          "success",
          "error"
        ]
      },
      "ContentType": {
        "type": "string",
        "enum": [
          "video",
          "audio",
          "article"
        ]
      },
      "AccountCreateInputs": {
        "type": "object",
        "properties": {
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "bannerId": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "dietaryRestrictions": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "internalRefId": {
            "type": "string",
            "nullable": true
          },
          "verified": {
            "type": "boolean"
          },
          "locale": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AccountUpdateInputs": {
        "type": "object",
        "properties": {
          "accountType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountType"
              }
            ],
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "bannerId": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "dietaryRestrictions": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "internalRefId": {
            "type": "string",
            "nullable": true
          },
          "verified": {
            "type": "boolean"
          },
          "locale": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AccountAddressCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        }
      },
      "AccountAddressUpdateInputs": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        }
      },
      "ImportCreateInputs": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportType"
              }
            ],
            "nullable": true
          }
        }
      },
      "ActivityCreateInputs": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "giphyId": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "contentId": {
            "type": "string",
            "nullable": true
          },
          "commentedId": {
            "type": "string",
            "nullable": true
          },
          "videoId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ActivityUpdateInputs": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "giphyId": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "contentId": {
            "type": "string",
            "nullable": true
          },
          "commentedId": {
            "type": "string",
            "nullable": true
          },
          "videoId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AdvertisementCreateInputs": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AdvertisementType"
          },
          "link": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "eventOnly": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "AdvertisementUpdateInputs": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdvertisementType"
              }
            ],
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "eventOnly": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "AnnouncementCreateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "tierId": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventAnnouncementFilters"
              }
            ],
            "nullable": true
          }
        }
      },
      "AnnouncementUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "tierId": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventAnnouncementFilters"
              }
            ],
            "nullable": true
          }
        }
      },
      "AnnouncementTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BenefitCreateInputs": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "managerId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "eventOnly": {
            "type": "boolean"
          }
        }
      },
      "BenefitTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BenefitUpdateInputs": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "managerId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "eventOnly": {
            "type": "boolean"
          }
        }
      },
      "ChannelCollectionCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelCollectionTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelCollectionUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "imageId": {
            "type": "string"
          },
          "bannerId": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "visible": {
            "type": "boolean"
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "appleUrl": {
            "type": "string",
            "nullable": true
          },
          "spotifyUrl": {
            "type": "string",
            "nullable": true
          },
          "googleUrl": {
            "type": "string",
            "nullable": true
          },
          "youtubeUrl": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelSubscriberUpdateInputs": {
        "type": "object",
        "properties": {
          "contentEmailNotification": {
            "type": "boolean"
          },
          "contentPushNotification": {
            "type": "boolean"
          }
        }
      },
      "ChannelTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "bannerId": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "visible": {
            "type": "boolean"
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "appleUrl": {
            "type": "string",
            "nullable": true
          },
          "spotifyUrl": {
            "type": "string",
            "nullable": true
          },
          "googleUrl": {
            "type": "string",
            "nullable": true
          },
          "youtubeUrl": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelContentCreateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "published": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "audioId": {
            "type": "string",
            "nullable": true
          },
          "videoId": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "appleUrl": {
            "type": "string",
            "nullable": true
          },
          "spotifyUrl": {
            "type": "string",
            "nullable": true
          },
          "googleUrl": {
            "type": "string",
            "nullable": true
          },
          "youtubeUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelContentGuestCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentGuestType"
              }
            ],
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "companyLink": {
            "type": "string",
            "nullable": true
          },
          "companyBio": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelContentGuestTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "companyBio": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelContentGuestUpdateInputs": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentGuestType"
              }
            ],
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "companyLink": {
            "type": "string",
            "nullable": true
          },
          "companyBio": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelContentTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChannelContentUpdateInputs": {
        "type": "object",
        "properties": {
          "published": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "audioId": {
            "type": "number",
            "nullable": true
          },
          "videoId": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "appleUrl": {
            "type": "string",
            "nullable": true
          },
          "spotifyUrl": {
            "type": "string",
            "nullable": true
          },
          "googleUrl": {
            "type": "string",
            "nullable": true
          },
          "youtubeUrl": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          }
        }
      },
      "EventActivationCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "maxPoints": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "startAfter": {
            "type": "string",
            "nullable": true
          },
          "protected": {
            "type": "boolean"
          },
          "protectionCode": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "email": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          }
        }
      },
      "EventActivationTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventActivationUpdateInputs": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "maxPoints": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "startAfter": {
            "type": "string",
            "nullable": true
          },
          "protected": {
            "type": "boolean"
          },
          "protectionCode": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventActivationCompletionCreateInputs": {
        "type": "object",
        "properties": {}
      },
      "EventActivationCompletionUpdateInputs": {
        "type": "object",
        "properties": {}
      },
      "EventAddOnCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "pricePerNight": {
            "type": "boolean"
          },
          "supply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "imageId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventAddOnTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventAddOnUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "pricePerNight": {
            "type": "boolean"
          },
          "supply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "imageId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventBadgeFieldUpdateInputs": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BadgeFieldType"
              }
            ],
            "nullable": true
          },
          "lookup": {
            "type": "string",
            "nullable": true
          },
          "maxLength": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "defaultValue": {
            "type": "string",
            "nullable": true
          },
          "transformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BadgeFieldTransformation"
              }
            ],
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventCouponCreateInputs": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "discountAmount": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "discountPercent": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "quantityMin": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "quantityMax": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "amountMin": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "amountMax": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "useLimit": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "emailDomains": {
            "type": "string",
            "nullable": true
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "nullable": true
          },
          "applyToPassType": {
            "type": "boolean"
          },
          "applyToAddOns": {
            "type": "boolean"
          },
          "applyToReservation": {
            "type": "boolean"
          }
        }
      },
      "EventCouponUpdateInputs": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          },
          "discountAmount": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "discountPercent": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "quantityMin": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "quantityMax": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "useLimit": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "limitPerAccount": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "purchaseLimit": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "emailDomains": {
            "type": "string",
            "nullable": true
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "registrationId": {
            "type": "string",
            "nullable": true
          },
          "applyToPassType": {
            "type": "boolean"
          },
          "applyToAddOns": {
            "type": "boolean"
          },
          "applyToReservation": {
            "type": "boolean"
          }
        }
      },
      "EventFaqSectionCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventCreateInputs": {
        "type": "object",
        "properties": {
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          },
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "eventStart": {
            "type": "string"
          },
          "eventEnd": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "internalRefId": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "reservationDescription": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "venueMapId": {
            "type": "string",
            "nullable": true
          },
          "venue": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          },
          "seriesId": {
            "type": "string",
            "nullable": true
          },
          "approved": {
            "type": "boolean"
          },
          "meetingUrl": {
            "type": "string",
            "nullable": true
          },
          "registration": {
            "type": "boolean"
          },
          "registrationStart": {
            "type": "string",
            "nullable": true
          },
          "registrationEnd": {
            "type": "string",
            "nullable": true
          },
          "registrationLimit": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "publicRegistrants": {
            "type": "boolean"
          },
          "sessionsVisible": {
            "type": "boolean"
          },
          "speakersVisible": {
            "type": "boolean"
          },
          "iosAppLink": {
            "type": "string",
            "nullable": true
          },
          "androidAppLink": {
            "type": "string",
            "nullable": true
          },
          "newActivityCreatorEmailNotification": {
            "type": "boolean"
          },
          "newActivityCreatorPushNotification": {
            "type": "boolean"
          },
          "streamReplayId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "groupOnly": {
            "type": "boolean"
          },
          "passSupply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "passLimitPerAccount": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventEmailUpdateInputs": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "nullable": true
          },
          "replyTo": {
            "type": "string",
            "nullable": true
          },
          "calendarFile": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "EventEmailTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventFaqSectionQuestionCreateInputs": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "EventFaqSectionQuestionTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventFaqSectionQuestionUpdateInputs": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "EventFaqSectionTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventFaqSectionUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventPageCreateInputs": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventPageTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventPageUpdateInputs": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventPassCreateInputs": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventPassStatus"
              }
            ],
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "usedAt": {
            "type": "string",
            "nullable": true
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventPassUpdateInputs": {
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventPassStatus"
              }
            ],
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "usedAt": {
            "type": "string",
            "nullable": true
          },
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "couponId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventAttendeeUpdateInputs": {
        "type": "object",
        "properties": {}
      },
      "EventRegistrationBypassCreateInputs": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "closed": {
            "type": "boolean"
          },
          "preRegister": {
            "type": "boolean"
          },
          "postRegister": {
            "type": "boolean"
          }
        }
      },
      "EventRegistrationBypassUpdateInputs": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "closed": {
            "type": "boolean"
          },
          "preRegister": {
            "type": "boolean"
          },
          "postRegister": {
            "type": "boolean"
          }
        }
      },
      "EventSessionCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "nonSession": {
            "type": "boolean"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "visible": {
            "type": "boolean"
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "registrationEnabled": {
            "type": "boolean"
          },
          "limit": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "price": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "locationId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSessionTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSessionUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "nullable": true
          },
          "endTime": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "nonSession": {
            "type": "boolean"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "visible": {
            "type": "boolean"
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "registrationEnabled": {
            "type": "boolean"
          },
          "limit": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "price": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "locationId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSessionLocationCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSessionLocationTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSessionLocationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "googlePlaceId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSessionQuestionCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean"
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventSessionQuestionUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean"
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventSessionQuestionTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSpeakerCreateInputs": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "companyBio": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "isHost": {
            "type": "boolean"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "EventSpeakerTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSpeakerUpdateInputs": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "companyBio": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "isHost": {
            "type": "boolean"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "PassTypeTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventTrackTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "reservationDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventUpdateInputs": {
        "type": "object",
        "properties": {
          "featured": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ],
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "internalRefId": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "reservationDescription": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "eventStart": {
            "type": "string",
            "nullable": true
          },
          "eventEnd": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "venueMapId": {
            "type": "string",
            "nullable": true
          },
          "venue": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "nullable": true
          },
          "seriesId": {
            "type": "string",
            "nullable": true
          },
          "approved": {
            "type": "boolean"
          },
          "meetingUrl": {
            "type": "string",
            "nullable": true
          },
          "registration": {
            "type": "boolean"
          },
          "registrationStart": {
            "type": "string",
            "nullable": true
          },
          "registrationEnd": {
            "type": "string",
            "nullable": true
          },
          "registrationLimit": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "enum": [
                  "null"
                ]
              },
              {
                "type": "string"
              }
            ]
          },
          "publicRegistrants": {
            "type": "boolean"
          },
          "sessionsVisible": {
            "type": "boolean"
          },
          "speakersVisible": {
            "type": "boolean"
          },
          "inviteOnly": {
            "type": "boolean"
          },
          "iosAppLink": {
            "type": "string",
            "nullable": true
          },
          "androidAppLink": {
            "type": "string",
            "nullable": true
          },
          "newActivityCreatorEmailNotification": {
            "type": "boolean"
          },
          "newActivityCreatorPushNotification": {
            "type": "boolean"
          },
          "streamReplayId": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "groupOnly": {
            "type": "boolean"
          },
          "passSupply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "passLimitPerAccount": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "FileUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/FileSource"
          }
        }
      },
      "GroupCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "access": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupAccess"
              }
            ],
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GroupMembershipUpdateInputs": {
        "type": "object",
        "properties": {
          "announcementEmailNotification": {
            "type": "boolean"
          },
          "announcementPushNotification": {
            "type": "boolean"
          },
          "activityEmailNotification": {
            "type": "boolean"
          },
          "activityPushNotification": {
            "type": "boolean"
          },
          "eventEmailNotification": {
            "type": "boolean"
          },
          "eventPushNotification": {
            "type": "boolean"
          },
          "chatPushNotification": {
            "type": "boolean"
          }
        }
      },
      "MembershipUpdatePermission": {
        "type": "object",
        "properties": {
          "read": {
            "type": "boolean"
          },
          "create": {
            "type": "boolean"
          },
          "update": {
            "type": "boolean"
          },
          "del": {
            "type": "boolean"
          }
        }
      },
      "OrganizationMembershipUpdateInputs": {
        "type": "object",
        "properties": {
          "org": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "users": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "reports": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "activities": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "events": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "groups": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "accounts": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "channels": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "threads": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "storage": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "support": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "sponsors": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "benefits": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "interests": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "advertisements": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "subscriptions": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "invoices": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          },
          "announcements": {
            "$ref": "#/components/schemas/MembershipUpdatePermission"
          }
        }
      },
      "GroupTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GroupUpdateInputs": {
        "type": "object",
        "properties": {
          "featured": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "access": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupAccess"
              }
            ],
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "externalUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ImageCreateInputs": {
        "type": "object",
        "properties": {
          "imageDataUri": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ImageType"
          }
        }
      },
      "UserImageUpdateInputs": {
        "type": "object",
        "properties": {
          "imageDataUri": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "userId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          }
        }
      },
      "ImageUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ImageType"
          }
        }
      },
      "InterestCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          }
        }
      },
      "InterestUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          }
        }
      },
      "InvoiceCreateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "dueDate": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceStatus"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "InvoiceLineItemCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "InvoiceLineItemUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "amount": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "InvoiceUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceStatus"
              }
            ],
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LeadCreateInputs": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/LeadStatus"
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LeadUpdateInputs": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/LeadStatus"
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NotificationPreferencesCreateInputs": {
        "type": "object",
        "properties": {}
      },
      "NotificationPreferencesUpdateInputs": {
        "type": "object",
        "properties": {}
      },
      "OrganizationPageCreateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrganizationPageTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrganizationPageUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "html": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrganizationUpdateInputs": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "primaryColor": {
            "type": "string",
            "nullable": true
          },
          "secondaryColor": {
            "type": "string",
            "nullable": true
          },
          "logoId": {
            "type": "string",
            "nullable": true
          },
          "darkLogoId": {
            "type": "string",
            "nullable": true
          },
          "iconId": {
            "type": "string",
            "nullable": true
          },
          "darkIconId": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "youtube": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "defaultAuthAction": {
            "$ref": "#/components/schemas/DefaultAuthAction"
          },
          "authLayout": {
            "$ref": "#/components/schemas/AuthLayout"
          },
          "requirePhone": {
            "type": "boolean"
          },
          "requireTitle": {
            "type": "boolean"
          },
          "requireCompany": {
            "type": "boolean"
          },
          "iosAppLink": {
            "type": "string",
            "nullable": true
          },
          "androidAppLink": {
            "type": "string",
            "nullable": true
          },
          "appIconId": {
            "type": "string",
            "nullable": true
          },
          "appAdaptiveIconId": {
            "type": "string",
            "nullable": true
          },
          "appSplashScreenId": {
            "type": "string",
            "nullable": true
          },
          "locales": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "googleServices": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaymentIntentPurchaseMetadataInputs": {
        "type": "object",
        "properties": {}
      },
      "PushDeviceCreateInputs": {
        "type": "object",
        "properties": {}
      },
      "PushDeviceUpdateInputs": {
        "type": "object",
        "properties": {}
      },
      "EventQuestionChoiceCreateInputs": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "supply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventQuestionChoiceTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventQuestionChoiceUpdateInputs": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "supply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventQuestionCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RegistrationQuestionType"
              }
            ],
            "nullable": true
          },
          "sectionId": {
            "type": "number"
          },
          "questionId": {
            "type": "number"
          },
          "choiceId": {
            "type": "number"
          },
          "required": {
            "type": "boolean"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "default": {
            "type": "string",
            "nullable": true
          },
          "span": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "mutable": {
            "type": "boolean"
          },
          "min": {
            "type": "string",
            "nullable": true
          },
          "max": {
            "type": "string",
            "nullable": true
          },
          "validation": {
            "type": "string",
            "nullable": true
          },
          "validationMessage": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "featured": {
            "type": "boolean"
          },
          "choices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "EventQuestionSearchInputs": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "top": {
            "type": "boolean"
          }
        }
      },
      "EventQuestionSearchValuesCreateInputs": {
        "type": "object",
        "properties": {
          "values": {
            "type": "string"
          }
        }
      },
      "EventQuestionSearchValueUpdateInputs": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "top": {
            "type": "boolean"
          }
        }
      },
      "EventQuestionTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventQuestionUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RegistrationQuestionType"
              }
            ],
            "nullable": true
          },
          "required": {
            "type": "boolean"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "default": {
            "type": "string",
            "nullable": true
          },
          "span": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "mutable": {
            "type": "boolean"
          },
          "min": {
            "type": "string",
            "nullable": true
          },
          "max": {
            "type": "string",
            "nullable": true
          },
          "validation": {
            "type": "string",
            "nullable": true
          },
          "validationMessage": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "featured": {
            "type": "boolean"
          }
        }
      },
      "ReportCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "parentId": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "filters": {
            "type": "string",
            "nullable": true
          },
          "columns": {
            "type": "string",
            "nullable": true
          },
          "charts": {
            "type": "string",
            "nullable": true
          },
          "advancedFilter": {
            "type": "string",
            "nullable": true
          },
          "shared": {
            "type": "boolean"
          }
        }
      },
      "ReportUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "filters": {
            "type": "string",
            "nullable": true
          },
          "columns": {
            "type": "string",
            "nullable": true
          },
          "charts": {
            "type": "string",
            "nullable": true
          },
          "advancedFilter": {
            "type": "string",
            "nullable": true
          },
          "shared": {
            "type": "boolean"
          }
        }
      },
      "EventSectionCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "guestDescription": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "EventSectionTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "guestDescription": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventSectionUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "guestDescription": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "SeriesCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "SeriesUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "LevelCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "scale": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "LevelTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LevelUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "scale": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          }
        }
      },
      "StreamInputCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "StreamInputUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "StreamInputOutputCreateInputs": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "streamKey": {
            "type": "string"
          }
        }
      },
      "StreamInputOutputUpdateInputs": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "StreamOutputCreateInputs": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "streamKey": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "SubscriptionProductCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "statementDescriptor": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "SubscriptionProductPriceCreateInputs": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriptionProductPriceType"
          },
          "amount": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "currency": {
            "enum": [
              "usd"
            ]
          },
          "interval": {
            "$ref": "#/components/schemas/SubscriptionProductPriceInterval"
          },
          "intervalCount": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "SubscriptionProductPriceUpdateInputs": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        }
      },
      "SubscriptionProductUpdateInputs": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "statementDescriptor": {
            "type": "string",
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "SubscriptionCreateInputs": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          },
          "expiresAt": {
            "type": "string",
            "nullable": true
          },
          "cancelAtEnd": {
            "type": "boolean"
          },
          "integrationId": {
            "type": "string",
            "nullable": true
          },
          "subscriptionProductId": {
            "type": "string",
            "nullable": true
          },
          "subscriptionProduct": {
            "$ref": "#/components/schemas/BaseSubscriptionProduct"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "account": {
            "$ref": "#/components/schemas/BaseAccount"
          },
          "priceId": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "$ref": "#/components/schemas/BaseSubscriptionProductPrice"
          }
        }
      },
      "SubscriptionUpdateInputs": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SupportTicketCreateInputs": {
        "type": "object",
        "properties": {}
      },
      "SupportTicketUpdateInputs": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SupportTicketType"
          },
          "email": {
            "type": "string"
          },
          "request": {
            "type": "string"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "oneOf": [
              {
                "enum": [
                  "new"
                ]
              },
              {
                "enum": [
                  "inProgress"
                ]
              },
              {
                "enum": [
                  "complete"
                ]
              }
            ]
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseSupportTicketNote"
            }
          }
        }
      },
      "SupportTicketNoteCreateInputs": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        }
      },
      "SupportTicketNoteUpdateInputs": {
        "type": "object",
        "properties": {}
      },
      "TeamCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrganizationTeamMemberCreateInputs": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "startDate": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrganizationTeamMemberUpdateInputs": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "linkedIn": {
            "type": "string",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "nullable": true
          },
          "instagram": {
            "type": "string",
            "nullable": true
          },
          "twitter": {
            "type": "string",
            "nullable": true
          },
          "tikTok": {
            "type": "string",
            "nullable": true
          },
          "discord": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "startDate": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TeamUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ThreadCreateInputs": {
        "type": "object",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/ThreadAccessLevel"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "firstMessage": {
            "type": "string",
            "nullable": true
          },
          "accountIds": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ThreadUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "visible": {
            "type": "boolean"
          },
          "access": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreadAccessLevel"
              }
            ],
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "firstMessage": {
            "type": "string",
            "nullable": true
          },
          "accountIds": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PassTypeCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "price": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PassTypeVisibility"
              }
            ],
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "cancelable": {
            "type": "boolean"
          },
          "transferable": {
            "type": "boolean"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "accessLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PassTypeAccessLevel"
              }
            ],
            "nullable": true
          },
          "featuredImageId": {
            "type": "string",
            "nullable": true
          },
          "supply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "minQuantityPerSale": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "maxQuantityPerSale": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "limitPerAccount": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "emailDomains": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "enableCoupons": {
            "type": "boolean"
          },
          "overrideStartDate": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PassTypeUpdateInputs": {
        "type": "object",
        "properties": {
          "visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PassTypeVisibility"
              }
            ],
            "nullable": true
          },
          "featured": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "cancelable": {
            "type": "boolean"
          },
          "transferable": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "longDescription": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "accessLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PassTypeAccessLevel"
              }
            ],
            "nullable": true
          },
          "featuredImageId": {
            "type": "string",
            "nullable": true
          },
          "supply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "minQuantityPerSale": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "maxQuantityPerSale": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "limitPerAccount": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "emailDomains": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "enableCoupons": {
            "type": "boolean"
          },
          "overrideStartDate": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TierCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "iconName": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "internal": {
            "type": "boolean"
          }
        }
      },
      "TierUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "iconName": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "internal": {
            "type": "boolean"
          }
        }
      },
      "EventTrackCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventTrackUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TriggerCreateInputs": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "TriggerUpdateInputs": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "UserCreateInputs": {
        "type": "object",
        "properties": {}
      },
      "UserUpdateInputs": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "UserApiKeyCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "VideoUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "thumbnailPct": {
            "type": "number",
            "nullable": true
          }
        }
      },
      "OrganizationModuleUpdateInputs": {
        "type": "object",
        "properties": {
          "requireAuth": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "editable": {
            "type": "boolean"
          }
        }
      },
      "PassTypePriceScheduleCreateInputs": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PassTypePriceScheduleUpdateInputs": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PassTypeRefundScheduleCreateInputs": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          }
        }
      },
      "PassTypeRefundScheduleUpdateInputs": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          }
        }
      },
      "IntegrationCreateInputs": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/IntegrationType"
          },
          "enabled": {
            "type": "boolean"
          },
          "publicUrl": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          }
        }
      },
      "IntegrationUpdateInputs": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "publicUrl": {
            "type": "string",
            "nullable": true
          },
          "publicKey": {
            "type": "string",
            "nullable": true
          },
          "secretKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypeCreateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "price": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "pricePerNight": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "supply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "minPasses": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "maxPasses": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "minStart": {
            "type": "string",
            "nullable": true
          },
          "defaultStart": {
            "type": "string",
            "nullable": true
          },
          "maxStart": {
            "type": "string",
            "nullable": true
          },
          "minEnd": {
            "type": "string",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "nullable": true
          },
          "maxEnd": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypeUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "price": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "pricePerNight": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sortOrder": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "supply": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "minPasses": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "maxPasses": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "minStart": {
            "type": "string",
            "nullable": true
          },
          "defaultStart": {
            "type": "string",
            "nullable": true
          },
          "maxStart": {
            "type": "string",
            "nullable": true
          },
          "minEnd": {
            "type": "string",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "nullable": true
          },
          "maxEnd": {
            "type": "string",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypeTranslationUpdateInputs": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypeReservationCreateInputs": {
        "type": "object",
        "properties": {
          "eventRoomTypeId": {
            "type": "string"
          },
          "passes": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "start": {
            "type": "string",
            "nullable": true
          },
          "end": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypeReservationUpdateInputs": {
        "type": "object",
        "properties": {
          "eventRoomTypeId": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "nullable": true
          },
          "end": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypePassTypeDetailsUpdateInputs": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "premium": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "includedNights": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "minPasses": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "maxPasses": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "enum": [
                  "null"
                ]
              }
            ]
          },
          "minStart": {
            "type": "string",
            "nullable": true
          },
          "defaultStart": {
            "type": "string",
            "nullable": true
          },
          "maxStart": {
            "type": "string",
            "nullable": true
          },
          "minEnd": {
            "type": "string",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "nullable": true
          },
          "maxEnd": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EventRoomTypeAddOnDetailsUpdateInputs": {
        "type": "object",
        "properties": {
          "minStart": {
            "type": "string",
            "nullable": true
          },
          "defaultStart": {
            "type": "string",
            "nullable": true
          },
          "maxStart": {
            "type": "string",
            "nullable": true
          },
          "minEnd": {
            "type": "string",
            "nullable": true
          },
          "defaultEnd": {
            "type": "string",
            "nullable": true
          },
          "maxEnd": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TaxIntegrationCreateInputs": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          }
        }
      },
      "TaxIntegrationUpdateInputs": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CloneOptions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "eventStart": {
            "type": "string"
          },
          "eventEnd": {
            "type": "string"
          },
          "passTypes": {
            "type": "boolean"
          },
          "addOns": {
            "type": "boolean"
          },
          "roomTypes": {
            "type": "boolean"
          },
          "bypassList": {
            "type": "boolean"
          },
          "coHosts": {
            "type": "boolean"
          },
          "emails": {
            "type": "boolean"
          },
          "faqSections": {
            "type": "boolean"
          },
          "pages": {
            "type": "boolean"
          },
          "benefits": {
            "type": "boolean"
          },
          "interests": {
            "type": "boolean"
          },
          "activations": {
            "type": "boolean"
          },
          "onSite": {
            "type": "boolean"
          },
          "tracks": {
            "type": "boolean"
          },
          "speakers": {
            "type": "boolean"
          },
          "sponsors": {
            "type": "boolean"
          },
          "locations": {
            "type": "boolean"
          },
          "sessions": {
            "type": "boolean"
          }
        }
      }
    }
  },
  "security": [
    {
      "OrganizationId": [],
      "ApiKeyAuth": []
    },
    {
      "OrganizationId": [],
      "TokenAuth": []
    }
  ]
}